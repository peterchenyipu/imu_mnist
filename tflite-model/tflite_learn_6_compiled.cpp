/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 26.04.2024 04:16:38

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 10
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 20
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 14176;
#else
constexpr int kTensorArenaSize = 13152;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_ADD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.26970979571342468, } };
const TfArray<1, int> quant0_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 300, 6, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 150, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[3] = { 1, 75, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 1, 75, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[3] = { 1, 38, 64, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const int32_t tensor_data6[1] = { 1 };
const int tensor_dimension6 = 0; /* empty TfLiteIntArray */
const ALIGN(16) int32_t tensor_data7[10] = { -344, 555, -515, 164, 173, 284, -215, 1180, -841, -126, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<1, float> quant7_scale = { 1, { 0.00011980769340880215, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[10*64] = { 
  -42, -62, 46, 10, 21, -65, 40, 45, 60, 28, -85, -17, 18, -14, 9, -1, -31, -2, 67, -34, 1, 4, 33, -6, 16, 53, -36, -99, -23, 70, 59, -37, -26, -100, -87, -78, -1, -10, -20, 61, -30, -91, 74, -89, 65, -13, 32, -35, 30, -21, -36, 61, -44, -11, -10, 15, -9, -37, -104, 72, -101, 0, -21, -8, 
  -83, -21, 36, 82, 2, -62, 36, -99, -82, -74, -11, -3, 47, 7, -80, 47, 21, 54, -81, -16, 17, 72, -57, -58, 47, -65, -43, -86, -71, -75, -75, 15, 72, 8, -39, 6, -31, -29, -21, -1, -75, -80, -6, -16, -91, 45, 52, -74, -97, 2, -38, -15, -86, 60, -30, 78, 50, -91, -2, -77, -62, 57, 39, 34, 
  -52, -8, 5, 39, 47, 5, -37, -37, 38, -50, -38, 9, 35, -60, 15, -36, 41, -5, -38, 19, -15, -30, -18, 41, 53, -51, 18, 24, 14, 31, -32, -27, -17, 60, 51, 57, -34, -67, 54, 62, 31, -26, 5, 54, 51, 16, 3, -30, 1, -75, -20, -8, 10, 0, -41, 2, 8, 18, -26, 39, 44, 48, -54, -53, 
  -5, 55, 33, -18, 3, -32, -12, -4, -86, -58, 53, 28, -17, 4, 56, -28, -33, -42, -108, 33, -27, -5, -101, -82, 47, -85, 60, 69, 1, -98, -66, 39, 46, 2, 11, 61, -23, -91, 50, -22, 54, 55, -112, 29, -102, -1, 25, 39, -69, -72, 14, -107, 66, -37, -22, -36, 24, -14, 25, -73, 14, -33, 15, -6, 
  56, -29, 31, -28, -21, 57, -32, 43, 4, 50, 53, -56, -60, -26, -53, 55, -33, -14, -32, 36, -49, -10, -30, 23, -93, -2, -40, 35, -34, 8, -9, -19, 47, 12, -36, -18, 20, 31, -59, -48, 21, 41, 2, 48, -9, -47, -60, 24, 2, 16, -14, 2, -20, 29, 28, 7, -6, -7, 29, 33, 50, 31, 29, 4, 
  41, 17, -61, -58, 39, 29, -27, -22, -21, -23, 44, 53, 19, 4, -23, -29, -57, -65, -5, 36, 1, -47, 30, -38, -19, -2, 53, 16, 43, -76, 42, -8, -19, 29, 12, -35, -6, 13, -13, -52, -27, -8, -96, -30, -93, 7, 10, 60, 34, 45, 53, -104, 48, -48, -22, -26, -60, -10, 37, -45, 5, -49, 73, 80, 
  -68, -40, 3, 18, -43, 33, -14, 15, 67, -29, 7, -41, 43, -10, -40, -64, 55, -7, 24, -110, -39, 17, 11, 51, -33, -30, -42, -11, 4, 61, 39, -12, -9, 41, -109, 53, 60, -25, -84, 67, 18, 44, 29, 53, 57, -14, 38, -21, 3, 25, -48, 44, -81, 38, -42, 1, -8, -50, 34, 61, -27, -15, -26, -45, 
  -14, -24, 34, -10, -70, 34, -24, -1, 3, -30, 27, 33, 48, 40, -43, -18, 40, 33, -44, -64, -9, 49, -21, -42, -5, 17, -64, 2, 12, -89, 28, -6, 11, -42, -29, -27, -7, -19, -58, -40, 45, -47, -46, -31, 13, 50, 53, 30, 34, 10, 0, -63, -3, 61, 18, 55, 35, -1, -13, -35, -64, -25, -32, -21, 
  29, -20, -48, -28, 7, -40, -81, 55, 30, 40, 13, 30, -73, -21, 70, -41, -28, -92, 62, -8, -63, -20, 67, 53, 49, 4, 31, 48, 12, 28, 47, -78, -87, 29, 18, -3, 65, -27, -11, 13, -10, 6, 0, 45, 40, -43, -89, -31, 49, -39, 21, 43, 41, -22, 15, -102, -87, 66, -9, 46, 22, -50, -14, 14, 
  -5, -92, -49, -45, -42, 42, -44, 15, 52, -13, 38, -23, -34, 63, -67, 51, -45, -22, 33, -43, -16, -49, 0, 50, -55, 44, 26, -100, 59, 16, 51, 28, -8, -76, -17, -46, -47, 81, -61, -24, -5, -68, 48, -127, 11, -39, 22, -42, 46, 58, 72, 33, -35, -15, 59, -31, 14, -33, -9, 55, -100, -26, 63, 15, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 10,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0071241399273276329, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { 19837, -100, 24918, 38189, -33426, 4117, 36109, 3779, -18106, -1253, 5765, -12142, 14735, -54, 1667, -8524, 7141, 22039, -15755, -9642, 17993, 44404, -668, -15046, -15853, 2816, -8318, 2138, 6410, -25664, -769, 3120, 5641, -9168, -26971, -11952, 2017, -3120, -23985, -34281, 6002, 12987, -21075, 3444, -10897, 13570, 24495, 24067, 16719, 1633, 10153, -25991, 7464, 20434, 5554, 28221, 39913, 7569, 3274, -16842, -2368, 6992, -312, 2970, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 8.0121630162466317e-05, 4.9372036301065236e-05, 9.3458125775214285e-05, 4.55508052255027e-05, 5.6890370615292341e-05, 7.9946861660573632e-05, 6.7451328504830599e-05, 8.8385546405334026e-05, 8.7746375356800854e-05, 9.0217952674720436e-05, 8.2675018347799778e-05, 6.7249282437842339e-05, 6.8086745159234852e-05, 9.7650001407600939e-05, 0.00010193495836574584, 0.00010010044206865132, 7.9107456258498132e-05, 6.2116487242747098e-05, 5.8711724705062807e-05, 0.00011212918616365641, 8.1655394751578569e-05, 5.3415449656313285e-05, 7.8773737186565995e-05, 5.901742770220153e-05, 7.3980903835035861e-05, 8.9782050054054707e-05, 9.4606366474181414e-05, 6.0892751207575202e-05, 8.2702565123327076e-05, 9.9258228146936744e-05, 7.2790775448083878e-05, 0.00012477488780859858, 0.00011332794383633882, 6.8271496274974197e-05, 6.2583334511145949e-05, 7.2734721470624208e-05, 7.937202462926507e-05, 0.00011500383698148653, 7.6708885899279267e-05, 7.0130045060068369e-05, 9.1150934167671949e-05, 8.5576284618582577e-05, 9.5271563623100519e-05, 7.600159733556211e-05, 9.3919145001564175e-05, 9.3515009211841971e-05, 6.967066292418167e-05, 8.1273559771943837e-05, 8.3597798948176205e-05, 9.1804045950993896e-05, 0.00010082329390570521, 8.0856159911490977e-05, 9.1789457655977458e-05, 8.33542799227871e-05, 8.8895692897494882e-05, 5.6616907386342064e-05, 5.3009844123153016e-05, 7.5331307016313076e-05, 6.6917746153194457e-05, 0.00010279412526870146, 8.9210618170909584e-05, 7.5072595791425556e-05, 9.7017909865826368e-05, 9.2699236120097339e-05, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[64*1*3*32] = { 
  /* [0][0][][] */ 38,-8,-43,110,-47,-47,96,-20,-83,28,-62,117,-76,-84,75,43,-28,-11,-26,51,43,-79,-40,-24,52,-11,-67,-32,-106,124,42,-40, 46,56,-72,10,-98,-14,51,-104,-84,-28,-62,-43,-71,-84,80,94,-81,17,40,-24,92,20,-34,39,64,12,-23,-74,-125,9,41,-60, 95,-23,-100,15,-69,-54,9,30,-100,82,-68,110,-80,-112,121,47,-46,-40,45,-40,94,-1,-108,127,37,22,-39,-38,-104,46,74,-59, 
  /* [1][0][][] */ 34,9,-51,46,-6,-54,-63,-2,2,-51,-21,-46,17,-29,59,-77,-26,-48,-66,2,-23,122,116,12,-34,112,36,52,-102,-5,16,82, 54,-39,20,-25,-62,57,36,15,31,4,-20,-82,-23,-64,77,13,-44,8,-105,-16,22,-15,30,55,-12,-15,64,-45,-124,-64,-60,108, 26,127,-59,-3,-74,78,28,87,88,-9,-45,-3,6,-90,10,-58,63,-53,-30,23,5,74,8,23,-20,32,91,111,-90,31,80,27, 
  /* [2][0][][] */ -27,41,6,-88,-93,-78,-28,-25,-10,62,-103,8,42,-52,8,0,-14,-30,-26,-56,15,49,-74,-77,-10,127,-9,-4,30,61,40,13, 4,-57,-47,-117,-67,-12,-11,-75,-12,46,-35,-31,-30,-71,-43,-37,-33,-35,-11,-43,-13,1,-53,-55,78,68,-1,40,-47,-21,2,46, 46,-41,-14,-1,-35,-51,54,-67,25,-22,-99,-35,53,-41,63,-20,-76,-46,-31,-40,12,40,42,-11,32,124,-16,4,41,-58,21,8, 
  /* [3][0][][] */ -122,-47,61,-98,44,-33,20,-49,-79,29,-50,-8,-81,94,31,-12,-80,-4,-106,-27,-56,-107,70,-49,-50,-78,37,-59,5,-26,58,-40, -96,-120,81,-63,25,-30,-14,-66,-52,80,-25,-95,-49,32,-34,-62,-23,-59,20,-93,-105,34,-5,7,-122,-55,55,-34,-29,-43,68,-48, 31,7,82,43,127,-41,74,-9,-31,15,-59,-21,36,17,11,34,-77,3,-117,-58,-79,16,80,-59,-10,-77,116,-105,-19,-46,30,50, 
  /* [4][0][][] */ 8,35,18,61,24,10,-64,39,25,-6,0,-53,77,101,68,-59,16,40,-13,-51,-28,111,9,-39,-14,46,127,36,-27,-35,98,90, 12,9,24,12,94,127,-62,-42,-15,58,-19,-44,-28,27,63,-66,44,4,35,-2,2,54,16,23,16,-4,108,16,-26,26,-54,49, -3,-6,10,56,99,52,42,-27,11,-29,-24,-69,13,110,60,26,-59,38,38,-2,-36,105,48,-66,8,19,80,11,7,-22,80,22, 
  /* [5][0][][] */ -14,73,-25,-12,-9,-45,44,-14,75,-99,-88,31,-51,-48,-113,-123,6,-18,-6,52,26,-47,31,-71,52,-17,-47,-15,99,-97,29,-15, 5,17,26,107,-6,-15,56,-78,71,-83,-72,-18,-38,-8,-73,-28,82,-38,39,121,28,-48,-15,7,42,10,-54,22,14,-25,37,48, 16,93,-54,104,-42,-62,32,-22,75,-104,-3,89,-6,-42,-106,-46,23,32,33,127,-15,-79,16,36,42,123,-54,13,-59,-32,5,5, 
  /* [6][0][][] */ -64,-55,-28,-35,60,-58,1,15,11,43,-66,-15,33,8,35,-6,-3,-38,-127,-70,-9,-18,43,-52,-65,-2,50,7,-30,-18,-44,-27, -63,-8,-2,5,-44,-35,-49,-69,5,34,-38,1,27,20,-30,53,-75,-38,-53,-35,-25,-3,-67,26,-41,-19,-15,-25,-47,-16,-2,-12, -5,-72,27,-6,-7,-12,-42,-33,5,-10,-54,-64,28,52,14,-20,-74,-5,-45,-54,-90,4,37,-1,-29,10,23,-42,23,20,-36,-78, 
  /* [7][0][][] */ -50,40,58,-26,-61,-47,81,-127,5,98,-16,11,-34,-92,5,92,40,-22,-4,-29,-6,-10,-25,23,75,36,-5,46,-36,88,-44,96, -69,-11,23,-79,-106,-28,-25,-19,-49,4,-15,71,-21,-79,-28,26,21,-21,46,-19,44,42,-9,-11,7,-49,-16,-24,-6,120,60,58, -56,-33,65,-6,-79,-38,85,-83,-32,103,-54,5,30,-59,-20,55,-24,37,55,-82,66,-6,-30,-5,86,75,-68,35,-28,122,21,58, 
  /* [8][0][][] */ -59,-59,127,-22,2,59,-9,-5,10,-3,40,5,67,13,-32,41,40,48,81,4,3,5,17,-13,91,-19,26,26,45,15,-8,52, -35,-40,79,-12,-13,27,33,-36,8,27,11,8,27,16,-16,38,-21,9,60,-40,-22,5,35,-5,37,-56,44,17,34,-22,-8,32, -52,-20,73,-63,8,-1,-24,-16,-16,7,71,3,52,-4,-76,46,50,56,26,-12,-25,33,55,-24,108,-32,16,-1,27,20,25,25, 
  /* [9][0][][] */ -39,-30,6,52,-28,35,11,-62,-61,38,-1,56,26,-22,7,105,33,30,67,-17,17,-1,-29,15,10,-10,-28,-2,-50,37,63,16, -5,4,21,-9,-18,-43,-6,25,-67,93,-60,93,-43,-33,29,56,-74,-20,22,25,46,-58,-46,52,14,-4,14,-43,-59,73,90,-49, 21,-15,-9,0,-27,0,24,6,-38,47,-44,127,24,-17,33,75,-22,54,-34,8,-28,-2,-3,-41,22,-41,-9,-46,-45,67,52,-77, 
  /* [10][0][][] */ 87,83,-80,90,14,21,69,22,44,-38,-82,44,-57,-81,38,-28,42,-7,-2,92,108,-15,-71,-50,14,-12,-51,-36,-16,20,-5,-5, 2,110,-38,1,-50,-56,98,69,-9,-75,-45,64,-44,-86,36,26,31,26,26,57,31,-85,-27,-19,16,42,-63,-4,2,7,-67,-60, 1,4,-47,93,-16,-41,22,-12,-33,14,-94,36,-80,-122,83,46,22,-9,42,127,11,-28,-18,79,-54,-9,-72,-26,-32,0,-41,-3, 
  /* [11][0][][] */ 92,-20,-60,48,34,76,18,-13,25,34,40,-42,-20,7,21,25,13,-16,-8,-43,-27,50,59,80,-51,-29,105,96,-29,-3,19,39, 4,-50,6,81,56,81,-27,23,-8,40,113,-102,68,-32,5,3,-34,-29,-96,15,37,48,62,89,-6,-41,127,59,34,-56,-25,-26, 39,-53,-24,-25,8,32,-13,-44,-10,-59,19,-72,6,21,-14,-70,-78,81,-56,-81,-66,15,-11,94,-65,-96,123,63,8,-30,70,47, 
  /* [12][0][][] */ -40,-14,63,-43,-5,65,56,-83,-2,72,7,13,-32,116,-30,-12,-71,-34,-16,-73,-86,36,103,-74,-87,-127,97,61,51,-15,89,12, -70,-56,-14,22,-45,28,-52,-29,-33,-5,15,27,16,64,-11,30,-81,-5,-58,-12,22,-7,42,-38,-92,-36,-1,34,15,-50,8,24, -104,-27,50,-23,71,40,-5,-38,-23,10,1,-4,-29,97,-50,-61,-71,-30,-52,-8,-76,28,38,48,-1,-63,5,10,14,-18,116,-60, 
  /* [13][0][][] */ -11,-33,-81,1,-15,-10,-18,58,-37,-78,5,63,-110,-69,23,-53,77,13,20,41,94,-83,53,14,-65,-37,-35,21,-4,42,-47,-25, -2,-50,-41,44,-4,41,-24,9,15,-22,58,-32,-56,-30,-26,31,25,53,19,82,12,-12,-40,63,27,6,-18,-14,14,28,15,-72, 16,33,-90,38,12,15,-30,77,-4,-17,47,58,-79,-4,-7,-8,60,25,-44,127,35,-24,-38,-38,49,11,37,47,14,-1,-12,-87, 
  /* [14][0][][] */ -24,23,6,-26,-93,36,-2,-59,25,76,19,-66,-17,-81,29,29,22,2,-30,-20,-24,79,16,-23,14,-19,85,51,-35,56,-24,91, -24,-28,-4,-27,-43,12,7,-65,2,71,37,-82,26,-12,22,-20,-2,-17,-75,-17,-21,63,-19,3,-46,-50,29,-13,-26,64,-10,20, -19,-32,30,-30,-68,45,31,-5,-5,11,61,-127,-15,-21,18,37,6,47,-50,-58,24,66,-13,-40,25,-61,108,86,-30,78,33,22, 
  /* [15][0][][] */ 29,74,-20,6,43,-85,-12,-55,-35,21,13,8,36,3,115,42,-64,-8,53,106,-31,-6,-94,42,-27,45,-55,-26,35,27,-50,-83, 22,13,-13,29,32,6,22,-4,-64,-18,-26,42,20,9,108,72,6,21,30,48,2,-12,-16,-10,34,77,-68,-60,102,7,25,-62, 69,56,-44,41,70,-70,32,-15,-64,-46,-11,-5,-14,-35,111,79,-17,-37,-12,102,-47,-89,-77,61,-1,61,-71,-12,127,-9,-43,-56, 
  /* [16][0][][] */ -51,-51,89,-46,-43,-8,-12,-92,32,-29,68,-56,40,54,-105,-24,-29,59,12,-16,-92,14,49,-28,123,-108,-40,-34,1,35,85,94, -100,-30,44,-88,-75,57,49,12,27,19,3,-21,-79,26,-105,-49,26,-15,19,-35,-35,-14,104,31,90,-77,8,-66,16,-64,19,64, -18,26,106,-34,-44,82,94,-40,69,-39,-4,-61,-27,95,-94,-55,-2,-16,-70,5,37,-1,111,-16,-2,-127,15,-35,63,-38,104,22, 
  /* [17][0][][] */ -46,-52,43,-16,86,-8,-17,-36,-36,-43,-13,40,-17,87,-54,10,-10,15,31,-40,-13,-52,-32,14,1,-74,24,-41,91,-28,123,-83, -62,11,40,-60,28,15,26,-87,3,19,-19,-53,-69,12,-50,-6,-49,-15,-76,4,-61,-21,58,-3,-19,-20,50,-75,65,-76,-5,-30, -16,-21,-20,-37,112,29,-10,-42,8,-25,-55,-11,-24,69,26,14,-61,-45,-38,25,-21,-40,11,-8,-57,-36,56,-54,127,-68,39,-38, 
  /* [18][0][][] */ -74,-99,67,-65,-110,78,-17,86,-37,1,76,61,44,26,-30,127,17,105,82,-39,24,37,-19,65,37,-39,-5,22,-61,92,26,-13, -31,-38,-6,-9,-16,-2,-59,38,17,45,20,67,-46,25,-41,87,26,34,52,-32,-30,23,63,-24,25,-14,40,-14,-27,-7,41,-21, -46,-33,-10,-78,-9,16,-55,45,-21,0,68,112,51,-16,-77,10,36,107,39,63,55,-11,68,11,110,41,18,3,-27,66,-4,-15, 
  /* [19][0][][] */ 33,22,25,81,44,17,29,18,-52,48,-43,12,21,35,127,58,-62,-10,24,-13,-26,14,-29,76,20,29,4,-33,-81,12,22,-25, 37,28,13,28,3,25,30,8,-62,27,-47,10,1,-12,83,-19,-1,-8,-10,-7,20,19,20,24,31,49,-44,-44,-50,0,43,-31, 103,76,-8,15,41,-51,11,20,-41,-5,-67,1,-20,0,76,-28,-55,-35,1,1,-17,-7,-9,-20,-27,99,-11,-6,-33,35,69,1, 
  /* [20][0][][] */ 24,12,-35,29,-5,22,-61,10,15,22,-21,-88,48,51,-29,-9,-74,44,-43,2,-24,8,-38,30,-114,16,100,70,-45,-15,1,-91, -27,-56,6,-35,43,77,-69,60,-20,1,7,-91,22,40,-41,2,77,35,-10,18,-65,15,-71,71,-104,30,35,10,-9,-18,-12,-92, 6,7,-38,-10,12,-17,-127,54,-43,27,15,11,-20,39,-47,43,3,109,-18,-74,11,-75,-19,42,-72,-55,30,5,-53,-1,-60,-47, 
  /* [21][0][][] */ -95,-86,-39,-18,59,7,24,-116,-42,66,-15,-26,-7,-12,-13,24,-9,-58,-78,-121,-10,-74,-9,11,51,-70,2,-62,-42,-58,66,24, -43,-118,51,36,-52,-127,21,-92,35,-13,-115,-1,-65,-12,30,-70,-65,-9,-21,-30,-57,-12,44,54,-4,-80,68,-46,-49,-76,28,16, -102,-42,16,-14,71,-24,47,0,-51,36,-44,-8,-19,22,1,-101,-20,-71,-41,-36,-52,-24,55,-72,-44,-107,45,35,-1,-26,80,-36, 
  /* [22][0][][] */ -27,-22,14,-48,-58,-7,-46,30,17,4,19,7,-1,-1,-27,57,27,127,63,-35,50,22,-7,-4,57,-23,-14,-11,-82,36,24,3, 2,8,-41,-30,-86,-29,-37,71,3,-3,34,21,6,-27,-40,16,8,23,21,-24,-22,48,44,67,-50,15,5,22,-58,-1,-40,21, -34,-28,-39,-56,-58,14,8,69,-19,-14,44,67,54,4,-45,23,59,119,35,-8,-6,1,70,-33,60,-24,1,-19,-60,11,6,-15, 
  /* [23][0][][] */ -53,-69,49,-21,32,7,-3,-110,24,37,62,-3,83,1,-50,78,-3,37,48,51,22,16,58,99,53,-37,-13,-17,14,-45,-8,105, -21,-81,53,5,-9,-27,29,14,-18,14,55,65,68,9,-11,-5,-43,26,-32,-5,1,37,-10,90,127,17,-52,-35,-22,-44,123,7, -79,-30,77,-61,-28,81,6,-9,19,11,2,-34,104,27,-95,76,-12,87,1,-10,15,-43,13,-19,58,-72,-8,0,50,-23,88,38, 
  /* [24][0][][] */ 13,-5,30,-6,45,75,-15,-52,27,116,68,-76,46,28,64,-25,-23,-63,-90,-9,-16,70,70,40,-31,-14,127,29,30,28,8,14, 2,-19,15,34,29,12,-33,-5,-2,45,16,-74,-25,4,5,-28,-13,-1,-10,-45,-76,43,59,47,-31,-18,56,30,-23,-25,23,30, -34,-10,54,6,112,44,16,-26,-1,108,13,-84,22,80,20,14,-43,3,-89,-5,-18,60,65,5,-34,-63,101,45,-2,38,-19,33, 
  /* [25][0][][] */ 3,-48,5,-2,-48,3,-9,9,-84,14,48,127,-17,-33,35,68,-2,23,-14,-2,13,-3,-7,16,-8,3,15,2,-51,26,28,-86, 48,-50,-54,0,-13,28,12,9,-63,-35,4,30,-67,-19,32,-12,13,9,67,43,-13,-23,-5,55,30,-7,31,-32,-31,-20,31,-56, 15,-4,-2,21,-29,-7,2,65,-73,42,5,122,-59,-26,60,57,19,22,58,40,7,-55,-6,-26,59,-5,-2,-20,-80,-10,-7,-67, 
  /* [26][0][][] */ 60,-40,-22,53,34,32,35,2,4,-33,94,15,-29,-38,18,45,64,12,-27,-8,-29,15,25,45,-25,-36,82,13,-37,6,-34,48, -12,-9,-9,-23,-24,28,30,65,-7,30,91,-44,-30,-19,59,-43,2,-19,-4,16,29,-23,-7,5,-38,-45,56,15,-46,-10,46,59, 37,19,-30,4,-21,47,35,30,5,8,46,-127,-46,27,15,-30,-34,-4,6,-8,-43,66,35,16,-83,-46,93,20,-59,-4,22,38, 
  /* [27][0][][] */ 56,27,15,25,-51,40,28,-23,73,62,-119,-65,-74,-101,51,-12,-19,-59,-83,-10,59,91,-17,-58,-32,62,-18,63,-53,20,4,127, 44,64,39,6,-93,26,51,24,37,66,-95,-49,3,-68,-45,29,-53,-22,-65,12,27,44,-57,5,38,8,7,49,-65,39,41,5, 75,117,53,-4,-90,-13,8,10,124,25,-92,6,-23,-99,-7,-15,-3,-20,-44,1,111,20,3,13,-16,75,-5,83,-85,-6,20,59, 
  /* [28][0][][] */ 70,30,-126,-21,-10,-48,-29,51,-37,-41,109,-52,-112,-4,-85,55,125,62,-8,48,42,6,57,8,32,-27,26,-52,-92,-76,-27,-96, -12,-11,-63,43,-70,-65,19,37,25,-49,127,-19,-113,10,25,-47,-8,41,-24,81,49,-5,-43,87,23,-35,-6,47,-71,4,-109,-25, 54,28,-109,-23,-9,75,1,35,29,3,120,-51,-57,-33,-27,-47,-8,109,42,52,-17,-53,-2,76,-27,-68,113,-31,-69,-56,-48,-14, 
  /* [29][0][][] */ -49,-43,127,-48,23,31,-6,-27,-7,27,30,27,87,53,-19,55,11,33,31,-17,-40,33,14,29,81,8,32,9,50,-8,-3,18, -17,-48,63,-1,35,40,3,-33,11,58,-10,38,15,37,-14,45,23,2,36,-13,-28,24,27,-33,0,1,5,14,43,9,37,30, -40,-11,108,-21,9,65,-27,-10,-2,39,16,27,99,34,-28,39,30,41,73,-15,-11,18,12,3,58,3,4,11,16,17,1,17, 
  /* [30][0][][] */ -9,-46,-49,-79,-70,12,-48,41,-25,24,103,108,-45,-29,-50,65,77,122,87,18,-1,-6,28,26,59,-51,34,10,-77,64,-25,-40, -4,-2,-127,-59,-47,22,-32,48,-16,-8,-14,22,-102,-49,-13,36,15,85,-1,-37,33,-22,57,58,56,-10,20,36,-46,7,-8,-22, 0,26,-29,-72,-63,-39,-35,87,-20,9,105,91,-24,-23,-75,41,44,115,73,-5,-8,24,63,61,33,15,40,3,-73,-20,-34,-29, 
  /* [31][0][][] */ 50,65,-38,32,61,35,-64,-11,6,-61,32,3,-47,-16,44,17,38,-37,51,35,24,-24,39,-67,-47,14,23,13,37,57,-87,-18, 24,12,-46,0,-40,-20,22,-1,-30,-62,39,-29,6,56,-62,5,2,1,-1,32,-3,-42,2,-28,-35,23,-52,-63,-32,56,10,-56, 48,17,-19,40,20,-28,-8,20,13,14,14,7,-53,-3,-41,6,41,-17,25,127,-58,-8,61,15,-45,4,-38,-73,-2,-23,-82,-11, 
  /* [32][0][][] */ 57,73,-22,-3,58,-64,-6,76,-10,-82,-48,7,23,-48,127,22,6,-45,-3,3,-17,-37,-27,51,-16,89,-61,-43,16,15,9,19, 91,61,2,1,38,-54,-8,-53,48,14,-24,-58,2,-18,20,-25,-84,-36,37,-27,24,19,-8,-29,67,26,-81,-44,25,-17,-64,30, 92,1,-8,-18,-23,-54,-69,46,-15,-49,-28,-12,11,36,-29,-44,-23,-11,23,-29,-37,13,17,-127,20,112,-39,-24,71,-24,-36,17, 
  /* [33][0][][] */ 57,-7,-20,86,21,-33,48,30,109,-10,-43,-53,-38,-64,-47,-31,-40,-1,35,-7,60,28,2,-25,-29,62,42,11,-37,9,-6,-2, 38,44,13,-7,-39,39,63,39,44,29,-26,26,-60,-2,-40,-72,-21,31,-38,36,-37,8,-2,3,-30,16,-41,35,-8,-52,-34,64, 51,-1,-11,46,-11,12,19,68,127,10,-21,25,10,-24,-24,-32,24,0,32,60,9,47,-36,-56,14,73,26,24,-65,5,-15,-2, 
  /* [34][0][][] */ 97,24,20,77,83,-5,34,55,8,5,67,13,-7,15,34,-9,-82,-38,-62,-18,-3,51,30,71,9,-40,117,-26,-22,51,3,0, 117,2,-10,87,56,69,76,13,22,13,61,-4,17,31,127,58,14,-28,-25,33,-38,80,-28,21,-3,-84,77,14,-58,-12,46,31, 17,12,-15,79,14,64,76,-34,-22,46,59,-19,-11,-22,46,17,-36,-62,-70,-24,9,36,42,16,-80,-85,75,12,-70,11,93,21, 
  /* [35][0][][] */ 28,-10,39,12,-27,69,97,8,100,-13,-17,-58,-15,67,-14,-3,-12,-23,-67,56,-34,34,-11,-114,-55,-15,-3,26,-46,-2,19,53, 14,70,21,27,2,-21,18,-18,33,-61,-17,18,-53,-26,0,-54,18,-1,5,24,-37,80,-4,-77,-32,-39,-49,-37,-30,-48,16,82, 39,98,67,6,-3,97,101,72,127,-26,-14,-4,-54,12,-50,-13,7,39,-77,51,15,94,106,-29,67,55,1,38,20,19,-80,17, 
  /* [36][0][][] */ -20,77,0,-73,-120,42,26,-8,126,79,-42,19,62,-41,-110,41,31,58,9,-98,-4,-17,-40,-38,77,27,-19,-14,9,100,29,95, -40,39,34,-76,11,11,67,-33,118,108,-36,-37,-38,-47,-127,-57,-66,60,-38,-71,1,57,-28,73,93,-55,-44,13,-3,-40,-93,122, -61,61,29,-92,-45,-94,34,-8,56,89,-2,0,65,-52,-107,-16,-18,16,-25,-59,83,15,-3,13,108,-92,-37,-36,-39,77,47,1, 
  /* [37][0][][] */ 62,38,-50,56,0,11,-10,22,-29,-15,40,59,-16,-13,52,8,-7,0,44,53,26,-52,-19,-5,11,1,-26,-50,-14,-17,38,-69, 22,-20,-53,70,39,8,-11,6,-44,-38,21,24,-41,-2,40,26,-3,16,-12,44,-14,-30,-21,28,11,20,-8,-46,-40,6,-11,-46, 35,-16,-35,40,67,-68,19,-44,-41,25,-27,117,-55,-31,19,44,3,32,8,127,-1,-58,-25,102,36,7,-30,-59,16,-38,49,-67, 
  /* [38][0][][] */ 0,53,58,31,-28,17,38,9,9,30,15,-87,45,62,82,-22,2,-34,-62,-38,-22,43,63,-14,-49,13,127,38,-3,-19,31,67, 24,16,27,-21,8,57,19,-2,-3,-4,15,-39,44,40,66,2,8,-31,-5,-33,-39,67,49,28,4,-6,0,29,-14,-9,-13,30, -30,20,22,48,81,104,-13,-1,-21,39,15,-53,45,59,80,-5,29,4,-53,6,-26,71,54,-46,-59,28,76,46,-24,7,30,63, 
  /* [39][0][][] */ -35,-17,127,-24,57,48,-4,13,44,104,18,5,86,60,-30,79,44,50,10,-63,-63,71,8,24,32,-1,83,32,33,-41,-17,66, -36,-18,73,-22,65,111,-29,-24,6,-1,40,10,88,49,5,40,56,16,15,-23,-64,55,-12,-74,1,-49,62,38,58,32,-21,72, -78,-38,117,-27,17,25,-8,-68,23,11,23,-12,45,41,-53,27,51,24,68,-74,-79,68,85,-7,108,-37,-6,72,67,43,63,76, 
  /* [40][0][][] */ 44,65,11,-11,-52,7,32,-127,46,6,-89,-22,-42,-4,-34,-49,-7,-76,-77,38,-4,3,11,-65,-5,-21,-14,27,-6,14,1,6, -25,6,3,-30,-22,27,-28,-15,25,-23,-60,-40,2,-5,42,27,-21,-53,-10,7,15,57,-48,-80,33,-7,-40,39,18,-46,1,20, -6,64,28,50,-36,-17,-20,-48,50,-19,-51,87,18,-93,1,-14,33,-19,4,33,98,64,-1,37,95,57,9,12,-21,-53,-63,68, 
  /* [41][0][][] */ 21,86,12,-22,-63,-10,63,16,118,-28,-127,-15,38,-85,-37,-34,-17,-40,-19,39,61,20,-10,-16,33,87,-42,14,-33,0,-67,63, -42,50,78,32,-112,-20,65,-22,47,24,-81,-3,-8,-42,-79,-2,2,-17,-55,6,65,7,3,-11,-20,18,-77,-4,-21,42,15,19, 11,34,18,37,-85,-40,18,24,54,40,-107,-13,-43,-65,-54,-43,-21,-30,-3,37,67,-9,-12,-100,-20,44,-37,15,-38,32,-38,52, 
  /* [42][0][][] */ -25,-54,127,-15,14,8,17,-15,-20,34,16,56,68,63,-5,53,26,0,41,-23,-29,-1,-6,3,25,-8,21,18,12,-9,2,8, -11,-24,95,7,4,53,-8,-16,-5,37,-18,18,57,18,12,25,-4,12,37,31,-3,4,7,-21,29,24,-8,-11,20,28,4,-14, -39,-29,72,-3,36,44,18,-8,-23,33,2,65,51,50,2,19,34,22,52,-3,9,-13,15,3,50,-16,11,-8,9,23,49,-2, 
  /* [43][0][][] */ 26,52,94,-19,-102,-29,48,7,113,52,-108,-29,5,-5,-60,-64,-75,-45,-24,12,65,73,-9,-101,-60,15,-58,59,23,87,-18,57, 7,42,56,35,-38,-1,15,-6,77,38,-46,-4,-16,-18,-76,-66,-27,-6,-84,12,-5,95,-46,-22,41,59,2,-3,-46,28,-38,16, 13,77,51,15,-127,-36,86,33,91,-32,-75,-13,13,-77,-40,-20,-29,-5,-30,11,22,25,-49,-60,46,109,-76,25,-5,14,-9,95, 
  /* [44][0][][] */ -43,-29,127,-54,-27,28,9,-17,14,54,49,2,72,-16,-23,36,33,15,63,-50,-19,38,43,-26,78,-25,29,23,21,4,-46,30, -28,-55,51,-13,-36,-11,2,-40,-5,32,10,21,22,19,-31,26,2,34,41,0,-24,24,14,-16,49,-10,7,-22,20,4,33,35, -70,-50,119,-54,-10,60,16,-12,-6,-23,49,24,79,-9,-52,56,27,42,21,-55,-27,5,30,3,48,-71,2,2,7,5,26,44, 
  /* [45][0][][] */ -52,-69,24,12,-29,108,15,9,-27,10,-5,-45,1,22,-30,-19,-47,-27,-53,-42,-3,-34,127,36,-44,-86,73,42,37,43,84,0, -46,-42,48,-6,9,4,-82,-5,13,-17,-9,24,-16,30,4,-15,-38,-30,9,-29,-37,1,69,-9,-72,-27,-11,-26,7,-45,71,-44, -100,-24,-4,-3,-19,76,-9,-30,-11,30,5,27,-3,57,-22,1,-62,-4,-76,11,-28,23,18,-5,-30,-8,43,48,6,-16,12,-110, 
  /* [46][0][][] */ -5,-49,-11,-8,-36,125,1,-49,-18,3,-32,-49,-7,127,-18,-23,-49,-35,-81,-82,-24,-44,58,-25,-47,-100,75,-1,17,-18,112,9, -107,-41,38,14,-28,66,15,-83,-51,54,-2,1,-56,-20,-21,-1,-45,-14,-26,-4,-38,-31,109,-1,-73,-78,-18,27,-63,-55,-7,-36, -44,8,53,-2,24,95,-71,11,-52,-62,-5,-41,22,109,-15,39,-35,-46,-39,-59,-1,36,44,-39,-41,-19,25,12,9,-72,37,-60, 
  /* [47][0][][] */ 83,3,-34,6,-92,-28,2,-60,12,-22,-89,83,-37,-91,20,-76,24,-39,-56,9,39,20,47,52,-13,-28,-31,19,-109,-15,-25,8, 47,85,-68,21,-84,9,-52,66,-7,-18,-49,46,2,-92,-21,11,-38,-37,12,-36,-36,-1,10,-19,20,57,-4,62,-106,42,-52,8, 127,85,-27,-5,-96,-55,-23,8,-59,-82,-14,35,-55,-107,-12,-8,-2,-46,39,-32,78,63,-8,104,-30,46,-14,-7,-115,-31,-42,-38, 
  /* [48][0][][] */ 8,-6,-74,-9,-121,-19,-5,33,-38,-19,81,93,-29,-88,-9,53,-7,56,47,-7,5,10,22,47,54,-78,52,-14,-108,8,10,-30, 35,-104,-42,-2,-101,-20,30,25,-38,-29,1,26,-81,-59,21,29,-50,54,25,-37,48,43,49,31,38,-52,13,-18,-87,-45,-42,-25, 12,-3,-17,-6,-36,-48,-19,18,-78,27,45,127,-85,-61,-35,10,80,59,69,-22,37,10,-11,10,64,-47,31,6,-105,16,5,-92, 
  /* [49][0][][] */ 51,101,-93,34,27,-51,-35,11,11,-76,23,103,-53,-34,-62,-60,87,80,26,78,-28,-58,-39,0,-8,47,-59,-33,33,-57,-45,-41, -19,92,-57,59,-37,-40,46,16,19,-54,-41,45,-77,-32,-13,-6,9,29,79,22,-25,-57,-6,59,-43,-9,-8,3,41,-31,-74,-33, 37,-3,-38,54,31,-45,-27,69,22,-31,-22,86,-66,-35,-14,30,-11,91,27,127,55,-27,-4,49,-1,77,-36,-42,-13,5,-40,-54, 
  /* [50][0][][] */ 69,-30,-95,80,17,-25,0,51,-7,-79,98,-39,-97,-51,84,29,44,19,-12,107,32,-31,-21,17,17,-78,-7,-93,-86,-25,-57,-54, 17,24,-86,25,-20,20,35,19,-9,-69,69,12,-60,-26,90,36,26,54,1,-2,5,-41,1,43,-4,-80,46,-9,-68,-7,-49,-43, -5,37,-94,61,-35,-37,-13,21,-31,-13,21,4,-127,-19,15,18,54,11,25,74,-1,-1,-6,14,8,-13,-3,-30,-61,11,-28,-88, 
  /* [51][0][][] */ -35,-84,127,-18,2,27,-12,-2,-11,25,31,46,87,29,-1,27,-5,27,75,5,-33,11,-5,5,71,-6,27,8,41,24,69,-12, -8,-34,101,-21,-1,11,-3,10,-10,40,-31,24,9,29,1,23,19,1,23,17,-41,36,29,-33,9,6,9,-17,34,22,-5,28, -32,-26,85,-20,55,59,-2,-37,6,70,38,69,119,45,-17,88,-4,66,18,-21,5,-9,23,29,76,-20,-2,0,20,9,55,22, 
  /* [52][0][][] */ 40,-44,-87,31,-127,24,-6,13,-5,-31,95,-37,-74,-36,82,46,25,43,-46,28,94,61,3,63,-47,-50,72,79,-122,42,-1,25, -11,-49,-80,1,-47,47,-25,5,-52,-36,39,-92,-36,-61,37,44,5,43,-16,-71,-43,44,13,11,7,-59,82,6,-82,55,-48,24, 34,36,-75,7,-91,18,58,10,-65,6,103,-95,-11,-48,41,3,-17,-14,-74,-58,48,52,2,16,-26,-94,117,32,-76,25,71,49, 
  /* [53][0][][] */ -22,-7,84,-43,-68,-71,88,-76,6,-92,-53,39,-5,-39,-91,-21,-91,41,13,54,45,-63,14,-39,65,-53,-39,-92,93,-22,83,-23, -52,50,0,-38,-87,1,117,-47,48,31,-19,-11,14,-33,-67,-101,16,-60,-29,-25,11,20,13,-57,119,-70,22,-11,16,-4,61,37, -59,-38,56,-4,-22,-29,127,-19,49,-77,-60,-32,-70,-38,-114,-73,-50,-38,-109,8,-19,-35,-37,-1,119,8,30,-15,103,-46,56,55, 
  /* [54][0][][] */ 47,-4,-30,81,-16,-52,49,-68,-37,9,-17,63,-9,-12,89,3,45,44,-38,43,-15,-65,34,13,52,-52,-59,-61,-41,-26,-21,-91, 48,-2,-32,78,-13,0,18,-11,-87,-34,60,82,-3,-14,62,-15,-41,-62,-18,59,-32,-40,-25,51,11,-45,-41,-46,-49,42,6,-35, 39,8,1,32,-41,-16,42,-61,-73,50,55,75,-44,-33,68,36,-45,-50,9,127,42,-64,-33,77,16,-75,-72,-51,-25,49,57,-41, 
  /* [55][0][][] */ -40,-57,30,-40,89,34,1,-39,-28,-22,-34,4,-28,98,46,-22,-6,22,-51,6,-44,-40,-38,54,-55,-33,12,-39,108,-24,104,-39, -93,-24,-7,-32,46,14,-20,-79,-44,22,-1,9,-51,38,-7,4,-51,-51,-37,-47,-89,-17,-54,-29,-47,-34,61,-45,100,-43,86,-22, -49,-62,-30,31,100,-11,22,-26,24,-6,10,-75,35,20,-40,-66,-98,7,-58,-25,-78,-17,-19,-33,-47,15,26,-32,66,-127,-3,-43, 
  /* [56][0][][] */ -57,-101,39,-43,-15,-35,31,-3,-28,-68,7,24,1,19,80,41,-97,-94,7,13,-45,-45,15,62,-69,-80,-3,-39,79,6,-26,-57, 2,-32,-15,-105,-7,-27,-75,-112,-52,-22,-27,-82,-11,75,-40,-7,-36,-53,36,13,-48,-37,62,49,-71,5,2,-94,8,46,3,-90, 15,3,25,-66,37,63,-56,-73,-65,-25,17,-46,-97,34,-55,-12,-81,-55,-58,32,-57,-16,85,-33,46,-4,27,-73,127,-72,-67,-12, 
  /* [57][0][][] */ -42,-33,-31,37,-81,-36,100,-50,-12,71,92,-77,-118,-55,31,-25,-49,-72,-47,-42,69,99,-50,-33,24,-23,121,-1,-51,90,-35,68, -43,-36,-2,-13,-113,3,65,-79,-1,96,58,17,-51,-72,7,93,-70,-15,-17,-21,-5,22,-9,-9,42,-98,88,11,-65,36,107,-4, -29,-51,-53,52,-127,22,76,-61,-2,79,70,-42,-22,-88,3,68,-20,52,71,-76,82,68,-83,-1,58,-67,22,-38,-99,99,28,16, 
  /* [58][0][][] */ 13,112,-53,40,5,42,101,88,112,-31,-93,48,-15,-66,-103,-84,41,9,1,87,66,5,-39,-14,-21,10,-99,-46,-17,-80,-92,38, 14,56,-41,91,-4,-16,59,15,56,-11,-74,92,-27,-72,4,-19,9,41,60,87,-30,5,8,-3,-27,107,-62,-10,-23,-1,-87,6, 44,111,-33,98,-75,-25,28,89,127,-65,-101,51,-42,-92,2,-27,-25,0,30,78,33,-73,6,3,-29,46,-115,-23,-59,-26,-50,-24, 
  /* [59][0][][] */ -47,-53,127,-36,8,21,-8,-20,-5,14,21,28,68,21,-15,40,10,-3,57,-7,-14,24,11,17,79,-4,29,8,23,7,-15,13, -32,-41,67,-5,20,62,-10,-34,8,47,-3,29,25,18,-13,45,-5,6,20,2,-32,-6,16,-20,28,-11,17,-1,19,-6,37,16, -45,-55,101,-33,-20,18,16,-28,-12,28,15,61,88,0,-24,68,24,54,48,-15,4,20,3,-29,65,-22,1,15,11,23,35,19, 
  /* [60][0][][] */ 15,25,30,36,-40,45,86,-4,32,46,-90,-18,-1,-45,26,5,-39,-21,16,-36,53,16,-79,-42,9,96,-1,28,-44,34,1,12, 68,23,46,1,3,-22,55,21,29,-15,-92,-3,-9,-8,-14,-8,-48,-5,-16,-32,19,69,-45,40,-10,68,-20,-30,-20,-22,56,-3, 98,56,-11,29,-61,5,11,27,38,29,-66,34,-57,-54,7,-53,-29,-34,-30,19,34,32,-35,1,-3,127,-30,54,-26,37,-28,30, 
  /* [61][0][][] */ 4,-51,87,-46,60,-47,37,-39,26,-50,-65,-8,103,67,55,84,-58,-10,9,30,-99,9,-55,-45,47,44,-70,-56,126,-100,-57,27, -17,48,91,-91,-11,57,-15,4,-21,-9,-26,21,-25,-29,-32,-14,28,46,-1,-63,-33,-45,-39,23,-53,63,-74,-22,4,-72,-77,-2, -10,36,77,-34,127,-18,92,13,-40,95,-63,-54,43,17,48,-23,-65,57,23,-19,-84,4,15,-36,-14,-64,-19,-69,92,51,-52,40, 
  /* [62][0][][] */ 78,13,-127,65,75,-28,29,21,-13,-79,18,22,-49,-9,42,-55,48,24,63,83,30,-50,-61,-12,-32,29,-62,-45,-17,-25,-38,-42, -24,93,-87,55,12,-31,-4,17,-27,-28,8,-11,-7,-23,45,19,48,1,-13,42,-33,-61,-37,101,-5,32,-19,-58,14,-26,11,-68, 52,36,-101,74,33,-49,14,90,-19,-21,29,76,-29,-15,77,36,68,29,53,99,-47,-55,-43,84,-53,10,-10,-30,-33,-23,-64,-93, 
  /* [63][0][][] */ 51,25,-115,3,74,-30,-31,80,-67,-32,28,32,-75,40,87,-58,43,77,58,27,4,-56,-17,87,-53,43,-14,-68,-47,-11,-3,-113, -53,40,-111,32,60,-27,-40,85,-50,20,12,38,-66,-24,6,30,-3,59,85,0,-30,-5,-36,-5,-7,35,23,-34,-49,-32,-51,-44, 91,34,-127,81,-34,-50,19,78,-4,-57,-2,80,-71,-18,89,20,47,10,26,62,17,32,-30,28,-31,-31,18,-61,-72,18,-34,-53, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant10_scale = { 64, { 0.0023967234883457422, 0.0014768935507163405, 0.0027956655248999596, 0.001362586859613657, 0.0017017936334013939, 0.0023914955090731382, 0.0020177094265818596, 0.0026439265348017216, 0.0026248067151755095, 0.0026987404562532902, 0.0024731042794883251, 0.0020116656087338924, 0.0020367170218378305, 0.0029210594948381186, 0.0030492376536130905, 0.0029943608678877354, 0.0023663858883082867, 0.0018581253243610263, 0.0017562768189236522, 0.0033541833981871605, 0.0024426036980003119, 0.0015978463925421238, 0.0023564030416309834, 0.0017654214752838016, 0.0022130324505269527, 0.0026857010088860989, 0.0028300133999437094, 0.0018215191084891558, 0.0024739282671362162, 0.0029691671952605247, 0.0021774314809590578, 0.0037324612494558096, 0.0033900425769388676, 0.0020422437228262424, 0.0018720903899520636, 0.0021757546346634626, 0.0023743000347167253, 0.0034401745069772005, 0.0022946360986679792, 0.0020978394895792007, 0.0027266491670161486, 0.0025598914362490177, 0.0028499118052423, 0.0022734785452485085, 0.0028094563167542219, 0.002797367051243782, 0.0020840978249907494, 0.002431181725114584, 0.0025007079821079969, 0.0027461859863251448, 0.0030159838497638702, 0.0024186957161873579, 0.0027457496616989374, 0.0024934234097599983, 0.0026591869536787271, 0.0016936133615672588, 0.0015857132384553552, 0.0022534278687089682, 0.0020017481874674559, 0.0030749384313821793, 0.0026686075143516064, 0.0022456888109445572, 0.0029021513182669878, 0.0027729643043130636, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[64] = { 4338, -2856, 17488, 14773, -16851, 3779, 19708, -814, -8830, -6468, 5104, -1425, 10123, 738, -4244, -1114, 7622, 30109, -6047, -8640, 15933, 22586, -2239, -14539, -8799, -2531, -12010, -1874, -2089, -14356, -2739, 5400, 12017, -6836, -10839, -5963, -3956, -1981, -15041, -18047, -2930, 1627, -12607, -5578, -7366, 14542, 14371, 3418, 3201, -589, 2343, -12342, -4710, 22035, 6870, 19575, 29813, -2623, -1014, -9995, -5289, 17707, 1779, 9730, };
const TfArray<1, int> tensor_dimension11 = { 1, { 64 } };
const TfArray<64, float> quant11_scale = { 64, { 0.00015935573901515454, 0.00011490901670185849, 9.0197790996171534e-05, 0.00013723636220674962, 9.9756922281812876e-05, 0.00013868331734556705, 0.00010509247658774257, 0.00014631349768023938, 0.00015443617303390056, 9.1085443273186684e-05, 0.00015382334822788835, 0.00010487426334293559, 0.00010781391756609082, 0.00015733788313809782, 0.00014002759417053312, 0.00017801581998355687, 0.00016149172734003514, 9.2522903287317604e-05, 0.0001322231546510011, 0.00014637963613495231, 0.00011102427379228175, 0.00010288791236234829, 0.00013932606088928878, 0.00010017665772465989, 0.00016677804524078965, 0.00012444511230569333, 0.00010299105633748695, 0.00014730908151250333, 0.00014769486733712256, 0.00016524722741451114, 0.00012417585821822286, 0.00016752295778132975, 0.00013679370749741793, 0.00011437960347393528, 0.00012737783254124224, 0.00013158157526049763, 0.00013697032409254462, 0.00020897104695905, 0.00014186649059411138, 0.00014879573427606374, 0.00011303334031254053, 0.00013724093150813133, 0.00016109884018078446, 0.00013212893099989742, 0.00017151673091575503, 0.00011208534851903096, 0.0001413086720276624, 0.00012016521213809028, 0.00014991391799412668, 0.00015633588191121817, 0.00018380502297077328, 0.00017368857515975833, 0.0001201744526042603, 8.2616686995606869e-05, 0.00012565757788252085, 9.4379611255135387e-05, 7.0347341534215957e-05, 0.00011718319001374766, 0.00014662680041510612, 0.00016624345153104514, 0.00011175106192240492, 9.5559931651223451e-05, 0.000180930903297849, 0.00011146487668156624, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[64*1*1*32] = { 
  /* [0][0][][] */ 73,63,-41,43,-93,-72,55,22,-69,18,-90,108,-52,-97,72,65,-56,8,16,5,127,-6,-51,51,-10,-37,-72,-35,-84,107,31,-59, 
  /* [1][0][][] */ 51,84,-28,47,-89,8,-13,19,63,-20,-2,-46,8,-15,35,-46,-31,-18,-70,-5,-6,26,33,50,-59,24,127,27,-63,30,50,91, 
  /* [2][0][][] */ -88,23,-28,-17,35,-20,14,-43,34,43,-127,-37,-60,31,-53,-64,-40,-97,-122,-100,-19,-70,1,-27,-58,92,-11,47,3,17,-46,-1, 
  /* [3][0][][] */ -56,-50,127,-35,33,-27,-7,-46,-13,79,-78,6,-37,21,-46,-79,-63,-42,-48,-40,-75,-31,1,-43,-13,-46,15,-88,-2,11,-4,0, 
  /* [4][0][][] */ 75,49,80,78,36,67,45,32,42,-18,-2,-43,-18,51,71,8,-49,-13,61,-70,-56,123,127,-22,2,48,96,48,-40,14,16,16, 
  /* [5][0][][] */ 59,90,-97,114,-14,-51,32,-85,53,-83,-81,114,-34,-84,-65,-23,35,-2,-6,119,26,4,-52,27,67,91,-76,-38,-22,-127,-32,-28, 
  /* [6][0][][] */ 17,-63,12,-48,96,-56,-72,-75,-21,6,-98,-127,28,-28,-39,29,-32,-32,-88,-69,-92,-26,8,-22,-36,82,38,-43,-22,-74,-70,-35, 
  /* [7][0][][] */ -41,-56,32,-37,-71,40,-36,-47,-28,19,-7,97,-12,-68,43,68,81,-6,32,-23,15,-32,-70,71,65,13,-1,-12,-44,127,21,43, 
  /* [8][0][][] */ -22,-102,66,-36,-20,9,2,-20,-14,37,95,14,82,3,-54,58,56,60,74,-37,-6,36,23,-14,127,-37,31,9,23,2,42,31, 
  /* [9][0][][] */ -66,6,87,47,-23,-50,45,-32,-119,109,-37,89,99,-31,75,127,-9,87,97,43,-23,16,-5,67,77,-67,-92,-3,-33,63,54,-83, 
  /* [10][0][][] */ 16,19,-45,68,-69,-17,36,48,55,-68,-30,-28,-51,-115,56,36,-5,-19,8,125,127,34,-75,-25,-16,25,-85,-19,-32,-37,-105,-17, 
  /* [11][0][][] */ 105,-127,-98,86,25,13,-26,-38,40,41,35,-2,4,-57,17,-56,-19,35,-21,-9,-14,108,81,74,-121,-84,113,49,-50,-66,43,30, 
  /* [12][0][][] */ -98,-72,17,-60,14,83,45,-89,-50,18,12,-61,-42,127,-68,-17,-111,-44,-107,-27,-52,19,124,23,-79,-82,10,23,44,-71,117,16, 
  /* [13][0][][] */ -71,64,-96,48,46,0,-60,112,-33,21,41,52,-106,-52,8,27,28,72,-26,127,73,-94,31,-2,-11,-76,-40,-18,-16,4,-71,-6, 
  /* [14][0][][] */ -34,40,26,-15,-64,103,33,-47,19,114,24,-127,30,-59,45,2,-13,11,-83,-51,-9,79,39,-2,-13,-63,126,68,-30,56,-10,92, 
  /* [15][0][][] */ 43,59,-45,46,51,-8,-64,-37,-17,-22,-22,67,-22,-9,91,93,-10,-16,-11,35,-72,-92,-127,51,47,89,-43,-42,71,34,53,-88, 
  /* [16][0][][] */ -68,-15,124,-38,-76,61,71,-34,1,-69,-1,-38,-70,58,-118,-33,-16,-17,-27,-56,-2,12,122,-28,44,-127,-16,-47,27,13,13,24, 
  /* [17][0][][] */ -112,-127,46,-93,32,-49,-29,-107,-19,38,-50,-58,20,4,-36,-78,-82,-72,-117,-63,-93,-31,-41,-55,-34,-95,32,-59,65,-120,69,-44, 
  /* [18][0][][] */ -41,-18,40,-51,-43,-1,-43,47,-15,15,66,65,46,9,-30,62,79,127,90,5,33,8,22,25,61,-47,-12,4,-18,13,-74,-6, 
  /* [19][0][][] */ 89,96,1,104,7,56,29,30,-34,17,-57,13,2,8,127,30,-66,-45,9,-36,-7,-9,-26,42,-7,122,58,-27,-76,49,107,-40, 
  /* [20][0][][] */ -119,-87,-34,-34,41,9,-34,97,-69,50,-5,-13,-62,69,32,-42,49,-7,-61,11,-10,-60,26,-23,-121,-55,28,-48,-77,2,-52,-127, 
  /* [21][0][][] */ -126,-61,-63,-73,-17,-92,20,-127,-66,82,-92,-27,-26,-6,-45,-9,-118,-39,-100,-55,31,-40,-8,-28,-25,14,21,43,-14,-83,58,28, 
  /* [22][0][][] */ -37,14,-44,-28,-50,9,-42,28,11,27,100,18,49,-24,-14,56,73,127,49,-20,-25,14,-24,-5,74,-3,-15,-26,-54,7,-54,-8, 
  /* [23][0][][] */ -48,-105,98,34,43,87,-4,-55,-4,120,48,108,127,43,-113,127,26,95,51,12,26,-19,15,15,65,-4,45,-20,-3,-40,88,-26, 
  /* [24][0][][] */ -14,-24,40,5,63,106,31,-9,13,73,7,-93,-21,40,12,18,-40,-8,-57,-8,-3,27,87,6,-46,-28,127,59,29,-6,74,24, 
  /* [25][0][][] */ 27,-20,-52,-1,-46,-55,-52,33,-49,-27,87,127,29,-27,40,100,63,66,52,71,-22,-56,9,35,33,-57,-5,-7,-30,22,43,-91, 
  /* [26][0][][] */ 119,26,-74,-5,44,87,34,91,50,46,68,15,-70,-46,-4,1,58,55,-36,58,-12,95,127,12,-103,-9,102,18,-94,8,-77,83, 
  /* [27][0][][] */ 63,95,10,27,-72,-43,22,-17,71,54,-75,-23,0,-56,30,-22,-21,-40,-45,11,41,127,-11,-25,-34,57,-10,66,-51,44,-40,85, 
  /* [28][0][][] */ 43,-22,-93,47,-37,13,-12,16,57,-113,79,40,-56,-23,-102,47,51,75,-59,127,61,-22,55,59,23,-11,55,-25,-50,-10,-12,-66, 
  /* [29][0][][] */ -47,-60,127,-33,25,63,-14,-23,-7,65,29,55,127,49,-22,88,22,39,69,-18,-25,16,30,15,87,0,16,-2,39,21,40,22, 
  /* [30][0][][] */ -7,-25,-11,-49,-86,-12,-18,105,-40,7,127,108,10,-48,-96,50,73,105,58,-6,52,14,26,-4,76,-9,-17,8,-51,31,-54,-6, 
  /* [31][0][][] */ -18,47,-61,18,33,8,-64,-32,-46,-35,-14,-37,-61,39,38,-47,81,31,-17,127,-35,20,77,-60,-21,-54,-51,-75,21,-13,-91,-19, 
  /* [32][0][][] */ 67,15,-16,-83,27,-29,-92,39,69,-47,-67,-41,-50,-80,-7,-65,-80,-63,-32,12,-36,-127,41,-48,32,40,-2,-84,84,-17,34,21, 
  /* [33][0][][] */ 43,127,-63,83,-56,71,113,75,106,-36,-36,17,-11,6,28,-84,-19,15,-39,-10,20,68,1,-17,-36,18,13,22,-23,-14,-22,11, 
  /* [34][0][][] */ 127,-17,2,126,8,33,62,20,-3,21,12,-51,12,8,88,-17,-30,-19,-51,53,-4,25,53,104,-40,-33,116,6,-64,37,18,3, 
  /* [35][0][][] */ -9,107,4,29,-57,80,91,17,127,-5,-10,13,-5,16,-42,-52,-36,-45,-34,48,-20,41,114,-26,-35,0,-1,23,-18,-20,-48,105, 
  /* [36][0][][] */ -53,60,-18,-114,-41,42,33,22,111,125,35,10,69,-75,-40,39,14,47,11,-127,-11,25,-82,-4,61,6,-50,29,-16,67,-1,122, 
  /* [37][0][][] */ 34,-32,-15,46,3,-26,14,8,-35,-18,-12,127,-51,0,23,-20,37,37,41,108,39,-63,-7,55,25,-20,-26,-39,-21,-7,24,-72, 
  /* [38][0][][] */ 10,5,34,55,45,62,48,-1,9,38,8,-29,7,70,28,15,-23,-34,-21,-23,13,77,57,-14,-40,38,127,94,0,15,84,48, 
  /* [39][0][][] */ -47,-13,127,-10,60,88,-1,-22,27,13,40,-16,86,109,-2,60,65,61,48,-45,-33,69,47,21,62,-30,37,28,64,17,-38,66, 
  /* [40][0][][] */ 84,127,32,31,-47,127,-35,-28,45,-39,-31,-27,-53,-94,-32,-91,45,-61,-66,20,78,7,65,-58,28,-78,9,117,76,-67,-20,75, 
  /* [41][0][][] */ 35,48,-7,31,-71,-20,28,42,90,5,-77,-34,-61,-97,-20,-41,-56,-17,-40,25,75,104,-57,-35,4,127,-65,54,-38,8,-58,112, 
  /* [42][0][][] */ -27,-61,127,-3,86,55,-10,-10,-16,73,28,83,77,33,22,73,27,21,65,-13,-20,-5,-8,-11,81,-11,12,-6,29,13,11,-2, 
  /* [43][0][][] */ 45,109,-15,-7,-39,-31,62,12,127,31,-76,-13,4,-48,17,-25,-36,-22,-4,29,28,59,25,-95,-44,55,-38,84,-10,21,12,75, 
  /* [44][0][][] */ -51,-56,127,-38,-12,69,-9,-33,-12,28,64,9,71,-4,-25,57,46,40,68,-56,-29,25,3,-15,110,-40,55,-19,28,-3,-8,44, 
  /* [45][0][][] */ -51,0,8,45,-37,-2,-94,-51,-88,-2,-47,3,10,25,-64,-108,-42,-44,-47,-92,-55,36,32,28,-75,-61,127,5,43,-33,48,-29, 
  /* [46][0][][] */ -35,-28,42,-40,-3,55,-31,-81,-44,-13,-50,-51,-10,55,-49,-5,-54,-45,-86,-41,-46,-47,127,43,-72,-69,19,11,-27,-43,9,-27, 
  /* [47][0][][] */ 105,-2,-83,-32,-21,-62,-41,30,31,-69,-51,76,-90,-127,3,1,5,-62,0,64,-20,110,-57,61,-9,111,-55,119,-57,-22,54,6, 
  /* [48][0][][] */ 13,-66,4,-6,-103,-19,-9,40,-32,-46,62,127,-65,-51,-36,-5,85,88,62,-35,21,32,-10,21,91,-51,1,-8,-84,31,-26,-32, 
  /* [49][0][][] */ 58,88,-118,53,29,-78,-35,80,14,5,17,127,-64,-88,-45,-18,61,102,22,127,-13,-16,-41,2,-18,51,-55,-46,10,-44,-42,-54, 
  /* [50][0][][] */ 56,-45,-87,33,-47,-67,15,59,-39,-97,52,49,-74,-45,76,40,12,33,-29,127,32,20,-20,53,-3,-54,31,-40,-54,-2,9,-68, 
  /* [51][0][][] */ -33,-66,127,-15,12,40,12,-11,-12,29,24,49,73,26,-20,90,7,57,54,-2,-22,5,15,33,76,-3,17,9,41,29,50,13, 
  /* [52][0][][] */ 104,44,-30,37,-58,1,49,-4,-19,-33,4,-21,2,-55,91,0,22,-27,-42,-31,60,102,53,52,-78,-92,127,57,-92,68,-6,95, 
  /* [53][0][][] */ -101,36,60,-31,86,11,-7,-99,-36,-25,-83,18,-24,71,-127,-101,-33,-119,-44,12,-1,-114,-24,-21,-55,-46,27,-107,-26,-126,92,-57, 
  /* [54][0][][] */ 12,-2,33,71,-49,-69,-59,-72,-56,-55,6,84,28,-63,-38,-10,45,3,-46,127,58,-41,-37,28,52,20,-66,-8,-66,-69,-25,-44, 
  /* [55][0][][] */ -80,-38,-18,-49,66,-20,30,-105,-38,-83,-69,-2,-39,84,-4,-7,-79,-33,-46,-61,-82,-39,-3,15,-74,-84,29,-58,127,-99,95,-91, 
  /* [56][0][][] */ -95,-127,31,-27,71,-8,21,-72,-67,15,7,-72,-34,110,-107,-30,-101,-82,-105,-104,-100,-18,-44,-120,-111,-67,-12,-77,101,-40,33,-119, 
  /* [57][0][][] */ 38,33,-69,24,-97,1,67,-110,47,127,105,-109,-27,-45,62,121,-99,53,-41,-18,31,80,-56,11,-5,-80,97,-42,-76,92,4,53, 
  /* [58][0][][] */ 75,85,-72,52,-11,32,63,127,105,-37,-24,47,-63,-71,-19,-43,5,-7,-41,52,12,57,-48,8,-6,69,-85,-32,-67,-7,-22,-18, 
  /* [59][0][][] */ -38,-79,127,-31,6,30,1,-36,-23,39,44,36,75,19,-36,82,11,47,71,-3,-34,-5,21,42,109,-3,15,2,20,16,43,29, 
  /* [60][0][][] */ 53,77,-24,92,-65,-19,119,8,103,65,-87,-32,-16,-70,62,-58,-58,-50,-32,38,18,85,-52,-1,6,127,-24,11,-43,45,48,48, 
  /* [61][0][][] */ 4,-86,-18,-46,31,-88,-33,-50,-51,-9,-88,-24,76,-39,-24,-63,-63,-31,56,-82,-115,8,-66,-69,25,73,4,-127,78,-43,33,-24, 
  /* [62][0][][] */ 66,59,-79,7,25,-105,-6,50,2,-71,3,-12,-61,-40,71,32,59,37,31,127,-9,-17,-22,42,-49,-35,-71,-52,-10,2,-32,-45, 
  /* [63][0][][] */ 104,-44,-91,10,-107,-110,-42,38,-14,-70,38,73,-127,-16,90,28,-3,109,20,84,-9,13,-83,89,-81,27,20,-66,-112,-26,-82,-123, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 64,1,1,32 } };
const TfArray<64, float> quant12_scale = { 64, { 0.004766897764056921, 0.0034373381640762091, 0.002698137192055583, 0.0041052284650504589, 0.0029840848874300718, 0.0041485121473670006, 0.0031436902936547995, 0.0043767578899860382, 0.0046197362244129181, 0.0027246901299804449, 0.0046014045365154743, 0.0031371628865599632, 0.0032250983640551567, 0.0047065364196896553, 0.0041887243278324604, 0.00532508734613657, 0.0048307930119335651, 0.0027676897589117289, 0.0039552655071020126, 0.0043787364847958088, 0.0033211314585059881, 0.0030777440406382084, 0.0041677388362586498, 0.0029966407455503941, 0.0049889255315065384, 0.0037225966807454824, 0.0030808295123279095, 0.0044065392576158047, 0.0044180797412991524, 0.0049431333318352699, 0.0037145421374589205, 0.0050112083554267883, 0.004091986920684576, 0.0034215014893561602, 0.0038103247061371803, 0.0039360737428069115, 0.0040972703136503696, 0.0062510683201253414, 0.004243731964379549, 0.0044510103762149811, 0.0033812299370765686, 0.0041053653694689274, 0.0048190401867032051, 0.0039524468593299389, 0.0051306765526533127, 0.0033528720960021019, 0.0042270459234714508, 0.0035945696290582418, 0.0044844592921435833, 0.0046765631996095181, 0.0054982630535960197, 0.0051956442184746265, 0.003594845999032259, 0.002471359446644783, 0.003758865874260664, 0.0028232303448021412, 0.0021043396554887295, 0.0035053666215389967, 0.0043861297890543938, 0.004972933791577816, 0.0033428724855184555, 0.0028585379477590322, 0.0054122880101203918, 0.0033343115355819464, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[32] = { -9098, 4107, 1177, -17389, 23898, 6262, 2758, -570, -4929, 2285, 2833, -9844, -1040, 7490, -15039, 2245, 8503, -2125, -8637, -1744, -946, 481, 4691, -7452, 1747, 7224, 1249, 3635, 35227, -543, 3003, 6010, };
const TfArray<1, int> tensor_dimension13 = { 1, { 32 } };
const TfArray<32, float> quant13_scale = { 32, { 8.8445325673092157e-05, 0.00013376558490563184, 0.00013566530833486468, 8.0444435297977179e-05, 8.9014763943850994e-05, 9.2268404841888696e-05, 0.00010566677519818768, 0.00012768649321515113, 0.00016334817337337881, 0.00011754404113162309, 0.00014081085100769997, 9.3521768576465547e-05, 0.00014862562238704413, 0.00016701349522918463, 9.2864407633896917e-05, 0.000111482608190272, 0.00011593930685194209, 0.00012800563126802444, 7.2138020186685026e-05, 0.00012877868721261621, 0.00016479073383379728, 0.00011018529039574787, 0.00014443887630477548, 7.1440452302340418e-05, 0.00011884234845638275, 0.00015034829266369343, 0.00016840867465361953, 0.00011067347077187151, 7.3961891757789999e-05, 0.00012749100278597325, 9.5807059551589191e-05, 0.00011598526180023327, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[32*1*3*32] = { 
  /* [0][0][][] */ 28,94,9,52,20,7,-11,79,33,42,-59,58,23,107,96,-11,-6,45,-44,72,-12,92,109,98,-74,-86,5,67,103,-1,-64,-11, 69,33,11,116,51,-99,7,42,38,-69,43,17,64,-70,70,-22,-60,-83,54,47,70,-57,-74,84,88,36,20,-43,30,52,73,-76, -102,-68,-6,-65,-14,43,127,-53,-63,-88,-15,-21,18,-107,-53,-91,3,-14,-43,-9,-81,58,17,14,68,-65,-5,-95,-86,-27,-66,87, 
  /* [1][0][][] */ -33,-14,-3,23,-108,-82,79,-16,111,0,-60,-26,-33,-7,-45,32,-12,46,-44,5,36,-55,34,-126,-127,48,76,-20,-32,8,18,36, -66,52,7,-46,-57,-3,-48,-63,-7,-41,-59,33,13,50,44,-83,69,57,60,68,-82,-16,-18,-35,-2,-97,-3,79,20,-36,47,40, 70,-18,27,55,44,-68,16,64,-30,-18,-49,78,-89,-91,-31,-66,0,-13,-13,40,-62,18,37,-34,-7,-46,-3,87,64,16,33,70, 
  /* [2][0][][] */ -92,-121,31,-58,38,22,-19,20,-40,71,-9,74,68,-2,-51,72,24,1,38,-127,-6,30,63,5,79,-9,-120,-31,-28,63,64,-6, -23,-101,-26,-106,29,-24,-106,24,-62,-36,13,7,-15,82,64,63,-39,-42,11,-8,24,20,-11,-50,-39,20,-95,-37,-17,32,-53,13, -76,-47,6,-37,-39,-15,-67,-4,-82,36,93,5,95,56,-42,-24,37,-5,69,-67,-61,12,48,27,18,36,-83,44,26,-14,78,-19, 
  /* [3][0][][] */ 89,22,88,-81,-15,-11,4,-104,-38,0,53,38,31,45,50,-70,-39,-126,-44,32,-62,46,-5,67,33,90,50,10,-76,-89,-82,0, -25,83,73,20,-26,82,91,-102,113,103,-61,-31,-67,58,-42,66,-10,51,39,45,78,-30,71,-43,76,32,-32,-55,-70,51,-16,-15, 107,-29,50,18,71,52,-1,-76,68,103,57,12,41,-37,28,87,-52,-126,64,127,32,42,-82,-67,38,-33,94,-15,8,-1,47,6, 
  /* [4][0][][] */ -18,-23,-53,-29,-16,-9,-43,-25,42,33,-64,-40,-63,-38,42,46,-64,-19,-127,-42,-12,-21,39,20,-67,-21,-28,24,-72,-97,4,-35, -7,-57,64,-98,-44,67,18,-7,-73,46,50,6,49,46,-41,-63,-83,-56,-91,-46,-14,19,-22,42,-61,-9,-23,-72,31,-8,-43,-45, -65,5,-74,-94,49,-12,-56,43,12,74,-65,-21,10,45,-4,-4,11,47,41,-72,47,-81,-17,-22,-55,-62,-86,6,-30,-4,15,-43, 
  /* [5][0][][] */ -30,32,-18,3,-100,-4,46,-86,-62,32,-34,-98,-28,46,16,-23,-72,-44,-9,56,47,4,-60,-11,-74,-36,-47,-25,6,-20,20,36, 35,-22,-2,5,10,-14,79,-31,-60,-32,-65,24,1,-24,-62,-43,-8,7,-79,18,-49,2,103,-2,-72,-29,39,32,78,-40,59,4, 42,107,104,-13,-42,47,-38,-43,10,68,-70,-8,-33,-18,-5,47,-1,11,-127,64,-50,-7,7,-52,-94,-9,50,49,-47,12,-5,35, 
  /* [6][0][][] */ 127,24,-82,43,2,36,-5,1,-4,-69,-36,-97,-60,43,-74,-71,59,-60,-23,68,17,26,-22,2,11,20,-82,-38,84,-53,2,-14, -11,75,-46,20,4,-81,24,-77,-2,-91,-103,-85,-102,46,48,-26,-64,81,25,30,54,41,26,-127,-69,48,34,67,61,-35,7,-54, -7,-50,48,-45,-25,13,93,-5,70,73,-79,-5,-44,-30,-5,-45,-44,31,53,70,58,-96,48,-36,0,-45,-10,-82,79,-32,26,85, 
  /* [7][0][][] */ -17,24,-80,108,40,44,78,80,-13,-89,83,50,-6,7,105,66,-7,17,17,37,-98,-69,-48,-31,-5,2,10,-24,-84,30,103,-29, -41,45,-64,96,60,-83,49,-104,-11,-68,-108,45,26,72,-33,-11,98,-68,-25,-25,-91,-59,-14,25,61,53,-88,-78,31,0,-29,-30, -51,88,-85,46,-41,-98,-11,-13,-35,-97,11,-41,52,-116,-34,0,80,46,87,70,-127,-87,50,42,123,3,8,-72,19,-42,8,-20, 
  /* [8][0][][] */ 41,127,37,87,-35,-98,97,-88,27,-7,-16,-47,-38,20,6,30,-38,-5,13,12,-67,-40,-26,16,-22,44,35,24,45,60,30,-28, 36,-3,30,97,-27,-47,15,20,-28,-90,-77,81,-24,-47,29,-34,29,-13,-30,60,-47,36,-47,-76,-14,-29,-82,-8,-75,-83,-93,24, 46,41,-2,61,-6,-28,124,30,40,-51,-66,13,-68,-56,15,4,20,46,54,109,6,39,43,-94,3,49,5,-7,-8,-27,32,26, 
  /* [9][0][][] */ 93,87,-55,39,5,-19,46,-33,29,-37,-52,-79,-34,-47,-21,6,-74,26,-127,23,-34,36,-11,31,-122,-3,22,8,19,-15,-57,-89, 13,-25,38,-46,9,85,-43,-65,-27,-50,-20,-90,-68,-57,56,96,-15,3,-82,60,3,-31,48,64,33,-18,-35,102,61,15,34,67, 60,-13,3,-33,12,-69,57,-25,123,-52,-15,-86,-102,-63,1,85,-55,-22,-50,-21,64,14,84,-41,-39,-51,50,48,67,5,92,-16, 
  /* [10][0][][] */ -71,-35,3,25,-67,-6,-36,-9,-44,-49,-20,19,-16,-34,9,62,78,47,44,-5,13,-67,12,-23,55,-29,13,49,-102,127,38,-42, -55,-34,-33,26,-18,-21,26,62,14,-89,-5,46,-78,39,-78,49,38,60,104,-14,40,-61,18,7,48,59,-67,-65,17,-19,64,-12, -3,-36,-49,30,-8,-30,-60,23,-38,-54,-32,89,-86,-40,-24,-59,35,-21,21,-66,47,-38,-50,29,12,-58,59,69,-84,96,-7,15, 
  /* [11][0][][] */ 7,-25,-12,-39,-39,18,47,-64,-59,-78,-55,-36,-15,45,61,14,23,-127,-7,25,0,17,-79,62,2,64,71,-72,-15,7,-20,-64, 40,-23,-87,50,61,30,72,-42,-56,-73,-3,-40,-97,16,56,34,-33,-33,-34,-15,21,89,-9,18,98,75,-56,34,-9,-29,83,51, -1,50,-69,2,18,3,-40,-22,-82,-41,38,-4,-8,85,4,31,45,-43,83,-13,-26,-3,72,50,65,80,86,39,42,60,1,63, 
  /* [12][0][][] */ -81,-91,-31,-21,19,-12,-58,-25,1,50,26,-20,-7,19,7,48,67,-27,44,-34,-7,38,25,13,12,-12,-25,1,-35,60,5,-19, 30,-4,43,-69,2,15,-60,55,-81,-4,7,60,40,21,-67,34,-53,24,7,-53,-56,-61,47,-22,-12,29,-105,19,-56,31,77,36, -38,-127,-54,-113,2,-5,-24,33,-58,64,50,20,33,37,30,-19,-13,17,21,-88,22,77,-19,69,68,45,-108,24,-12,-7,57,-1, 
  /* [13][0][][] */ 10,-25,-65,-42,47,-16,-50,-52,-26,59,62,-64,-10,34,33,16,-66,-76,-90,-10,-22,55,59,21,-54,-40,-14,-62,4,4,62,-20, -37,-15,10,-20,57,-17,-1,-47,-40,32,-20,9,-34,13,-7,70,-70,-19,-18,13,57,-28,98,-32,0,-38,-29,12,-16,25,-20,-22, 42,-28,6,-10,-13,-14,-16,24,-6,9,21,-98,55,13,29,-5,-90,-114,-108,31,47,94,-40,22,-127,65,95,-17,42,17,-20,-6, 
  /* [14][0][][] */ 74,79,61,55,-14,112,-3,34,37,61,44,-35,98,27,-60,33,31,6,74,65,-9,9,-38,-26,44,2,-2,-5,-12,27,95,11, 40,-1,45,8,-36,-23,58,-51,2,-18,7,-90,7,80,43,48,10,19,-82,36,67,-40,21,-21,52,-68,-54,-37,-1,0,16,-39, 36,48,-3,10,53,-31,51,-28,11,-42,-52,-127,10,-62,73,-22,-30,-13,-60,24,7,48,22,79,-45,-15,46,-6,79,-14,-19,48, 
  /* [15][0][][] */ 6,-55,-25,-91,-27,40,-42,33,-62,52,-75,24,0,44,19,5,-14,31,-12,-35,46,75,49,-38,-25,-38,-91,37,-24,104,30,-25, 24,52,-100,-93,-51,-17,-23,76,62,-18,63,78,-127,85,-1,43,-83,14,28,-99,-2,-33,-37,47,3,13,-51,17,-31,21,88,-25, -1,-62,-7,4,10,47,-80,34,61,101,-16,32,37,65,25,-106,25,-39,-68,-43,57,-30,-57,-16,7,58,-57,-19,-34,81,-93,-91, 
  /* [16][0][][] */ 6,53,-72,38,16,-23,-22,-44,34,4,-46,-16,51,32,-63,-75,-34,3,65,-121,19,-12,29,-80,10,-50,17,-4,-11,-4,-13,-19, -17,7,-64,22,-33,-59,-81,77,-68,-21,37,52,-17,-75,-63,-75,-33,-33,95,8,37,-114,-103,69,34,38,-105,4,-59,35,-4,-28, 4,20,-86,-49,-18,8,-55,-70,-43,8,127,91,-22,-88,66,3,65,-29,33,-22,-58,-82,60,66,58,-76,35,72,32,4,-45,31, 
  /* [17][0][][] */ 16,16,-65,26,-18,-5,27,92,20,-91,-29,13,-16,-27,-63,-31,91,55,67,-83,7,-69,29,28,3,-77,27,-22,-62,42,46,-20, -70,-7,-58,-82,38,-28,-87,60,1,-40,80,-25,-62,-22,-14,2,-59,-37,-3,33,52,25,-5,71,17,30,-3,5,24,39,6,54, 7,-36,-32,25,37,22,-74,7,28,12,-23,99,-81,86,14,19,22,79,51,-4,-27,27,24,43,105,58,-68,-36,-127,32,-92,-37, 
  /* [18][0][][] */ -7,-53,-40,-29,-20,80,-108,27,-4,-28,39,-8,68,33,46,44,87,-77,14,-115,-71,25,43,-10,63,40,54,-27,82,119,27,-5, -67,-29,-75,-127,-81,-20,13,-5,20,15,-43,3,-12,68,-69,-77,90,-26,14,24,-70,73,47,46,40,9,53,-31,8,66,20,5, -18,65,-63,-33,25,25,-31,-9,-74,29,52,-49,-14,76,74,-46,2,3,63,-58,56,68,-36,-35,47,-34,-105,64,55,63,91,13, 
  /* [19][0][][] */ -57,18,-44,26,-40,41,23,13,50,-24,-23,32,-85,-53,-73,-26,-21,-36,52,46,23,-54,-50,28,32,-53,-15,-39,-78,-41,-121,66, -9,-19,-50,13,73,-67,-22,3,-37,-28,62,79,-70,28,71,-21,4,-37,65,33,-32,-77,50,-88,90,-58,-50,44,-56,-17,-24,59, 89,1,-4,36,13,-27,127,-82,14,33,85,-40,-86,-67,39,25,-13,38,1,-73,58,-15,-2,19,47,-53,25,20,71,40,23,-1, 
  /* [20][0][][] */ -34,-44,-27,-5,-86,-87,23,-46,27,-40,76,18,-49,59,59,-58,55,-23,34,10,-15,12,-9,13,-45,-14,-23,-67,0,23,-6,77, 61,-31,-4,51,-77,-95,45,3,45,-51,-54,37,-38,32,-11,-3,-75,-51,26,11,46,46,-23,-75,-87,-13,8,88,16,97,73,20, 5,41,17,-32,-37,-52,59,61,-92,-13,19,67,-44,14,46,-11,-19,52,-25,13,-49,40,-21,29,-11,-91,20,24,69,127,-55,56, 
  /* [21][0][][] */ 64,65,-64,88,7,-55,77,14,65,4,-14,-9,8,-13,4,-47,15,-68,4,56,53,17,19,-3,14,50,11,-29,3,-28,-55,-26, 45,48,39,-15,9,-89,65,23,-44,32,-11,8,14,-29,-60,-45,-24,-19,-27,27,17,-61,-12,-10,-3,-15,-109,-28,-15,-21,37,-46, 84,17,-28,-1,-5,-43,42,-15,38,-57,-61,-11,29,-15,52,-37,-17,-112,-2,70,14,29,-13,-20,-127,52,6,-25,9,-90,-35,19, 
  /* [22][0][][] */ 33,15,-5,32,-29,2,-5,-20,-73,24,15,-78,3,5,25,-43,-41,-106,-20,44,75,-47,47,17,-126,-35,45,-10,-23,-6,12,74, 4,50,-23,-25,-21,3,-8,-18,-27,34,-6,-85,-26,29,53,-18,-76,-13,-31,37,13,45,20,-6,-44,-45,-15,8,29,3,-42,-38, 32,-20,72,30,32,34,32,-11,-24,54,45,-30,-12,-13,16,-3,31,-61,-127,5,-17,33,101,-68,-64,-11,13,4,-38,-21,-4,-33, 
  /* [23][0][][] */ 65,-49,105,51,37,66,57,-48,11,11,44,5,75,-99,12,-14,23,8,20,16,-22,-2,-3,88,-54,2,25,96,-37,73,13,70, 10,10,29,39,-34,-58,20,-30,-23,-29,67,-89,79,-114,26,-102,-19,-52,-5,33,-87,69,4,-59,25,-13,22,46,81,-53,59,-30, 63,50,-78,-57,-35,-62,10,-28,19,-4,80,46,31,-127,46,3,-21,-67,42,-7,-47,-27,69,46,-88,-20,-14,43,1,17,-73,1, 
  /* [24][0][][] */ -124,-44,9,-14,-31,67,-48,51,-30,38,77,-7,-60,42,-57,-31,31,22,81,-84,1,-21,83,50,-30,-41,42,-9,-57,18,-49,82, -8,-43,-19,-115,-44,-22,-14,-82,-29,68,93,-9,44,92,-59,36,-21,-33,-16,-19,0,-50,52,93,-49,-7,29,27,6,78,83,-71, -97,-127,29,-37,-4,13,-20,63,-78,-21,3,71,25,0,-56,-16,-53,10,31,-111,72,74,5,74,68,2,-87,68,-40,53,-13,20, 
  /* [25][0][][] */ -7,69,5,74,-22,-82,62,-15,7,47,-41,19,90,-91,72,35,-32,-28,18,7,-37,23,15,-86,32,-31,5,-50,-14,-25,15,23, 45,13,37,-26,19,-116,12,-32,-16,-39,-103,55,-53,-71,-7,-92,14,5,48,72,-127,-58,-9,-112,-23,56,14,-37,-32,12,55,57, -19,88,36,15,-51,-101,-45,64,-55,-9,-54,44,-55,-74,26,-44,-10,80,-17,24,-92,9,-55,-80,7,-11,67,-43,-31,5,-65,0, 
  /* [26][0][][] */ -2,49,-36,38,-22,4,-31,-38,9,41,8,17,31,84,39,37,-110,-84,-103,47,63,21,23,-46,-62,42,-39,1,35,-40,57,3, 12,-8,-31,-31,44,4,79,-66,50,-8,6,-94,3,10,8,32,-35,-77,-29,48,4,-25,61,62,-97,29,26,-40,-32,17,-28,-49, 64,64,-42,81,20,24,47,-10,-33,48,-51,-99,47,-44,-48,-70,21,-87,-127,-7,68,51,31,2,-29,6,-25,-42,-18,-34,-22,43, 
  /* [27][0][][] */ 102,94,26,-5,-52,-4,-60,16,34,40,-96,-9,39,-62,-47,-41,60,-27,-78,-3,-46,35,-39,-96,-92,80,-14,-56,-2,-39,14,0, -46,99,5,75,-59,-18,85,-87,-6,-2,-64,-72,36,25,53,25,-40,48,-106,108,5,-5,49,43,-45,-68,21,5,-11,-127,-55,10, 85,74,-28,-6,-57,17,6,-45,71,-84,-81,20,58,7,67,-32,36,-45,-90,51,58,-10,-47,-62,-4,7,-47,-16,32,5,25,68, 
  /* [28][0][][] */ 12,29,-22,-27,-29,-47,15,-61,61,-8,-94,31,-106,-10,57,49,-37,-37,2,-55,52,-33,-14,37,-96,-57,-8,-22,-65,14,-32,-45, -58,-30,-73,-47,-9,-37,-11,-33,-51,32,-20,-127,-28,-14,-77,65,-126,-48,-53,-25,-12,6,9,-59,-71,28,32,-56,2,-33,-19,-64, -67,-46,-41,-27,-44,-100,-37,-80,-50,6,40,27,-13,-56,-52,-82,13,-50,-14,-51,90,39,-59,-66,12,-41,-29,-72,-40,-86,-83,-66, 
  /* [29][0][][] */ 6,28,39,-53,77,-3,-84,-54,17,6,-79,43,5,-36,-28,-1,-4,-73,44,63,-73,-35,8,46,16,76,-17,-1,56,-2,-13,23, 76,19,-12,4,47,38,6,-12,71,-35,16,-41,-65,-11,38,50,-13,-23,-90,48,55,12,45,60,-23,-27,24,90,-33,47,-73,12, 29,127,-79,-111,-106,-63,-31,-44,39,10,-13,43,-67,1,71,64,-35,-49,9,-64,-63,-41,25,-14,-90,4,-83,44,48,30,-53,70, 
  /* [30][0][][] */ -31,-34,59,-49,49,54,-60,-87,-94,89,-67,-53,-31,-40,97,-75,67,-3,34,30,66,10,58,41,60,-49,105,-54,-50,-39,-76,-65, 29,-31,33,40,48,-15,-70,-93,-4,-11,47,-17,31,-24,-55,41,64,-107,17,-46,-94,-30,67,55,-1,88,46,-68,-42,-54,45,1, -28,-4,-27,22,27,85,2,-36,9,82,18,-54,-73,-55,-52,-113,-52,-117,-78,127,56,35,12,-36,76,83,-80,-22,-64,21,-72,-2, 
  /* [31][0][][] */ 79,30,-5,41,-36,-57,15,-16,-7,-91,-57,14,-72,-82,93,-28,-12,-53,-3,67,-7,-6,42,-31,-58,-53,-54,51,-22,12,-24,20, 32,18,17,39,-39,-77,101,1,-10,15,-53,-10,9,8,10,11,-39,9,-100,22,11,113,-42,-6,-50,2,-4,15,-36,-47,-44,40, 20,42,54,68,41,37,41,-37,46,2,-70,10,-47,-13,21,-4,-31,-112,-127,47,35,12,45,-79,-103,-64,45,18,28,-66,7,-5, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant14_scale = { 32, { 0.002969266613945365, 0.0044907480478286743, 0.0045545254833996296, 0.0027006624732166529, 0.0029883836396038532, 0.0030976142734289169, 0.0035474211908876896, 0.0042866622097790241, 0.0054838880896568298, 0.0039461622945964336, 0.0047272704541683197, 0.0031396918930113316, 0.0049896258860826492, 0.0056069395504891872, 0.0031176230404525995, 0.0037426692433655262, 0.0038922885432839394, 0.0042973766103386879, 0.0024218014441430569, 0.0043233293108642101, 0.0055323177948594093, 0.0036991159431636333, 0.0048490697517991066, 0.0023983828723430634, 0.0039897486567497253, 0.0050474591553211212, 0.0056537780910730362, 0.0037155048921704292, 0.0024830319453030825, 0.0042800991795957088, 0.0032164130825549364, 0.0038938312791287899, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[32] = { 244, -597, -1733, -425, 91, -1384, -12, -287, 257, -675, -96, -6, -677, -853, 1034, -68, -55, -229, -350, -524, 495, -2427, 1153, -2065, 104, 403, -345, -333, -1701, -990, -536, -5, };
const TfArray<1, int> tensor_dimension15 = { 1, { 32 } };
const TfArray<32, float> quant15_scale = { 32, { 0.00020109264005441219, 0.00022647526930086315, 8.7112595792859793e-05, 0.00023556561791338027, 0.00016531680012121797, 0.00011101730342488736, 0.00021620135521516204, 0.00023322591732721776, 0.00021796337387058884, 0.00015502408496104181, 0.00016822587349452078, 0.00026832515140995383, 0.00034590775612741709, 0.00013328122440725565, 0.00016155482444446534, 0.00025583463138900697, 0.00031477637821808457, 0.00030086975311860442, 0.00029097305377945304, 0.00019635031640063971, 0.00014845699479337782, 7.7174059697426856e-05, 9.1690213594119996e-05, 0.00012779339158441871, 0.00026082602562382817, 0.00018540234304964542, 0.00013530089927371591, 0.00016193051123991609, 0.00012332051119301468, 0.00016669512842781842, 7.4824281909968704e-05, 0.0002118903212249279, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[32*1*7*6] = { 
  /* [0][0][][] */ 7,-14,-39,45,111,37, 43,46,10,4,127,-23, 4,-42,50,-71,81,44, -26,39,22,51,68,26, -25,24,-10,-27,89,-8, -26,63,30,0,124,86, 45,41,-49,76,72,49, 
  /* [1][0][][] */ -36,-67,3,51,-127,75, 35,-15,-27,-38,1,24, 14,46,2,44,-119,20, -8,-33,41,-54,-114,89, -17,-40,20,8,-34,58, -9,19,-16,96,-101,-65, 30,-40,33,-30,-79,50, 
  /* [2][0][][] */ 69,-127,-52,38,52,69, 45,-52,-90,23,12,-11, 89,-96,-99,-22,-88,-87, -89,-120,45,29,39,53, -79,54,78,-41,-20,47, 47,-22,69,-3,48,34, -13,-11,-72,13,-74,116, 
  /* [3][0][][] */ -35,35,12,98,90,1, 20,41,4,85,-4,-2, 44,-22,24,127,19,3, 10,-3,24,112,-35,-46, 15,-35,-28,125,1,18, 43,44,-11,36,37,-38, 51,-43,-30,71,-44,21, 
  /* [4][0][][] */ 99,-66,4,28,-44,-76, -56,46,-28,-43,96,-74, 9,-19,-24,-39,38,-29, -102,-31,105,-64,45,38, -101,14,10,-39,127,67, -24,-24,-60,-20,-24,45, 2,-8,-13,-83,13,39, 
  /* [5][0][][] */ -43,45,42,25,-39,-127, -21,-83,31,-4,-64,-42, -60,-33,-2,105,-71,-19, -56,3,86,84,28,-44, 89,50,-36,107,-10,-27, 4,41,86,73,124,14, -75,33,41,120,31,31, 
  /* [6][0][][] */ 15,-2,-58,-97,-38,-34, -49,35,46,-108,-24,-58, 2,-66,-33,-51,-62,-48, -72,88,6,-93,77,-34, 56,2,24,-43,-1,-73, -21,-56,-37,-27,-44,-54, -68,4,-16,-85,39,-127, 
  /* [7][0][][] */ 56,30,-24,-52,-57,-4, 49,45,35,-39,-75,-30, -2,19,-58,-74,-55,65, 38,15,16,-102,-79,-26, 16,-7,-44,-79,-127,-15, -36,6,49,-126,-48,2, -45,-53,25,-29,-36,55, 
  /* [8][0][][] */ 32,-22,-6,-54,-36,-87, 0,-71,-24,-14,31,-108, -14,53,29,58,-27,-102, -47,15,-2,-35,48,-127, -23,-41,-26,9,-35,-12, -33,-15,-35,30,2,-66, 64,26,-38,2,23,-81, 
  /* [9][0][][] */ -60,91,-8,-117,32,-27, -80,45,45,-114,36,113, -56,-56,-74,54,3,80, 125,12,-68,33,23,-76, 114,42,104,-78,-103,-23, 109,-70,66,-10,38,19, 66,6,-69,127,30,43, 
  /* [10][0][][] */ 56,-61,-10,-27,3,10, -59,-80,32,-30,40,15, -54,-1,-43,77,118,-42, 31,18,-58,-6,8,51, -45,6,-67,53,8,98, 57,3,36,45,127,-17, 24,-81,0,-47,104,49, 
  /* [11][0][][] */ -17,-29,-56,18,95,105, 32,27,11,-8,51,85, 23,-33,30,5,16,42, -11,-39,-14,13,63,73, 16,22,-10,-73,41,-8, -27,-46,-9,-18,87,84, 3,43,-17,-50,127,90, 
  /* [12][0][][] */ 64,-5,29,105,-90,-80, 25,-47,-2,118,14,-8, -50,65,47,54,82,82, -127,32,-71,-49,-57,86, -107,-7,-58,52,25,80, -17,68,26,-97,64,-92, 117,-85,34,-77,34,-71, 
  /* [13][0][][] */ 21,-9,47,17,-71,24, -52,47,-2,-52,-127,6, -32,32,1,-39,-30,36, 28,53,-37,4,23,62, -29,57,-40,-20,-91,-22, 60,57,-36,-57,-91,39, 39,-12,-37,-9,1,17, 
  /* [14][0][][] */ 57,-30,-50,17,-33,-10, -2,-36,-40,80,-127,27, 27,19,-41,-31,3,-47, 45,30,-22,-28,0,-73, -41,-80,3,49,-1,-67, -57,-57,-50,12,-89,40, 35,30,16,21,-31,-68, 
  /* [15][0][][] */ 18,6,-26,-127,84,-43, -4,40,54,-80,26,-99, 21,-23,-33,-40,-2,-77, 26,18,-33,-74,32,-31, 40,29,49,-13,-19,-83, -50,-47,11,-17,-56,18, 33,63,18,8,-8,-28, 
  /* [16][0][][] */ 18,24,16,-127,40,11, 10,-53,23,-28,2,61, 48,36,-16,-23,75,-27, -16,-28,41,-96,-3,-29, 32,11,-54,-112,7,34, -1,-39,19,-63,85,-12, -4,34,-41,-27,1,34, 
  /* [17][0][][] */ -12,-38,-6,127,95,64, -46,22,24,61,6,79, -6,-37,-24,28,60,20, 9,6,6,104,11,30, 60,-44,-30,107,23,-10, -26,42,8,55,77,71, -30,0,-11,54,21,-35, 
  /* [18][0][][] */ -35,20,18,-14,53,-91, -35,-38,45,16,22,-52, 56,54,33,5,-4,-85, -15,-44,-29,73,-28,-41, 51,-32,7,17,40,-87, -44,-13,-5,-29,-8,-97, 7,47,31,-57,30,-127, 
  /* [19][0][][] */ 2,23,12,-40,40,113, 55,-7,34,-126,12,121, -41,21,-6,-71,47,123, -37,35,54,-44,72,14, -28,-59,61,15,-26,21, -20,-52,2,22,-19,112, -8,54,-8,-87,-13,127, 
  /* [20][0][][] */ 1,1,-56,-36,-13,29, -6,-30,27,-41,74,127, -1,-30,26,32,38,18, 50,-55,-44,44,16,17, 9,-13,-41,46,-11,53, -40,15,-43,-22,72,101, -10,-84,43,4,2,94, 
  /* [21][0][][] */ 40,-49,-2,-7,-9,125, 58,-96,92,111,43,-56, -44,-42,101,94,-79,-30, -36,-27,101,40,44,-32, 19,-51,91,64,-103,63, -4,37,54,101,-39,105, 39,27,-26,127,-70,114, 
  /* [22][0][][] */ -13,-51,-98,98,49,85, 84,-5,-68,39,84,123, -34,68,79,56,21,127, -46,-71,-39,41,-53,-14, 33,43,-72,-12,-3,-61, -14,-11,-73,-39,86,7, 78,-39,-87,43,42,28, 
  /* [23][0][][] */ 51,-66,75,-80,53,-68, -1,-28,13,-12,28,41, 60,-57,21,-14,17,-59, 59,-5,-17,-78,23,15, 43,55,31,-62,-32,17, 44,33,-14,-68,80,-97, -42,-53,49,-127,-23,-19, 
  /* [24][0][][] */ 8,-1,-40,-5,-127,35, -54,39,-9,32,-32,32, 48,41,32,14,-73,60, 4,2,-48,16,-110,14, -50,1,-3,-5,-80,63, 16,-14,36,-7,-122,91, 18,16,-18,70,-52,61, 
  /* [25][0][][] */ 61,107,-22,65,97,41, -50,-86,86,-47,23,86, -27,93,-27,0,-56,-34, -16,-99,-77,33,61,-13, -26,42,84,-11,50,14, 76,-50,-127,8,-72,-55, -2,-100,-57,-68,-31,-54, 
  /* [26][0][][] */ 8,42,-62,-1,37,-100, -22,19,-42,-57,-20,-127, -14,35,43,-46,10,-40, 7,-31,-12,9,4,-42, -25,17,-42,-82,6,-118, 13,10,-19,-32,9,-36, 1,21,-24,-16,72,-45, 
  /* [27][0][][] */ -49,9,-30,-49,-68,127, -44,46,41,17,-109,24, -12,-39,33,37,-109,119, -34,-22,-63,-12,-108,61, 44,17,1,-46,-67,21, 15,14,-10,7,-119,78, -43,43,19,-31,-88,27, 
  /* [28][0][][] */ 127,53,62,75,-35,5, 71,21,-32,52,-10,-28, 66,-8,-19,79,-1,60, 16,12,7,73,94,11, -46,-21,-17,-19,98,-73, 5,-44,-62,32,-18,16, 69,3,78,48,-11,15, 
  /* [29][0][][] */ 10,6,31,114,21,-127, 16,62,-21,55,-9,-76, -56,-13,49,107,-2,-33, -4,-60,-22,24,-14,11, -55,24,38,102,-84,48, -59,-18,-69,66,-71,-5, -74,-15,27,108,-29,-88, 
  /* [30][0][][] */ 15,-119,2,10,53,4, 8,-127,33,-38,26,26, 77,-76,72,-2,66,62, 64,-64,-31,-14,-89,-114, -50,-21,-27,-1,94,4, 23,-31,21,40,-76,-58, -51,1,80,95,-94,-69, 
  /* [31][0][][] */ 20,38,-36,-5,24,-78, 50,-25,-21,-46,26,-35, -49,-22,-32,-8,92,-92, 25,17,-21,-30,62,-39, 4,52,41,-4,71,-62, 9,8,34,-68,13,-89, 9,16,29,-40,67,-127, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 32,1,7,6 } };
const TfArray<32, float> quant16_scale = { 32, { 0.00074558891355991364, 0.00083969981642439961, 0.00032298639416694641, 0.0008734040311537683, 0.00061294325860217214, 0.00041161762783303857, 0.00080160732613876462, 0.0008647291106171906, 0.00080814037937670946, 0.00057478109374642372, 0.00062372919637709856, 0.00099486613180488348, 0.0012825183803215623, 0.00049416528781875968, 0.00059899501502513885, 0.0009485551854595542, 0.0011670928215608001, 0.0011155314277857542, 0.001078837551176548, 0.00072800589259713888, 0.000550432363525033, 0.00028613739414140582, 0.00033995878766290843, 0.00047381813055835664, 0.00096706172917038202, 0.00068741419818252325, 0.00050165364518761635, 0.00060038792435079813, 0.00045723409857600927, 0.00061805365839973092, 0.00027742516249418259, 0.00078562338603660464, } };
const TfArray<32, int> quant16_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,300,6 } };
const TfArray<1, float> quant17_scale = { 1, { 0.26970979571342468, } };
const TfArray<1, int> quant17_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,150,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.029786925762891769, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,150,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.029786925762891769, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,75,1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.029786925762891769, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<3, int> tensor_dimension21 = { 3, { 1,75,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.029786925762891769, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.029786925762891769, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.024892207235097885, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,75,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.024892207235097885, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,75,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.033429652452468872, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.033429652452468872, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.091386266052722931, } };
const TfArray<1, int> quant27_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.052994843572378159, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.10268238931894302, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,38,64 } };
const TfArray<1, float> quant30_scale = { 1, { 0.10268238931894302, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.016817145049571991, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,10 } };
const TfArray<1, float> quant32_scale = { 1, { 0.17658901214599609, } };
const TfArray<1, int> quant32_zero = { 1, { 45 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,10 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 17 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 17,16,15 } };
const TfArray<1, int> outputs1 = { 1, { 18 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 18,2 } };
const TfArray<1, int> outputs2 = { 1, { 19 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 19 } };
const TfArray<1, int> outputs3 = { 1, { 20 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 20,3 } };
const TfArray<1, int> outputs4 = { 1, { 21 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 20,4 } };
const TfArray<1, int> outputs5 = { 1, { 22 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 22,14,13 } };
const TfArray<1, int> outputs6 = { 1, { 23 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 23,3 } };
const TfArray<1, int> outputs7 = { 1, { 24 } };
const TfLiteAddParams opdata8 = { kTfLiteActRelu };
const TfArray<2, int> inputs8 = { 2, { 24,21 } };
const TfArray<1, int> outputs8 = { 1, { 25 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 25,4 } };
const TfArray<1, int> outputs9 = { 1, { 26 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 2,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 26,12,11 } };
const TfArray<1, int> outputs10 = { 1, { 27 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 26,10,9 } };
const TfArray<1, int> outputs11 = { 1, { 28 } };
const TfLiteAddParams opdata12 = { kTfLiteActRelu };
const TfArray<2, int> inputs12 = { 2, { 28,27 } };
const TfArray<1, int> outputs12 = { 1, { 29 } };
const TfLiteReshapeParams opdata13 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs13 = { 2, { 29,5 } };
const TfArray<1, int> outputs13 = { 1, { 30 } };
const ALIGN(1) uint8_t opdata14[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs14 = { 2, { 30,6 } };
const TfArray<1, int> outputs14 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata15 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs15 = { 3, { 31,8,7 } };
const TfArray<1, int> outputs15 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata16 = { 1 };
const TfArray<1, int> inputs16 = { 1, { 32 } };
const TfArray<1, int> outputs16 = { 1, { 33 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension0, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1344, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension17, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension18, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7200), (TfLiteIntArray*)&g0::tensor_dimension20, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension21, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2400), (TfLiteIntArray*)&g0::tensor_dimension22, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension23, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2400), (TfLiteIntArray*)&g0::tensor_dimension24, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension25, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension26, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4864), (TfLiteIntArray*)&g0::tensor_dimension27, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension29, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2688), (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension32, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension33, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_ADD, OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_ADD, OP_RESHAPE, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 34, };
const size_t tflNodes_subgraph_index[] = {0, 17, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  33, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 34;
  for (size_t i = 0; i < 34; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 17; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
