/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.04.2024 06:54:50

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 6
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 12
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 89936;
#else
constexpr int kTensorArenaSize = 88912;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_ADD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.15371763706207275, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 1800, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 900, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 450, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data4[3] = { 1, 450, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 3 } };
const int32_t tensor_data5[1] = { 1 };
const int tensor_dimension5 = 0; /* empty TfLiteIntArray */
const ALIGN(16) int32_t tensor_data6[5] = { 1026, 846, -197, -1399, -407, };
const TfArray<1, int> tensor_dimension6 = { 1, { 5 } };
const TfArray<1, float> quant6_scale = { 1, { 8.1436795881018043e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[5*64] = { 
  -55, -61, 78, 0, 75, -76, -23, 6, 97, 13, 3, -69, -87, -83, -77, -78, -89, -24, -104, 80, 85, 70, 7, -122, -121, -115, -27, 62, 77, 5, 20, 14, -56, -56, 66, 60, -81, 23, -113, -82, 38, -75, -34, 6, 1, 103, 76, -28, 12, -45, -107, -84, -10, 42, -13, 32, -17, -14, 97, 17, 32, 54, -25, 81, 
  -36, -9, 47, 61, -40, 30, 28, 41, -4, 39, -1, -57, -12, 69, 53, 39, -29, 22, -20, 16, 47, -69, -99, -83, 56, -81, 48, 71, 12, 62, -82, -91, -92, 28, 51, -54, 61, 61, -42, 1, 76, 4, 54, -61, -79, -21, 52, -87, -75, 29, -62, 30, -63, 63, -100, -61, -47, 1, 31, -55, -87, 82, 38, -2, 
  26, -30, 39, -22, -36, 48, -88, 11, -35, 24, -85, 15, 83, 27, -83, -17, -67, -24, 59, -127, -37, 47, 22, 36, 74, 61, 38, -39, -27, 51, -33, -11, -3, 55, 26, 21, -73, 10, 93, -78, 57, -65, 88, -80, -99, -40, -15, -37, -13, -76, 21, 95, 1, 43, -37, 19, 33, 58, -63, 79, -88, -63, -62, -47, 
  -118, -89, -38, -82, 36, 29, 28, -83, -7, -84, 80, -111, 5, 2, 70, -22, 90, -57, 20, 73, -22, 70, 97, -6, -30, 18, -17, -21, -50, -31, 81, 37, 70, -63, -33, 3, -4, -54, -5, 22, -39, 107, -19, 91, 32, 56, -55, 10, 65, 42, 41, -65, 71, -44, 76, 11, 51, 28, -68, -91, 18, -67, -16, -8, 
  -19, -22, -76, -33, 42, -46, -10, 76, 53, 54, 83, 37, -40, -3, 11, 32, 70, 40, -26, -55, 30, -76, -32, 37, -8, 50, -12, -75, -27, -38, 0, 4, -17, -15, -69, 24, 8, 22, -21, 33, -69, 19, -5, 13, -46, -30, -59, -1, 20, 38, 39, -7, 34, -6, -54, 43, 74, 101, -74, 0, -27, -69, 51, 66, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 5,64 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0049696215428411961, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[64] = { -2664, -5137, 2476, -3683, 30549, -3787, 14969, -6390, 13424, 1311, -21970, -712, 5223, 3898, -10608, -3538, -15305, -7575, -1644, 25709, -134, 24123, 27667, -10002, -3976, -7486, 3985, -3583, -1346, -2279, -31382, 58739, -32649, -1661, -4839, 40139, -251, 1708, -6112, -21371, 960, -16153, -2366, -31322, 27170, 39548, -3146, 69579, 29989, -14922, -18253, -2052, 30916, 3066, 34190, -35579, 25704, -17023, 9718, -4026, 39569, -5974, -11164, 18606, };
const TfArray<1, int> tensor_dimension8 = { 1, { 64 } };
const TfArray<64, float> quant8_scale = { 64, { 0.00020324044453445822, 0.00014571948850061744, 0.00018163757340516895, 0.00013363729522097856, 0.00010812115215230733, 0.00026038190117105842, 0.00014367850963026285, 0.0001231066562468186, 0.00016872509149834514, 0.00028494306025095284, 0.00014861651288811117, 0.00021095147531013936, 0.00021911885414738208, 0.00026051187887787819, 0.00019659929967019707, 0.00012130556569900364, 0.00020050237071700394, 0.00012648737174458802, 0.00025274450308643281, 0.00011149413330713287, 0.00020006766135338694, 0.00014444369298871607, 0.00012172834249213338, 0.00022428526426665485, 0.00030550194787792861, 0.00017323053907603025, 0.00024017128453124315, 0.00020128650066908449, 0.00017214223043993115, 0.00012006051110802218, 0.00010714723612181842, 5.7436227507423609e-05, 0.00010943767847493291, 0.00030645265360362828, 0.00024663703516125679, 6.9791116402484477e-05, 0.00021811679471284151, 0.00020951069018337876, 0.00019044695363845676, 0.00012771246838383377, 0.00029820602503605187, 0.00017923407722264528, 0.00024256859614979476, 0.00011370758147677407, 0.00013230815238784999, 8.5919513367116451e-05, 0.00024421224952675402, 5.4974094382487237e-05, 0.00013036216842010617, 0.00016430141113232821, 0.00014943259884603322, 0.00024940693401731551, 0.00013331224909052253, 0.00017026514979079366, 0.00012093782424926758, 8.2305537944193929e-05, 0.00011833069584099576, 0.00016025260265450925, 0.00012485467595979571, 0.00018612600979395211, 0.00010694978846004233, 0.0002132785739377141, 0.00010353640391258523, 0.00013610399037133902, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[64*1*3*32] = { 
  /* [0][0][][] */ 65,-35,-50,43,55,-89,67,22,-66,57,-38,19,-33,-58,-44,48,52,24,-36,-45,80,-41,52,-43,-83,-16,0,15,35,44,-23,-4, 35,49,5,-62,-15,50,3,6,-95,26,-32,0,-72,19,-51,74,127,-3,35,89,55,-5,20,-54,-59,42,-59,-44,75,-37,-84,-64, 2,74,-83,91,-24,-48,92,27,-20,-22,66,7,-12,71,-63,-45,102,63,-31,95,13,-48,16,20,-56,0,-51,-27,-32,-124,34,65, 
  /* [1][0][][] */ 5,35,-8,65,-47,15,-26,-10,9,5,99,-20,24,33,-47,18,-40,33,30,13,4,2,-6,53,-53,-47,54,-25,-6,11,82,78, -96,-88,-34,-26,29,19,39,-13,-41,1,-49,-79,-7,20,42,53,35,28,-16,-2,-48,3,-14,17,-25,40,-7,9,36,-127,-18,65, -28,12,-62,-8,20,-9,72,-23,-12,-42,2,-67,3,25,-24,41,4,2,-13,31,-26,63,79,-9,2,23,-32,48,19,-72,26,-2, 
  /* [2][0][][] */ -4,73,-46,54,7,57,37,-8,52,90,-56,36,-36,73,-21,-33,65,-23,-98,-2,-87,-68,25,10,-76,31,-45,42,-33,-7,-88,28, 38,-75,-49,-67,42,6,-14,-115,19,1,76,17,78,-69,-33,-9,-60,-21,66,-22,-124,-7,14,4,13,-17,-21,-49,80,-93,42,-7, -8,55,-12,16,21,110,71,15,38,-49,127,-69,-39,5,127,-105,-70,4,-20,98,-103,26,-8,81,-24,0,-78,66,-26,-36,-29,56, 
  /* [3][0][][] */ -4,34,31,42,28,18,6,21,50,114,-59,-24,-3,-15,-101,-18,-51,-37,9,60,-110,-33,-98,-62,10,-26,2,-74,-9,80,0,24, 61,44,25,-18,-21,37,65,95,-59,108,63,-45,-72,69,23,65,-76,5,-42,-4,-93,46,-3,-67,34,-37,127,-59,-9,3,-47,17, 60,-62,-26,20,103,-49,-40,21,123,-60,-63,-41,94,48,42,97,-91,-88,45,-96,-55,16,-26,18,24,-62,45,-91,7,22,18,8, 
  /* [4][0][][] */ 12,-2,47,96,-40,-45,35,98,-35,-73,64,-38,-76,-67,-28,14,-19,10,64,-32,-68,99,-53,-34,68,56,-79,-14,-100,-2,-34,-24, 24,-7,26,-43,-6,32,-31,-72,-82,38,3,-40,47,16,-90,-24,-21,82,78,-45,63,-22,-127,-50,28,7,-81,-70,-9,81,26,-12, -33,48,29,45,6,33,42,-5,-109,46,29,38,-99,-68,-55,23,-49,23,-28,23,20,-13,-72,11,-79,-7,-10,-107,9,71,40,64, 
  /* [5][0][][] */ -31,17,-107,95,-18,-59,44,-120,110,-32,18,112,52,-54,-19,57,0,32,-18,57,17,-37,23,37,80,127,-48,-14,-61,-111,-44,-18, 41,-11,29,-77,25,17,-52,25,-36,63,118,-51,-63,20,55,-26,-26,-115,-97,102,-81,52,33,-29,-90,-21,-56,107,-2,62,16,64, 10,-38,25,56,-1,83,72,-63,73,7,22,-17,-56,-23,-15,-57,-41,-106,44,41,-20,-13,52,43,6,121,-68,10,-77,4,10,-62, 
  /* [6][0][][] */ 9,-48,20,31,54,-38,-21,-107,24,-42,-12,-75,49,-64,-62,35,44,11,45,-2,-18,-58,40,46,23,78,-12,-48,-57,-25,-60,-16, -88,61,-3,-18,-29,24,-8,-67,-23,-21,-46,-38,-58,20,-39,-27,-47,-54,90,-33,-14,-12,-36,41,-42,-49,-12,38,35,69,58,-39, -91,7,43,127,47,-73,10,1,106,29,-26,-73,44,37,37,-48,-56,-65,45,3,-35,-18,18,-26,50,66,16,-16,-30,-65,37,28, 
  /* [7][0][][] */ 7,-53,-48,37,57,57,-34,-47,-17,-1,-70,21,-93,-73,27,-40,63,-10,2,21,1,9,-65,72,-66,8,52,21,-16,29,38,45, 8,39,-33,62,60,-66,82,-34,38,-27,35,-105,35,-38,27,108,49,26,-13,-33,53,28,-75,44,-80,13,17,-12,-73,-40,-37,24, 15,-45,-20,96,88,39,46,67,-17,-9,-66,31,-73,-27,-127,-47,-68,89,-24,-20,61,-42,26,-46,-54,17,33,69,-66,-33,61,92, 
  /* [8][0][][] */ 41,-113,-51,35,-87,-35,20,16,-88,45,82,-80,6,-48,-87,-22,4,61,41,4,-10,92,-123,-2,70,-56,-16,-15,67,-54,55,-21, -89,21,87,-20,46,-11,-51,54,5,77,18,56,-30,66,-65,27,-127,45,18,102,-23,60,-32,5,2,20,34,-83,-36,80,7,29, -2,-52,-27,-52,-33,-80,-7,-23,-108,82,44,-6,-86,70,75,26,33,15,5,-74,10,27,-25,27,30,-33,-75,59,-73,90,-8,-1, 
  /* [9][0][][] */ -91,16,10,54,61,-79,103,-59,-127,61,-4,-63,46,91,52,42,10,36,49,48,-41,-15,27,26,-27,-74,-50,96,87,-37,-28,-92, -68,-63,41,30,23,67,16,-8,-57,-34,27,-62,60,40,-69,-25,-22,79,78,65,44,32,-19,-49,-51,-50,-88,79,-8,-13,-40,-77, 12,-58,-74,-8,74,-46,-29,74,-25,8,-14,-12,-95,77,-57,94,43,-4,40,86,49,-61,16,-4,-20,57,21,6,-23,57,-4,-67, 
  /* [10][0][][] */ -20,-82,96,13,39,22,-45,-6,64,-70,22,-33,-2,-73,52,62,-35,-14,0,-48,96,36,-10,-7,41,2,19,-8,49,5,-32,-27, 31,22,23,19,-64,68,-96,-12,3,-40,6,-32,71,30,60,-45,88,-63,58,-97,-34,81,-6,-22,127,40,84,9,-16,98,-48,52, -29,45,91,-1,-50,2,-112,-33,45,-97,-10,83,22,26,-83,12,-24,57,-48,-99,28,-97,12,43,104,-105,89,84,-25,75,80,38, 
  /* [11][0][][] */ 44,-62,-34,34,82,-41,31,-16,7,9,-16,43,8,-38,-81,-43,55,59,77,86,55,-12,-28,13,-79,-13,-29,-10,-8,-127,-31,-85, -42,0,-80,50,-45,-27,27,116,-7,-35,-11,-48,-38,-16,-74,2,87,-40,-31,30,118,24,46,2,-86,-94,-28,58,20,14,6,38, 62,-24,60,7,34,-98,56,62,-125,-34,-5,-3,-43,-49,36,26,116,19,93,-9,127,-59,25,-43,48,-11,51,1,65,1,-52,8, 
  /* [12][0][][] */ -48,4,-47,-68,-45,26,101,10,-73,55,87,4,-78,94,-73,48,75,-30,-109,114,-44,30,84,11,-13,18,-77,44,67,-98,33,66, 46,24,-58,19,-124,32,-9,-57,36,-74,-71,2,39,-55,-62,81,103,-80,-4,111,-66,-101,106,47,52,59,-32,-108,23,-69,25,31, -24,47,-57,-88,-42,23,58,1,56,-68,42,127,-64,29,-91,-40,92,-41,49,-66,89,3,-45,37,-37,75,-24,-58,64,-70,-49,6, 
  /* [13][0][][] */ -103,89,-71,51,49,6,-99,117,9,57,-52,-9,-82,1,7,55,-64,40,-29,54,53,-14,80,-39,-8,-118,-17,-35,37,-2,8,89, -56,57,-36,-97,-12,65,10,-6,-35,-36,67,50,83,-5,-51,-28,51,15,45,-71,0,71,91,-46,62,-127,10,-102,42,63,-23,16, -91,-7,-1,50,28,-1,25,53,-31,29,-62,63,6,-28,54,-21,71,-24,40,0,50,-61,-41,-64,-47,5,-11,-89,34,-106,6,-23, 
  /* [14][0][][] */ -53,42,63,-3,-42,55,-6,33,30,50,-19,-60,89,-21,54,-23,-48,19,-11,-127,-38,25,75,32,49,-81,69,18,-3,-11,11,34, 29,40,-49,-57,-36,15,-41,47,-29,-98,-27,63,-35,23,77,21,5,-71,-8,1,-15,97,-25,-20,20,32,-51,73,-40,53,-52,51, 7,-36,37,-32,-22,16,-51,12,106,-61,9,50,23,18,-49,-43,-39,-61,40,22,6,105,4,-33,43,-22,3,18,-21,55,-48,-2, 
  /* [15][0][][] */ -10,96,-75,76,-41,73,-69,-74,62,32,-26,29,-85,31,59,58,-2,-123,-47,-48,-79,-56,-53,56,34,77,72,57,88,75,127,-24, 34,27,-40,31,55,-72,31,-106,-71,64,87,16,-48,34,-78,-26,54,-106,-46,-5,63,55,-10,92,20,60,-85,-24,118,-25,17,-62, 44,27,33,88,87,-63,-36,-97,20,-43,39,41,5,-13,-64,-71,-15,-50,104,62,14,-87,10,66,-26,-31,8,-30,-26,-65,-22,52, 
  /* [16][0][][] */ 12,41,52,9,-55,66,-48,57,-24,-62,-46,27,-31,49,-48,18,39,-42,-20,-71,31,-6,53,-9,127,-62,-51,27,11,98,-7,-13, -75,-7,-10,-61,61,13,32,-2,105,-38,-93,52,70,61,-59,25,-19,39,-13,24,-56,3,-65,37,6,30,26,-22,-8,43,27,15, 34,27,35,74,-14,-25,20,-22,-48,-28,-91,21,57,17,-43,-55,-5,-50,-18,-52,76,-25,58,50,114,-6,-4,107,8,-6,73,-13, 
  /* [17][0][][] */ -53,-68,30,-20,22,-102,-31,36,79,64,-3,-24,11,-62,-12,-19,51,33,-49,-40,-6,36,-24,-35,13,-83,35,36,-19,-57,43,55, 62,72,-29,93,72,-92,88,38,-16,86,75,-88,-60,-75,26,100,17,12,8,-40,-34,-8,-42,-43,-8,-43,-49,-21,-24,-90,-72,88, -22,-12,59,127,57,55,-60,32,-49,36,71,-4,-22,-49,-50,21,57,13,92,103,40,-22,35,38,-68,-97,-36,35,4,17,-70,25, 
  /* [18][0][][] */ 61,57,-60,9,24,-68,16,-14,14,8,42,30,-13,-38,27,-80,76,-16,-46,104,71,-22,35,5,1,-54,-21,41,61,-44,-2,-11, -48,-21,4,-38,14,9,-36,7,28,-63,-40,85,-37,-20,15,-55,-21,-114,25,50,8,10,7,65,-32,86,-16,-20,-7,-52,39,19, -48,34,-127,22,2,-53,28,-53,-57,50,108,72,50,-8,24,-39,-3,2,-28,-19,15,-29,71,-58,8,92,-64,37,72,54,34,-11, 
  /* [19][0][][] */ 68,57,28,111,-32,76,-43,-42,19,-9,60,-14,7,-44,-71,41,-75,-21,33,-109,-73,-109,-96,-17,-61,64,62,-64,-110,41,33,-88, -12,-31,26,82,-18,-24,-49,-93,4,9,105,-115,-63,12,64,-37,-108,-19,11,84,62,23,-66,82,-28,72,36,69,22,32,-46,62, 61,-76,-46,-14,36,-103,89,-69,-28,-58,11,-127,15,-41,-85,66,37,32,121,5,-67,15,-88,-57,40,-1,-86,-67,-93,94,-51,57, 
  /* [20][0][][] */ -62,-79,37,-33,46,21,26,127,-13,97,-19,-21,-4,67,69,35,-13,28,-3,28,21,-55,-41,-18,-39,-63,99,-26,-99,58,-76,-52, -26,-44,30,66,60,11,30,-11,-17,50,16,-72,54,31,-56,-26,-7,-14,26,-46,-61,40,-81,71,-14,-47,-6,-63,-50,90,-102,-85, 8,-90,-30,75,73,53,-71,1,-26,-41,24,-60,49,-19,76,-25,-63,109,39,-6,7,14,-60,-43,47,44,-34,17,-23,89,29,9, 
  /* [21][0][][] */ 24,-55,-83,-63,-71,-127,-27,-35,-85,34,16,84,8,-14,-43,52,-26,29,-89,40,42,-94,0,-97,24,104,-29,30,-26,-57,45,104, 86,-109,20,60,-122,-17,40,94,69,12,122,60,-21,-69,79,27,33,-8,-118,55,-25,-26,-64,55,22,43,37,-32,-80,-62,-55,-54, 12,-31,32,-54,-3,-34,11,8,14,34,81,-40,-12,-21,-20,-20,50,-65,12,-14,-11,-58,-7,-30,-47,-15,-7,4,17,-62,100,40, 
  /* [22][0][][] */ -18,17,-81,28,-43,-41,-42,-52,26,60,125,-1,38,-67,36,43,85,29,-94,-39,-34,-53,-23,-109,68,28,-77,-23,-34,-118,-92,26, 76,-30,60,-27,-11,-65,-10,-28,20,-59,-8,127,-88,-23,36,-35,-19,-22,-41,-54,51,-72,-34,32,-31,52,10,-46,-51,1,-22,35, 93,-14,-46,-33,-90,-47,-27,75,-50,0,-3,4,-36,-22,-27,-34,42,-48,-24,64,104,52,-29,-50,-1,5,-48,-33,0,40,58,114, 
  /* [23][0][][] */ -15,-55,-42,45,70,15,23,-56,-11,70,3,71,7,7,-100,41,4,13,-41,60,83,-89,52,-12,-46,75,38,19,-2,-6,74,-71, 57,83,-100,37,0,-109,73,-49,-14,-5,-24,61,-88,32,37,-65,10,-70,-13,110,-31,-61,-14,54,87,21,8,-8,10,-19,-9,5, 28,88,-20,-41,-47,-76,127,90,-46,-81,-9,-54,-11,31,14,-2,84,63,36,32,9,15,2,0,-10,-34,-51,20,73,-20,63,50, 
  /* [24][0][][] */ -103,-81,-34,-60,70,46,94,-6,55,-5,27,-79,-127,21,-67,15,-76,17,-17,83,70,-97,114,-74,-58,30,45,29,48,-49,53,16, 32,15,-97,59,-3,-37,-28,-3,86,35,20,-11,-99,54,21,-31,49,-89,-24,75,38,41,114,57,-67,-57,-50,74,49,-12,44,-34, -43,47,31,35,78,28,-58,-58,-15,69,-50,55,25,14,-55,-17,39,-34,-46,100,-20,-28,3,-64,29,-31,-101,53,28,-58,55,-5, 
  /* [25][0][][] */ 28,36,-83,1,21,-85,-19,1,45,-35,37,60,17,-62,20,11,79,55,-4,113,11,-93,-5,36,-53,-40,-6,42,113,-11,43,-44, 97,34,42,-19,-79,-36,91,3,-103,76,28,115,-74,-43,-57,-13,-39,-44,28,106,-9,-48,64,71,20,-42,-26,127,56,-92,-91,-43, -61,-15,-85,88,3,-114,121,62,-36,51,11,94,63,-37,-109,3,80,-33,-5,42,27,47,88,12,-52,-2,-42,-42,51,-100,56,0, 
  /* [26][0][][] */ 51,25,-30,-29,34,33,-42,38,91,17,60,92,-7,-17,-58,53,59,-19,-56,28,-10,-33,127,-43,-78,58,-39,17,-3,6,-53,29, -55,18,20,-37,43,-4,-58,42,-43,-47,16,-28,59,40,33,1,9,-87,-9,78,-27,-73,17,25,-61,16,-68,-28,-35,-5,-23,-48, -25,65,16,73,-46,22,-37,-57,-3,37,-25,57,46,61,-24,39,50,-87,-45,-29,68,-68,-17,-52,15,-67,5,11,-34,-35,16,-44, 
  /* [27][0][][] */ 106,48,2,13,-12,-67,-98,-48,52,127,-19,-91,79,-29,12,-8,-6,-21,-12,-40,-115,52,-3,-55,-40,103,5,27,-65,20,-108,47, -16,-23,32,2,20,-38,-13,-69,62,-8,28,-49,34,35,47,-22,-74,-19,15,12,-14,-72,-55,9,11,-9,55,-35,-35,63,8,86, 22,44,-6,-46,84,-58,-67,-23,-43,4,106,-40,81,-8,57,41,-44,50,-67,23,-52,-20,61,46,-30,48,50,-29,-90,43,-104,-2, 
  /* [28][0][][] */ 29,-5,20,22,-25,40,-61,-57,124,-28,-18,0,40,-30,-93,40,3,79,-19,76,61,-48,-15,57,23,69,20,-81,5,44,21,-103, 12,66,22,-13,-55,-33,14,21,14,18,-39,-37,36,41,37,-4,33,-13,23,-1,-97,-62,-127,54,5,74,-66,4,-71,-71,-60,-34, 61,64,1,-16,8,-15,71,33,30,29,-17,-87,36,3,-64,-22,-17,-15,-39,-69,-21,-40,-42,4,28,28,-60,58,32,49,13,40, 
  /* [29][0][][] */ 59,-99,0,-27,-46,31,49,-108,-30,65,42,10,30,82,55,71,-86,-36,41,51,29,-7,63,47,-64,15,-2,-86,35,13,36,56, -20,-11,-80,69,48,-94,-42,-127,-35,94,99,-55,-7,31,-57,-49,28,-63,-53,86,-53,-25,51,-77,-99,-45,24,11,31,10,-10,44, -40,6,1,27,90,-3,-19,-94,-43,-26,102,87,-18,-3,-50,-15,21,33,36,75,-40,34,-34,5,-59,61,70,1,-122,17,-53,99, 
  /* [30][0][][] */ 3,-49,42,-97,38,-3,47,46,-33,51,49,60,86,-77,-15,-17,-32,22,-28,-40,56,11,34,-12,67,72,69,8,27,98,-17,27, -52,1,4,55,-18,-23,1,23,48,-72,-89,78,-9,-45,-12,7,-61,49,12,-21,-73,52,-55,127,53,-4,24,43,-61,39,26,-4, -61,39,44,9,-18,-39,-60,-4,-25,19,36,2,81,62,-10,14,-54,-17,42,-4,-31,53,57,45,121,-15,116,-11,16,71,57,-61, 
  /* [31][0][][] */ -66,-19,-115,-3,-25,-70,-90,-14,-100,-62,-47,-64,-71,-5,30,-17,110,99,-30,85,-34,53,19,-4,-25,-10,-70,-112,54,-65,-74,-6, -76,-100,-94,10,-24,7,64,114,-40,-8,32,76,45,-63,-12,-29,53,-8,41,9,-43,46,20,-42,-45,82,-15,66,-85,-75,78,55, -28,36,0,-104,8,4,71,-56,-77,-50,54,-44,25,-8,-99,-34,-52,-35,-66,-26,102,-43,-40,-62,-127,7,-78,-70,-53,64,-21,-19, 
  /* [32][0][][] */ 56,38,4,-70,31,33,-66,-4,80,42,-80,7,-42,-84,-23,-64,-44,-47,31,65,-20,-64,44,46,127,-1,67,-46,65,71,90,-2, -78,11,-12,-38,79,25,-51,-12,77,-37,73,80,-6,40,39,-31,-48,-21,-17,40,-59,38,43,115,17,-43,22,89,-4,57,84,7, -5,43,-35,44,-7,-26,19,4,13,11,-15,9,46,58,-12,-37,-74,11,-17,62,58,42,49,32,-14,-4,88,60,-2,-19,-10,-115, 
  /* [33][0][][] */ -22,59,-103,56,-15,52,25,20,-21,5,-25,4,23,49,13,-72,32,-5,-39,3,1,9,37,-5,-14,-11,-41,31,81,-31,38,-53, -5,-60,21,-49,-17,-68,63,-49,62,22,8,-37,-93,14,38,76,-10,-21,-54,89,3,-78,-35,46,-24,104,39,-11,-32,-104,86,78, 41,-60,-36,27,46,12,67,10,-55,41,7,-34,-75,2,-36,36,39,35,35,127,8,-57,97,5,5,-18,15,-60,-40,-95,55,-68, 
  /* [34][0][][] */ 54,-30,14,65,-6,-29,47,50,-11,58,2,-69,96,7,61,14,28,53,-108,25,-36,-54,27,33,-68,21,102,-99,-58,32,-58,-25, -75,-66,-44,-35,22,-12,20,75,-20,66,73,-55,-56,-36,1,-37,-48,15,29,-48,-84,64,21,8,62,-61,119,-100,-59,-39,-44,24, -11,71,30,10,89,84,22,21,65,66,27,-33,-72,118,50,1,-60,-10,-127,-34,-77,-20,-41,-61,-88,31,102,-105,71,18,52,-28, 
  /* [35][0][][] */ -47,-35,-44,-12,6,7,18,-36,37,-31,20,8,12,-46,-56,0,-21,-76,-20,-13,-70,-26,9,6,-58,37,27,-32,11,-42,-19,27, 47,35,-77,-107,6,31,-28,41,38,-101,3,-68,-12,16,2,-23,-28,48,43,-7,-23,100,-54,-54,-43,18,-43,-85,4,-109,-40,-11, -29,-42,-40,52,-1,-93,-48,40,44,-6,-74,-33,-33,-118,56,127,19,-60,-60,82,54,46,-124,-64,65,52,-19,-50,-99,45,91,39, 
  /* [36][0][][] */ 31,21,-26,-66,-31,64,-71,60,66,-37,-12,37,46,9,34,43,-5,-61,-15,-123,-45,15,-36,-61,42,-62,-82,71,-4,30,-41,69, 22,-33,37,45,-52,48,3,-27,98,-41,-124,2,23,95,-59,-7,1,-127,49,21,-26,90,26,-68,24,-3,33,65,-45,9,-36,45, -25,65,100,-83,41,-44,-30,76,-51,-90,-3,3,46,-13,-33,38,-47,-59,56,35,103,-16,-46,80,-1,-83,56,-26,-11,22,18,19, 
  /* [37][0][][] */ 11,4,-7,13,6,17,74,5,-68,-26,-2,-9,-124,44,32,-23,14,34,42,72,70,24,17,30,-21,-54,33,29,-49,35,44,-19, -21,1,16,9,85,76,51,2,-127,46,65,-46,-80,40,-91,43,56,46,-53,8,-36,-68,-24,45,-87,-42,4,101,-32,-78,-57,-35, -14,-51,31,44,63,33,-78,34,22,56,-46,28,-19,-53,-26,14,-52,-3,7,59,35,21,-13,25,-95,-73,-44,30,82,-34,34,-11, 
  /* [38][0][][] */ -19,-74,-64,86,40,-19,115,-57,-6,-26,21,43,-51,10,-121,24,-30,-86,-2,71,89,-36,6,-45,-70,83,33,59,36,65,92,29, 6,-52,19,-59,27,-41,20,106,-67,43,44,-83,-27,34,-27,-110,-31,16,-36,114,63,45,46,-74,24,47,-47,61,-48,-64,-29,-31, 112,45,-64,6,-2,-93,127,-53,-61,-19,-8,58,67,40,-25,16,26,-11,-50,80,67,-107,-37,72,-54,53,-93,-35,8,67,72,84, 
  /* [39][0][][] */ -67,-30,79,40,13,40,-10,15,82,-80,-44,-43,37,61,28,5,63,28,-25,-90,46,62,-16,19,113,-43,30,-3,80,15,-53,-3, -31,-49,10,45,-51,-47,-82,-40,37,-8,43,-44,43,8,20,-73,-61,56,-22,-68,-16,8,18,14,127,-88,80,8,-44,52,18,32, 17,-22,-27,-32,-24,5,3,62,-46,-1,25,72,-7,55,26,-34,15,-52,10,46,22,41,32,35,105,-80,19,61,30,-49,85,74, 
  /* [40][0][][] */ 18,90,-10,16,2,127,-84,21,54,18,47,-60,-42,-35,-16,-47,34,-24,-69,-12,6,-44,71,-68,-12,-97,38,13,74,-82,12,35, -37,-75,33,-35,-22,7,73,35,1,-38,77,-18,-1,53,-38,75,13,-107,-24,21,-123,-29,35,49,61,-71,-3,-67,76,-79,46,55, 9,22,19,45,-2,119,-55,-20,103,106,-29,-47,51,83,49,48,-100,-18,-75,-52,-22,-95,-49,-88,-79,51,-13,-47,75,-26,75,-67, 
  /* [41][0][][] */ 62,-28,13,28,24,1,-75,71,41,-1,4,9,-51,-50,30,-53,-43,21,-64,-55,54,96,-11,4,109,37,20,57,13,-25,14,17, -65,13,-24,28,-84,34,23,32,75,38,-22,90,118,89,64,-4,-47,-102,-89,-106,-5,-71,-23,39,38,-86,-58,9,-54,-70,-5,-53, -11,-3,29,-102,-15,-25,-127,19,-4,-61,-45,57,85,2,-53,-75,47,24,52,20,-36,88,92,95,8,-5,105,54,40,88,51,37, 
  /* [42][0][][] */ 14,-65,-6,74,63,50,55,-4,-32,88,111,71,-39,-33,68,19,58,9,-20,92,-22,-31,-18,-36,-32,-56,-51,0,-26,-20,-50,-53, -49,7,-116,50,-35,-25,127,49,8,-19,53,-26,10,35,-82,-62,11,9,-2,-12,-84,-99,83,-80,-43,48,-125,-10,-5,-51,32,-59, -45,2,25,94,42,-54,-36,-28,96,39,117,63,-72,-62,9,27,-17,-74,-49,89,4,24,14,21,10,94,58,45,40,-74,-19,45, 
  /* [43][0][][] */ -20,61,-54,-79,37,-18,28,-6,67,5,-95,11,57,-70,91,-38,-14,43,35,4,30,7,21,-34,-18,30,-5,92,-4,119,0,-23, 24,63,-56,9,-41,110,-75,24,39,71,-45,121,-18,-86,102,12,7,-9,16,-18,-24,65,-33,73,126,-79,-44,54,53,105,44,16, -27,-69,109,-21,-28,-27,-26,39,-28,-71,-64,2,95,36,76,-3,14,-27,24,-96,-47,-27,12,-11,127,30,78,55,-34,-35,33,42, 
  /* [44][0][][] */ 6,-13,-19,-7,-9,16,19,-36,5,-55,67,-21,-67,-65,4,-29,-7,-6,91,-58,-13,32,-122,-31,11,15,40,-73,0,-49,-79,50, -19,-35,4,84,4,-54,92,46,-54,20,6,10,14,-37,-50,-4,-22,-48,27,-11,127,-1,-93,-52,25,15,-3,-10,-102,-1,13,10, 21,-49,-71,-14,56,-85,-3,41,76,-70,-6,-9,-30,-81,14,-15,20,-62,70,62,3,68,-60,-4,-56,74,-94,-57,57,38,5,12, 
  /* [45][0][][] */ 13,54,32,59,-102,-117,-50,28,-68,86,59,40,50,-91,-80,-59,44,-11,91,-82,-7,16,-109,88,6,41,66,-48,25,17,-68,42, -27,-111,1,26,30,-49,7,44,-74,92,94,21,-67,-48,57,-36,-35,67,79,-31,-91,-127,12,45,57,-81,-30,-127,-74,-50,-35,-21, -32,-37,-51,-50,-22,84,-32,-45,41,44,42,-118,-86,-83,85,34,11,59,51,-60,14,24,-12,-49,-16,-62,4,-78,66,-59,-33,-97, 
  /* [46][0][][] */ 88,-7,108,-61,-18,66,17,-80,31,10,-54,-79,35,-28,-20,3,15,4,-36,13,-100,-44,25,91,-87,0,-35,16,-65,-38,-61,51, 124,-40,25,-61,48,-19,103,-7,-33,117,-10,-93,0,-16,127,-47,-68,24,-12,-4,-122,71,37,59,-106,-51,60,74,-47,-24,-81,-52, -16,65,-10,93,64,-21,9,-52,-54,-42,110,-94,1,102,11,35,-19,92,-20,-31,-61,-23,-102,-26,45,20,45,-67,57,35,-43,92, 
  /* [47][0][][] */ -11,-127,-98,-97,4,-111,-58,32,-43,-40,5,72,-86,-59,-51,44,-2,-65,48,48,-44,77,-101,25,12,40,-92,77,1,-66,37,-16, -58,47,-69,40,5,32,-1,-20,-34,-89,68,10,-82,-33,-16,-72,-12,5,-6,43,89,-39,-95,-79,-11,-51,-9,-41,16,5,38,-66, -21,-6,-48,-5,10,-38,26,-56,-7,-70,-5,56,20,23,53,-110,8,-88,30,-32,-56,-53,1,92,56,50,-119,-70,34,-85,-4,-1, 
  /* [48][0][][] */ -43,-99,37,-6,-78,-21,-17,2,-36,-57,-3,54,-49,-80,-106,-68,108,-8,45,-57,48,117,-49,50,71,-4,-70,-11,-73,72,-20,-4, 1,-74,-8,90,63,-86,49,124,-97,21,-59,42,-21,-2,-11,29,-62,-27,55,-86,12,51,29,-2,-29,-1,-127,13,50,-82,60,-67, 8,21,-50,-23,-35,-5,71,117,35,-3,-63,52,15,-81,-112,15,11,-18,-84,-9,98,24,-67,37,-19,36,-3,-75,-60,-117,-48,36, 
  /* [49][0][][] */ 58,48,-36,-48,44,-39,-94,60,51,54,15,127,25,-28,-43,-38,35,25,-59,52,-51,45,-32,-9,47,-18,-32,-23,47,32,10,-67, -75,-82,-17,22,-23,-30,-55,-63,43,-90,-64,-51,65,115,41,-70,-22,-46,-52,-111,127,43,76,80,123,-47,75,97,-91,-29,36,0, -38,-24,79,-22,-14,103,-118,107,115,-49,-44,95,107,66,-75,17,-61,-44,54,-103,-54,10,2,25,100,-38,-40,18,31,27,-51,51, 
  /* [50][0][][] */ 18,-47,-40,-43,3,-70,30,5,-55,-42,13,101,-11,4,29,40,21,1,-84,127,48,4,-19,43,102,-23,72,33,99,11,88,-32, 12,111,-42,-9,-32,-71,-3,-77,12,4,37,52,30,70,-83,-94,-15,-38,57,-35,17,-75,27,-19,21,91,67,61,15,-25,78,31, 85,49,-57,60,-27,-49,62,-23,-44,-63,-37,-35,23,-29,40,-84,31,-9,2,75,109,-66,53,40,-9,44,-51,-31,55,59,87,30, 
  /* [51][0][][] */ -37,-22,1,-67,-47,-68,88,57,21,-75,79,39,-45,-31,-90,18,46,29,-10,65,-17,-39,11,-1,60,63,-34,63,43,-97,21,-21, -10,11,-11,61,-15,-19,29,-19,-55,68,0,-5,-48,9,-15,-7,16,8,39,127,69,0,89,-73,-45,70,-50,-11,30,-47,41,-10, -48,32,22,37,30,21,64,-3,-41,11,47,-35,-61,67,-91,30,-14,-35,-5,6,-13,-32,41,8,-74,29,-39,-46,-14,-18,67,24, 
  /* [52][0][][] */ 27,24,-29,29,-40,-127,12,54,-119,-111,-52,72,73,-68,4,-63,103,-71,-34,17,80,92,57,21,-64,-43,47,13,-56,-7,-28,33, -46,-56,-50,-6,-4,-92,-10,106,52,-1,4,89,-102,-59,-110,36,-55,-7,11,-47,56,28,-86,43,-70,83,-38,-94,-51,-20,-43,-28, -98,-57,-20,-33,-15,26,38,83,48,-35,-62,80,25,-110,15,-33,92,-74,84,-27,6,-4,54,31,105,36,-73,38,-100,-110,33,14, 
  /* [53][0][][] */ 0,70,-19,9,51,55,-29,-43,-68,-22,5,38,-1,29,-74,8,94,-6,26,43,49,-86,-9,6,-111,31,53,-59,-77,-62,53,-24, -18,49,-87,-9,-20,27,31,-50,69,-53,107,29,-62,-4,63,-51,-31,-19,-17,31,49,1,-70,-88,-127,-53,28,19,-18,44,-3,41, 24,78,-70,50,-45,84,-48,-13,-7,-83,-36,-11,16,46,-29,98,16,74,-27,65,-37,-49,-5,26,-86,68,28,7,77,26,-46,-48, 
  /* [54][0][][] */ 40,0,-37,95,-90,-127,-52,-49,3,-84,24,23,3,-45,-69,-52,33,-70,-74,56,63,-17,-17,-10,3,93,-21,20,-97,-93,-27,110, 10,-63,53,-104,-11,-85,-39,-1,30,-48,34,52,21,12,-62,71,15,-24,-50,-43,107,67,-8,-42,67,10,-22,-77,-79,80,45,3, -52,-74,11,107,-25,79,81,106,-114,36,98,94,-81,-127,-34,-53,44,-92,14,-14,118,-106,23,-35,-70,30,-103,-55,31,-124,3,85, 
  /* [55][0][][] */ 23,77,-3,8,55,5,127,13,-22,-77,-63,30,-27,-5,-7,80,-12,83,81,-38,11,15,18,49,60,-68,81,3,72,-26,72,-10, 4,-68,-18,13,-8,-88,-11,2,55,45,0,-114,-42,-7,-15,12,92,18,78,44,123,-60,69,22,88,-76,-25,58,34,-47,-29,26, 42,-78,51,31,8,-63,92,-72,30,60,-44,-110,8,-96,-13,4,89,65,54,53,-24,73,-46,-19,-17,32,52,12,51,-58,14,49, 
  /* [56][0][][] */ -31,-66,31,67,-67,-43,13,40,11,56,27,9,18,12,-115,-24,15,49,-46,-118,11,112,-22,-37,-28,-20,-56,13,-12,-15,41,-37, -53,-45,41,-78,-76,26,-116,18,-22,-35,-20,-48,-60,26,41,-11,3,21,-43,79,40,103,-9,49,-23,-32,20,-8,-42,52,-71,75, -64,-71,-80,-94,-36,-99,-66,95,-46,48,15,54,-51,-28,45,-48,127,1,-10,-21,86,32,53,7,5,9,-27,56,-120,-29,-54,-12, 
  /* [57][0][][] */ 53,39,-78,94,22,-87,72,-20,-34,78,68,-40,-11,19,-55,71,46,52,21,127,84,-35,-14,-51,-46,-19,-3,-76,15,-8,-50,36, 75,-10,-54,16,-25,-29,95,-26,-25,-54,7,8,-57,56,-30,52,51,3,52,78,16,-31,-12,68,57,-98,-27,109,-67,-58,92,-59, -10,-12,-61,35,53,-76,28,122,35,-6,-86,16,9,-52,-45,-88,15,12,87,72,51,-58,-2,72,2,-18,0,39,100,27,-26,16, 
  /* [58][0][][] */ 72,-4,-24,6,66,72,34,6,61,22,82,-82,-13,-22,-26,-55,-66,5,-35,-84,-52,48,-127,67,13,-23,-22,-5,-119,69,25,-10, -3,-5,8,51,15,-47,22,-29,-61,-45,-75,-18,39,53,-76,-50,-5,9,76,46,58,-51,-3,17,-23,62,-44,-57,-115,-30,-42,86, 10,-37,-56,24,73,-1,-34,-12,90,-37,-70,-53,62,44,-7,27,43,-24,2,-27,-77,-1,-29,-2,-34,30,-33,54,-39,-59,36,66, 
  /* [59][0][][] */ 75,-49,-73,-74,7,-21,83,26,-56,-10,40,-19,-63,-32,-80,20,2,56,79,127,-60,-61,-37,9,35,49,-65,-53,-6,-50,1,6, 49,-13,-11,47,39,70,8,-53,19,-9,32,51,17,-32,-20,66,-6,-66,-62,20,64,-36,-32,1,-50,2,-20,36,22,-76,-32,55, 11,-23,23,-59,23,47,81,-26,23,82,12,-70,-15,-57,2,-9,84,42,41,126,40,-78,28,-2,-79,22,-40,-28,46,-56,45,59, 
  /* [60][0][][] */ -57,-89,-48,104,-65,-84,65,41,2,85,52,9,-61,-108,48,-59,-40,-27,55,63,-13,48,-56,45,54,72,-69,-114,-40,-15,60,-14, 13,-13,35,72,5,-96,-60,-41,-122,-96,-31,26,34,-112,-65,-53,26,31,73,-96,102,22,-127,-63,32,45,-107,-25,-50,-111,53,25, 22,16,-11,13,-65,-80,74,-19,-13,60,-46,2,13,-74,-70,47,-15,8,67,-43,110,30,-64,-43,14,48,-86,13,62,78,-31,-40, 
  /* [61][0][][] */ 63,-56,-86,58,15,-44,5,-69,-20,1,-30,-43,50,-27,1,-56,-97,20,78,-92,-98,4,-51,-68,6,68,58,-74,44,4,29,28, -53,79,9,26,114,-8,34,-13,84,17,47,-93,67,74,4,63,-17,24,-55,-31,-127,25,-80,-3,11,-69,11,-62,0,74,-63,99, 33,63,-47,-35,-31,15,32,95,59,-12,-26,-43,56,84,8,-1,-95,-58,24,-14,-53,27,-27,-79,13,70,90,-98,33,55,24,-32, 
  /* [62][0][][] */ 36,17,20,-49,19,-101,-19,-20,92,-32,-50,-127,-45,-22,54,32,-33,3,71,75,-50,65,33,52,-39,-59,-27,52,50,97,36,40, -74,32,85,108,-55,30,36,-74,-76,39,-51,-33,99,-70,32,-95,4,43,-39,47,-33,-69,11,47,91,8,72,-48,16,119,-56,52, -13,47,60,44,-26,78,23,-74,-2,-22,61,-103,-6,24,42,-55,-3,-67,13,-79,-29,-34,-66,102,102,-40,0,52,-24,-20,83,28, 
  /* [63][0][][] */ 47,-80,19,1,-57,-80,-10,-55,5,-19,46,17,-51,86,39,8,-68,35,-14,36,-14,34,-105,5,-27,12,70,17,-102,-9,-72,-84, -37,-82,-13,78,71,21,82,-50,-60,53,58,10,-20,-3,-67,65,38,37,115,-29,-68,-10,-59,60,-47,3,-69,90,14,-1,-55,-24, -29,-72,12,-14,-17,41,77,35,24,-28,-3,25,-37,14,-4,-23,-67,43,36,-3,-89,87,-127,39,27,-5,-91,68,-24,108,-33,-100, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant9_scale = { 64, { 0.0091699762269854546, 0.0065746963955461979, 0.0081952791661024094, 0.0060295616276562214, 0.0048783025704324245, 0.011748133227229118, 0.0064826100133359432, 0.0055544311180710793, 0.0076126828789710999, 0.012856303714215755, 0.006705407053232193, 0.0095178885385394096, 0.0098863914608955383, 0.011753996834158897, 0.0088703352957963943, 0.0054731681011617184, 0.0090464372187852859, 0.0057069654576480389, 0.011403542011976242, 0.0050304876640439034, 0.009026823565363884, 0.0065171336755156517, 0.0054922434501349926, 0.010119494050741196, 0.013783897273242474, 0.007815963588654995, 0.010836252942681313, 0.0090818163007497787, 0.0077668600715696812, 0.0054169925861060619, 0.0048343604430556297, 0.0025914567522704601, 0.0049377027899026871, 0.013826792128384113, 0.011127980425953865, 0.0031488952226936817, 0.0098411794751882553, 0.0094528822228312492, 0.0085927480831742287, 0.0057622403837740421, 0.013454713858664036, 0.008086835965514183, 0.010944416746497154, 0.0051303557120263577, 0.0059695919044315815, 0.0038765899371355772, 0.01101857703179121, 0.0024803681299090385, 0.0058817919343709946, 0.0074130911380052567, 0.0067422278225421906, 0.011252954602241516, 0.0060148956254124641, 0.0076821683906018734, 0.0054565761238336563, 0.0037135316524654627, 0.0053389454260468483, 0.0072304140776395798, 0.0056333001703023911, 0.0083977924659848213, 0.0048254518769681454, 0.0096228849142789841, 0.0046714437194168568, 0.006140856072306633, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[64] = { -260, -5786, 11854, 5037, 38285, -6819, 3687, 1058, 15125, -1728, -26034, -3627, 2887, 2659, -12330, -7985, -24900, -3994, -3852, 23707, -143, 9319, 20421, -15033, -2551, -10652, 2489, 10241, 26789, 6152, -33301, 28347, -38934, -9949, -138, -7237, 502, 105, -10640, -18753, -772, -12308, -5299, 17961, 35541, 37208, 0, -28143, 25361, -12961, -30337, -4789, 27018, 4637, 31236, -39874, -22274, -30093, 8134, -5950, 39949, 2788, -3077, 406, };
const TfArray<1, int> tensor_dimension10 = { 1, { 64 } };
const TfArray<64, float> quant10_scale = { 64, { 0.00048514502122998238, 0.00017334091535303742, 0.00016916601452976465, 0.00010549333092058077, 8.8643282651901245e-05, 0.00017212524835485965, 0.00029312464175745845, 0.00030946155311539769, 0.00023516776855103672, 0.00019752133812289685, 0.00013253603538032621, 0.0003742098924703896, 0.00032532436307519674, 0.0003002760058734566, 0.00016246087034232914, 0.0001315530389547348, 0.00013693518121726811, 0.00025148765416815877, 0.00026065504061989486, 0.00013196918007452041, 0.0002216933062300086, 0.00019842515757773072, 0.00016512647562194616, 0.00025388540234416723, 0.00052642688388004899, 0.00025134565657936037, 0.00017429103900212795, 0.00014191489026416093, 9.8499702289700508e-05, 9.1655492724385113e-05, 9.7123753221239895e-05, 0.00011649893713183701, 8.6337873653974384e-05, 0.0001324415352428332, 0.00039325497345998883, 0.00011643385369097814, 0.00032281407038681209, 0.0002166464546462521, 0.00018734035256784409, 0.0001915571338031441, 0.00035369975375942886, 0.00025198661023750901, 0.00030724561656825244, 0.00013100702199153602, 9.4770992291159928e-05, 0.00010319788998458534, 0.00035856897011399269, 0.00012898475688416511, 0.00010890229896176606, 0.00019865896319970489, 0.00011538519174791873, 0.00039206398651003838, 8.798253838904202e-05, 0.00011605933104874566, 0.00011371581786079332, 6.4402542193420231e-05, 0.00014110497431829572, 0.00010869520338019356, 0.00024229183327406645, 0.00014381208166014403, 0.00010275968088535592, 0.0001645048032514751, 0.00014441688836086541, 0.00016141471860464662, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[64*1*1*32] = { 
  /* [0][0][][] */ 42,12,-63,-57,18,-83,71,51,-69,-43,-2,24,-63,-30,-14,-46,127,30,26,15,79,13,-7,1,-83,43,63,-41,53,-49,-17,34, 
  /* [1][0][][] */ -61,13,-82,86,127,-42,36,-105,6,-14,86,-43,-71,82,-78,70,-52,46,-25,-66,-48,15,26,-4,69,91,-47,-65,33,-10,45,86, 
  /* [2][0][][] */ 11,20,45,51,-36,-12,107,-92,-29,43,4,20,47,-98,-71,94,-3,-45,58,-68,-127,-31,15,98,-100,43,26,-6,-103,-102,-78,-18, 
  /* [3][0][][] */ 2,55,26,11,-57,56,85,-15,16,-78,-91,-70,28,90,-71,-46,-106,32,3,110,66,-76,-88,-92,-44,28,50,23,127,-24,-53,-1, 
  /* [4][0][][] */ -64,-127,-119,-39,40,-115,-39,35,-70,-93,-3,43,-73,-33,-63,-64,-63,48,-6,45,-52,74,19,-24,-55,-100,-39,41,-72,-22,84,-88, 
  /* [5][0][][] */ -32,-17,-40,79,-70,-2,35,-3,-28,103,98,-33,18,-10,36,-8,36,-64,19,94,-73,-62,75,-112,-4,39,-127,85,28,38,106,70, 
  /* [6][0][][] */ 67,-86,10,-10,-52,-23,-79,-127,86,20,15,-16,82,-81,52,21,-100,-85,52,-35,-86,-65,-57,31,-57,72,77,80,-35,50,67,51, 
  /* [7][0][][] */ -30,-83,38,81,66,120,43,53,-31,-43,-70,-72,-56,-18,-90,127,-16,-11,114,54,75,-80,21,-44,71,-107,-75,18,4,-98,119,0, 
  /* [8][0][][] */ 29,9,-17,76,4,20,50,-36,-57,23,-69,33,-11,53,99,32,35,4,-7,-16,-73,-87,-34,34,36,-62,-65,-12,-49,-68,-89,-127, 
  /* [9][0][][] */ 27,-38,-33,6,40,-37,15,-64,-69,27,-37,-44,-106,50,10,-15,21,91,37,-52,-35,13,-80,40,38,51,-4,67,127,-71,54,25, 
  /* [10][0][][] */ -22,26,-6,-44,-48,-60,-32,39,114,-55,39,67,97,78,-46,31,-62,-23,9,17,29,-1,-28,-21,127,42,90,70,73,47,113,76, 
  /* [11][0][][] */ -3,83,-39,67,11,-78,127,69,-59,-27,30,-70,-27,48,-13,-7,55,-39,90,94,6,-19,-7,21,-70,-73,15,1,88,-109,13,36, 
  /* [12][0][][] */ -89,8,9,-107,-7,34,-76,47,71,16,12,30,-24,-16,-28,45,127,29,28,-14,-59,-13,90,-85,-72,-63,-70,24,-5,-85,-77,88, 
  /* [13][0][][] */ 23,-66,55,-127,-57,100,-2,86,12,-93,-29,40,18,-92,7,94,-23,2,55,-50,-58,15,10,-6,-62,-58,54,88,81,-96,61,-54, 
  /* [14][0][][] */ 46,-37,56,-6,-21,51,16,-55,87,35,-101,61,9,31,-11,38,-28,-58,-21,79,15,29,-7,50,72,-127,63,86,63,-54,-19,27, 
  /* [15][0][][] */ 56,41,-7,35,-25,-102,47,11,-40,-53,89,63,-40,-51,22,41,109,-127,-17,4,85,72,-67,20,-57,18,10,10,31,-2,67,115, 
  /* [16][0][][] */ 39,46,52,10,-8,-27,49,6,47,-20,61,78,108,39,56,31,4,-4,-67,-100,-75,29,13,-20,116,26,127,-36,101,-40,-23,35, 
  /* [17][0][][] */ 42,-78,-80,126,40,-95,29,-59,55,26,-22,-10,-69,15,-125,127,-103,-21,47,-65,14,119,-43,-4,-101,-50,105,60,-9,13,70,59, 
  /* [18][0][][] */ 49,-36,-34,-59,66,3,68,10,41,1,-46,22,19,28,48,-18,-22,-127,-25,75,76,-43,24,-90,81,17,-58,16,11,52,33,14, 
  /* [19][0][][] */ -16,-55,-53,-22,-30,-62,-68,-99,18,51,86,-84,-4,-54,-28,-94,-47,-81,117,-111,-127,26,-43,124,-7,9,-65,43,69,-43,-47,20, 
  /* [20][0][][] */ -58,-108,11,53,68,68,-66,43,127,84,-36,-61,-34,-46,16,-38,35,-19,-49,48,80,-59,-97,21,-80,28,31,-20,-97,32,22,28, 
  /* [21][0][][] */ 7,-127,-9,41,20,-14,70,-18,19,19,77,-41,-10,-19,5,-105,9,8,10,43,-55,-35,27,-84,-64,-8,6,-26,17,-69,-10,-4, 
  /* [22][0][][] */ 23,-32,-79,-20,-123,0,-16,45,-27,41,94,39,-52,10,-43,14,22,-57,-127,-61,-37,-17,-75,39,-61,59,-5,-36,20,-100,53,-29, 
  /* [23][0][][] */ 39,90,38,64,-9,14,127,-47,1,67,-5,-25,-100,-37,-55,-15,5,-8,-3,71,26,3,64,10,29,42,-75,1,77,-33,55,51, 
  /* [24][0][][] */ -47,12,-82,-22,-9,21,-59,-65,94,67,-50,35,-83,51,-49,7,40,-71,-87,55,63,58,127,-58,-2,-5,-104,50,-37,38,-3,99, 
  /* [25][0][][] */ 13,78,-22,56,-43,8,127,108,-84,5,68,76,71,-14,-40,9,80,5,3,33,-30,-88,-11,-19,34,54,-107,-3,-12,43,-7,34, 
  /* [26][0][][] */ -25,-66,-68,-104,-21,58,53,40,-68,-71,110,70,-2,-37,67,75,27,-91,-8,127,98,40,51,-14,-37,9,-12,61,-43,14,-36,-57, 
  /* [27][0][][] */ 127,17,-44,-82,19,-95,70,-93,27,-17,-52,-79,-54,-2,10,12,-98,6,11,38,-80,-79,91,85,-50,-17,24,83,-31,-7,-5,-36, 
  /* [28][0][][] */ 42,-10,-24,34,54,-52,-54,40,19,-38,30,-94,-57,-12,-76,-17,-48,-18,-18,29,-70,31,-25,-127,-68,-100,-31,-38,-73,55,2,-38, 
  /* [29][0][][] */ -21,35,17,-105,29,-62,41,-127,19,95,-121,26,11,33,40,-42,110,-1,43,77,99,43,-69,32,-40,-79,64,18,-33,5,-76,-111, 
  /* [30][0][][] */ 3,66,75,-29,-77,-31,-37,84,66,11,68,76,76,77,-26,-82,42,85,78,-40,8,54,54,-30,127,22,-53,78,-19,72,-30,57, 
  /* [31][0][][] */ 5,-54,-56,-87,-77,-54,-14,98,-79,57,13,32,-14,-127,2,-31,21,43,-58,30,-13,-4,-24,24,-118,-30,-13,-57,-24,-74,-18,-70, 
  /* [32][0][][] */ 109,40,13,82,2,70,127,-4,55,125,115,67,-70,85,19,-61,17,56,-69,41,-70,11,8,27,-2,66,21,94,64,-2,61,-68, 
  /* [33][0][][] */ -40,-51,-88,53,50,-49,111,95,75,15,-13,-105,39,16,-9,81,111,-116,-4,10,-49,28,127,-89,12,95,-73,-15,-58,71,-76,50, 
  /* [34][0][][] */ -17,12,54,-39,15,119,-10,47,15,-5,99,-40,-17,-50,80,14,-31,-39,-39,34,-88,-48,41,-1,-85,60,103,-127,-15,-82,21,6, 
  /* [35][0][][] */ 51,-81,-57,-44,13,43,55,-4,-127,-21,74,14,59,-23,-67,14,97,87,40,-54,64,-41,27,27,76,41,6,-40,55,-39,53,-34, 
  /* [36][0][][] */ -78,22,5,40,8,-16,-55,101,41,-105,-12,70,-24,47,-40,-12,-96,-103,43,18,85,99,96,-59,-44,-127,48,91,25,-50,60,-53, 
  /* [37][0][][] */ 45,-28,-7,-57,74,-34,13,-65,12,44,-8,45,-75,26,-26,96,-27,29,-40,-12,-25,127,-67,-24,22,-3,-29,50,-61,20,-85,41, 
  /* [38][0][][] */ 50,37,37,40,-30,-74,127,-47,-77,33,79,116,48,-24,-42,-38,81,1,-64,-39,-47,-69,93,-24,72,38,67,-44,122,60,-23,-50, 
  /* [39][0][][] */ -21,123,127,60,-82,109,-33,106,30,18,-39,-51,13,-12,22,-61,-5,-5,-53,-121,4,106,119,55,7,-64,14,63,101,-70,33,-43, 
  /* [40][0][][] */ 42,68,-115,-100,74,-38,93,73,13,-37,-29,-5,66,18,107,-5,-75,16,-17,-6,-127,67,-16,-61,-65,59,56,-75,28,3,-75,-6, 
  /* [41][0][][] */ 42,110,27,-44,-52,-1,-124,3,118,-92,9,116,4,-42,40,-87,-68,-56,45,-57,-47,31,-76,71,96,41,35,127,-23,86,99,45, 
  /* [42][0][][] */ -11,71,-64,-44,17,-39,61,-24,46,101,4,-72,-73,49,17,-73,8,1,-27,127,-87,25,96,48,37,70,-105,-18,49,-104,-2,19, 
  /* [43][0][][] */ -44,-36,-2,-25,-21,-98,33,2,-127,-38,-8,6,60,-117,1,-114,-46,-14,73,-31,-43,-26,-33,99,60,-65,47,-3,27,107,18,49, 
  /* [44][0][][] */ -79,27,-115,-78,30,-100,-48,-34,-68,24,58,-13,-119,-54,-27,-59,-3,-72,49,47,-23,15,-78,-6,37,-9,-127,-69,-15,49,-70,72, 
  /* [45][0][][] */ -21,-101,-48,-6,39,-88,-20,24,-121,65,33,14,-124,-86,4,-118,-82,12,-37,-40,19,11,-116,50,-7,104,-82,-69,-127,-16,17,-3, 
  /* [46][0][][] */ 67,32,101,55,63,44,-6,-18,39,105,-27,-112,48,-20,10,25,-14,60,-91,-64,-127,-89,53,56,25,26,-54,-68,-77,-65,-75,-58, 
  /* [47][0][][] */ -18,-14,6,9,29,37,45,12,37,9,56,-45,-28,25,58,-34,45,2,0,98,25,65,63,75,120,-35,5,127,20,72,-36,12, 
  /* [48][0][][] */ 5,-11,-44,-88,-25,-44,49,-61,-42,-105,25,-75,-67,-10,-49,-54,-21,-46,-28,58,0,42,-43,-60,-67,101,-127,59,70,7,-20,-40, 
  /* [49][0][][] */ 56,73,54,48,-63,41,-27,-54,79,-91,-40,25,-11,-7,18,-20,-4,-106,-6,-3,44,-30,-4,73,-18,-3,94,127,29,-5,60,47, 
  /* [50][0][][] */ 44,100,81,122,-71,-2,109,31,-2,-72,87,-27,48,-55,127,-5,54,-53,-31,49,35,-71,126,-64,49,61,91,71,15,-7,110,56, 
  /* [51][0][][] */ -42,80,-3,27,-33,8,59,-18,-25,101,107,14,-87,-50,-80,70,-39,10,-91,56,-13,52,127,-55,-96,116,-42,-93,-57,-14,-1,75, 
  /* [52][0][][] */ -83,0,-100,-21,-84,-32,6,-69,-99,-10,18,-6,-30,-127,-13,23,-59,19,-59,18,-64,11,8,-15,-45,4,34,-76,29,61,33,6, 
  /* [53][0][][] */ 4,40,-70,8,-6,73,-41,-96,23,29,51,2,-7,13,40,-5,82,6,-78,47,63,69,-71,-127,-20,36,-45,-73,-31,-21,12,4, 
  /* [54][0][][] */ 4,-47,-66,52,-23,-127,-35,-27,-50,-21,-33,85,-106,-74,-29,65,70,-65,-85,-26,90,-103,-31,-1,2,9,18,-4,-84,-42,-26,-35, 
  /* [55][0][][] */ -42,97,68,112,40,39,-11,108,104,92,72,74,41,57,57,78,65,82,-35,44,23,-110,-76,-77,30,96,127,-61,25,79,-94,-45, 
  /* [56][0][][] */ 58,96,40,122,17,7,27,0,14,44,-23,33,-46,-55,-71,43,27,-29,-48,-21,95,-30,77,36,-9,64,-24,127,17,44,32,-50, 
  /* [57][0][][] */ 118,102,-59,60,56,74,42,88,-42,0,100,-70,-3,11,-21,81,49,-9,9,16,92,-31,35,-68,-5,14,-71,-31,100,-25,43,127, 
  /* [58][0][][] */ 7,-49,-8,52,28,93,64,38,-18,64,-12,-68,56,-4,-26,-59,-26,-26,-14,-88,-89,-68,-84,39,-127,89,-49,69,14,-54,63,-66, 
  /* [59][0][][] */ 68,-40,-65,14,126,-8,-32,-56,12,-81,5,-127,89,-63,21,25,99,91,-7,-24,86,-86,-13,-18,67,121,-58,62,-33,5,-109,6, 
  /* [60][0][][] */ 34,-57,-78,-21,20,28,-58,3,-85,-52,-14,42,-124,-55,21,-127,-27,-73,-12,30,83,-98,-125,112,-40,4,-39,-70,-41,-55,20,-76, 
  /* [61][0][][] */ -62,-89,-4,-98,34,89,-127,-19,-100,120,-109,10,96,-44,16,12,-92,75,110,-6,-78,-52,-82,100,-107,114,-6,106,-13,75,51,-29, 
  /* [62][0][][] */ -30,-79,82,-28,105,-70,-59,-73,67,61,-72,61,-30,-28,-44,-29,-36,57,47,-102,-21,7,-7,102,-62,-75,-59,108,127,-67,1,71, 
  /* [63][0][][] */ -86,35,0,23,-40,34,-72,-10,-63,91,-78,-27,-88,126,119,-53,-62,29,-36,-1,90,6,-19,127,32,-20,85,-3,-30,93,-47,-95, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 64,1,1,32 } };
const TfArray<64, float> quant11_scale = { 64, { 0.021889187395572662, 0.0078209433704614639, 0.0076325768604874611, 0.0047597382217645645, 0.0039994833059608936, 0.0077660940587520599, 0.01322544738650322, 0.013962550088763237, 0.010610500350594521, 0.0089119365438818932, 0.0059798737056553364, 0.016883920878171921, 0.014678262174129486, 0.0135481096804142, 0.0073300483636558056, 0.0059355222620069981, 0.0061783585697412491, 0.01134683471173048, 0.01176045648753643, 0.0059542981907725334, 0.01000254787504673, 0.0089527154341340065, 0.0074503174982964993, 0.011455019004642963, 0.023751778528094292, 0.0113404281437397, 0.0078638121485710144, 0.0064030368812382221, 0.0044441935606300831, 0.0041353907436132431, 0.0043821125291287899, 0.0052562984637916088, 0.0038954657502472401, 0.005975610576570034, 0.017743213102221489, 0.0052533620037138462, 0.014565000310540199, 0.0097748395055532455, 0.0084525821730494499, 0.0086428383365273476, 0.015958527103066444, 0.01136934757232666, 0.013862569816410542, 0.0059108869172632694, 0.0042759585194289684, 0.0046561704948544502, 0.016178220510482788, 0.0058196443133056164, 0.0049135470762848854, 0.008963264524936676, 0.0052060475572943687, 0.017689477652311325, 0.0039696712046861649, 0.005236464086920023, 0.0051307273097336292, 0.0029057690408080816, 0.0063664945773780346, 0.0049042031168937683, 0.01093192957341671, 0.0064886361360549927, 0.0046363989822566509, 0.0074222683906555176, 0.0065159243531525135, 0.0072828470729291439, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[32] = { 119, -2680, -735, 377, -381, -1670, -1617, 335, 1343, -1888, -944, -2907, -1773, -505, -500, -1006, -1223, 893, -2931, 8, -2311, -188, 409, 1831, -5055, -330, -2696, -4956, 1664, 2951, -443, 230, };
const TfArray<1, int> tensor_dimension12 = { 1, { 32 } };
const TfArray<32, float> quant12_scale = { 32, { 0.00013368073268793523, 0.00015933540998958051, 0.00016342833987437189, 0.000156311274622567, 0.00019488351244945079, 0.00020180527644697577, 0.00016004688222892582, 0.00010949141869787127, 0.00019894471915904433, 0.00012799438263755292, 0.00019595082267187536, 0.00018145170179195702, 0.00018262496450915933, 0.00017312592535745353, 0.00015576729492750019, 0.00017641414888203144, 0.00023239963047672063, 0.00015102271572686732, 9.0968635049648583e-05, 0.00018067113705910742, 0.00018074589024763554, 0.00021131538960617036, 0.00020584002777468413, 0.00013099584612064064, 0.00015788870223332196, 0.00016166128625627607, 0.000169728635228239, 0.00010668762843124568, 0.00012996375153306872, 0.00016172631876543164, 0.0002158817951567471, 0.00013943966769147664, } };
const TfArray<32, int> quant12_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[32*1*7*1] = { 
  /* [0][0][][] */ 14, -127, -99, 124, -51, 7, 91, 
  /* [1][0][][] */ -127, -110, -85, 77, -92, 48, 5, 
  /* [2][0][][] */ 55, -123, -52, 44, 92, 127, 3, 
  /* [3][0][][] */ -92, 71, 89, -30, 127, 96, 24, 
  /* [4][0][][] */ 127, -119, -22, 87, -68, -74, -90, 
  /* [5][0][][] */ -54, 99, -4, 2, -127, -14, 1, 
  /* [6][0][][] */ 34, -127, -92, -108, -102, -46, -69, 
  /* [7][0][][] */ 127, 80, -46, 82, -46, 0, 112, 
  /* [8][0][][] */ 98, 37, -32, -127, -59, 0, 11, 
  /* [9][0][][] */ -100, 101, -2, -127, -75, -37, -67, 
  /* [10][0][][] */ 68, -106, -13, -117, -65, 3, -127, 
  /* [11][0][][] */ -24, -63, -117, -4, 41, 127, 87, 
  /* [12][0][][] */ -57, 94, -7, 81, -86, -127, -3, 
  /* [13][0][][] */ 16, 16, 65, 78, 73, -63, -127, 
  /* [14][0][][] */ 89, -78, -68, -60, 127, 56, -10, 
  /* [15][0][][] */ 8, 17, -61, -127, 122, 55, -14, 
  /* [16][0][][] */ -8, 88, 16, -127, 0, 79, -15, 
  /* [17][0][][] */ -31, -75, -13, 57, 127, 84, -90, 
  /* [18][0][][] */ -127, 123, 73, -115, 124, -117, -110, 
  /* [19][0][][] */ -28, 127, 48, 127, 46, 38, 85, 
  /* [20][0][][] */ 25, 0, -84, -85, -127, -62, 3, 
  /* [21][0][][] */ -24, -92, -34, -63, 4, 127, 6, 
  /* [22][0][][] */ -5, -69, -73, 34, -11, -36, 127, 
  /* [23][0][][] */ 105, -56, 123, -34, -49, -127, 39, 
  /* [24][0][][] */ -1, 37, -121, 54, -127, 93, -120, 
  /* [25][0][][] */ 96, 93, -112, 53, 127, -12, -51, 
  /* [26][0][][] */ -26, 33, -84, 127, -20, 45, -109, 
  /* [27][0][][] */ -125, 30, -120, 74, -54, 125, -127, 
  /* [28][0][][] */ 127, 29, 101, 83, -21, 0, 78, 
  /* [29][0][][] */ 17, 12, 127, -117, 79, -92, 17, 
  /* [30][0][][] */ 8, -127, 5, -113, -5, 57, -5, 
  /* [31][0][][] */ 45, 88, -127, 9, 41, -32, 106, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 32,1,7,1 } };
const TfArray<32, float> quant13_scale = { 32, { 0.00086965120863169432, 0.0010365460766479373, 0.0010631723562255502, 0.0010168727021664381, 0.0012678018538281322, 0.0013128309510648251, 0.0010411745170131326, 0.00071228924207389355, 0.0012942218454554677, 0.0008326590177603066, 0.001274745212867856, 0.0011804221430793405, 0.0011880546808242798, 0.0011262593325227499, 0.0010133339092135429, 0.0011476506479084492, 0.001511860522441566, 0.00098246836569160223, 0.00059179047821089625, 0.0011753442231565714, 0.0011758304899558425, 0.0013746983604505658, 0.0013390787644311786, 0.00085218489402905107, 0.0010271345963701606, 0.0010516769252717495, 0.0011041584657505155, 0.00069404934765771031, 0.00084547069855034351, 0.0010520999785512686, 0.0014044048730283976, 0.000907115638256073, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,1,1800,1 } };
const TfArray<1, float> quant14_scale = { 1, { 0.15371763706207275, } };
const TfArray<1, int> quant14_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,1,900,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.022163683548569679, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,900,1,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.022163683548569679, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,450,1,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.022163683548569679, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,450,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.022163683548569679, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,450,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.10996168851852417, } };
const TfArray<1, int> quant19_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,450,64 } };
const TfArray<1, float> quant20_scale = { 1, { 0.061261165887117386, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,450,64 } };
const TfArray<1, float> quant21_scale = { 1, { 0.083368830382823944, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<3, int> tensor_dimension22 = { 3, { 1,450,64 } };
const TfArray<1, float> quant22_scale = { 1, { 0.083368830382823944, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<2, int> tensor_dimension23 = { 2, { 1,64 } };
const TfArray<1, float> quant23_scale = { 1, { 0.016386920586228371, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<2, int> tensor_dimension24 = { 2, { 1,5 } };
const TfArray<1, float> quant24_scale = { 1, { 0.063390009105205536, } };
const TfArray<1, int> quant24_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,5 } };
const TfArray<1, float> quant25_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 14 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 14,13,12 } };
const TfArray<1, int> outputs1 = { 1, { 15 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 15,2 } };
const TfArray<1, int> outputs2 = { 1, { 16 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 16 } };
const TfArray<1, int> outputs3 = { 1, { 17 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 17,3 } };
const TfArray<1, int> outputs4 = { 1, { 18 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 18,11,10 } };
const TfArray<1, int> outputs5 = { 1, { 19 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 18,9,8 } };
const TfArray<1, int> outputs6 = { 1, { 20 } };
const TfLiteAddParams opdata7 = { kTfLiteActRelu };
const TfArray<2, int> inputs7 = { 2, { 20,19 } };
const TfArray<1, int> outputs7 = { 1, { 21 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 21,4 } };
const TfArray<1, int> outputs8 = { 1, { 22 } };
const ALIGN(1) uint8_t opdata9[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs9 = { 2, { 22,5 } };
const TfArray<1, int> outputs9 = { 1, { 23 } };
const TfLiteFullyConnectedParams opdata10 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs10 = { 3, { 23,7,6 } };
const TfArray<1, int> outputs10 = { 1, { 24 } };
const TfLiteSoftmaxParams opdata11 = { 1 };
const TfArray<1, int> inputs11 = { 1, { 24 } };
const TfArray<1, int> outputs11 = { 1, { 25 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension0, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 320, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28800), (TfLiteIntArray*)&g0::tensor_dimension15, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 43200), (TfLiteIntArray*)&g0::tensor_dimension17, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28800), (TfLiteIntArray*)&g0::tensor_dimension18, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 57600), (TfLiteIntArray*)&g0::tensor_dimension19, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28800), (TfLiteIntArray*)&g0::tensor_dimension21, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 29056), (TfLiteIntArray*)&g0::tensor_dimension23, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension24, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension25, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[12] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[12] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_ADD, OP_RESHAPE, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 26, };
const size_t tflNodes_subgraph_index[] = {0, 12, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  25, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_12_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 26;
  for (size_t i = 0; i < 26; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_invoke() {
  for (size_t i = 0; i < 12; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
