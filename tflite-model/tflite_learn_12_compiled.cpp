/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 13.04.2024 17:16:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 10
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 20
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 62048;
#else
constexpr int kTensorArenaSize = 61024;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_ADD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.15371763706207275, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 1800, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 900, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[3] = { 1, 450, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 1, 450, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[3] = { 1, 225, 64, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const int32_t tensor_data6[1] = { 1 };
const int tensor_dimension6 = 0; /* empty TfLiteIntArray */
const ALIGN(16) int32_t tensor_data7[10] = { -578, 647, 855, 33, -739, 11, 582, 1197, -511, -1216, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<1, float> quant7_scale = { 1, { 0.00012694334145635366, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[10*64] = { 
  -45, -37, 44, -13, 50, -44, 61, 52, 21, 30, -81, 12, 22, -7, 21, -2, -45, -5, 71, 1, 26, 5, 23, -66, 31, 78, -15, -72, -40, 62, 42, -54, -81, -38, -72, -42, -9, -9, 13, 37, 15, -65, 77, -43, 49, -21, 47, 6, 28, -12, -34, 60, -21, -15, 7, 3, -30, -48, -77, 71, -73, -4, 23, 16, 
  -59, -25, 20, 66, -19, -41, -12, -93, -21, -75, -13, 8, 33, -7, -87, 62, 13, 61, -60, -24, 4, 56, -55, -10, 59, -52, -50, -70, -58, -43, -62, 14, 48, 50, -33, 46, 33, 20, 7, -2, -83, -78, 22, 17, -71, 40, 46, -69, -127, 19, 4, -15, -94, 40, -14, 66, 35, -55, 8, -63, -51, 66, 68, 69, 
  -30, -6, 27, 60, 52, -31, -25, -30, -12, -41, -23, -5, 32, -71, 1, -62, 41, -2, -16, 9, -5, -51, 16, -7, 57, -33, 18, 15, 19, -32, -32, -29, -25, 51, 56, 57, -18, -113, 60, 77, 33, -45, -20, 54, 50, 28, 18, -19, 26, -111, -17, -46, 15, -38, -26, -33, 25, 20, -32, -1, 31, 64, -51, -47, 
  23, 64, 29, -24, -31, -67, 7, -22, -37, -21, 64, 22, -27, 7, 54, -71, -42, -63, -90, 33, -65, -28, -53, -56, 39, -61, 74, 71, 30, -81, 6, 45, 53, -42, 14, 35, -4, -109, 43, 18, 57, 55, -80, -7, -42, -2, 28, 39, -27, -91, 21, -77, 79, -76, 9, -69, 38, -5, -11, -60, 11, -53, -42, -33, 
  42, -40, 10, -41, 3, 79, -36, 22, 39, 60, 34, -71, -54, -7, -34, 68, -30, -41, -20, 37, -62, -8, -16, 47, -102, -7, -35, 27, -41, 9, -7, -20, 57, 15, -30, -39, 11, 70, -79, -57, 11, 40, -1, 33, -30, -66, -94, -15, 2, 55, -1, 1, -26, 48, 1, 44, -45, 5, 53, 26, 50, 17, 46, 35, 
  50, 34, -51, -37, 43, 4, 9, -29, -8, 0, 41, 38, 47, -32, -34, -15, -57, -74, 25, 53, 24, -46, 25, -17, -35, -14, 56, 32, 37, -22, 47, -5, 19, 17, 14, -63, -6, -2, -19, -27, -48, 17, -32, -42, -52, 20, 2, 60, 9, 19, 43, -56, 50, -52, -47, -18, -57, 10, 42, -5, 25, -32, 65, 67, 
  -75, -76, -4, 19, -7, 48, -15, 20, 84, -41, -36, -54, 40, 25, -43, -69, 61, -2, 20, -99, -28, 21, -1, 58, -35, -34, -64, -71, 13, 56, 55, -5, -30, 49, -81, 56, 46, 2, -52, 35, -16, 14, -2, 54, 30, -34, 29, -21, 16, 47, -65, 38, -90, 59, -67, 19, -18, -59, 30, 60, -50, -16, -25, -69, 
  -66, -33, 38, -20, -56, 44, -55, -17, 61, -61, -9, 70, 48, 53, 31, -69, 46, 40, -111, -88, -64, 72, -13, 0, 15, -15, -92, 10, -15, -68, 19, -34, -12, -31, -25, -4, 7, -40, -23, 1, 54, -58, -58, 24, 50, 54, 51, 69, 52, -4, -63, -65, -24, 76, 42, 54, 40, 1, -29, -46, -50, -34, -108, -77, 
  46, -7, -14, 14, -31, -66, -39, 87, -25, 37, 39, 5, -58, -8, 67, -44, -5, -50, 41, -8, -38, 20, 77, 12, 11, 8, 39, 63, 25, 1, 38, -29, -44, 10, 14, -62, 63, -83, -56, -2, -6, 19, -43, 47, 48, -21, -80, -43, 68, -75, 30, 30, 57, 3, 35, -83, -53, 59, -32, 24, 26, -23, -59, -13, 
  -22, -41, -86, -43, -34, 40, -53, 12, 23, -30, 46, -2, -57, 34, -35, 81, -46, -5, 31, -13, 16, -52, -43, 62, -22, 34, 39, -39, 50, 32, 9, 31, 8, -52, 6, 16, -112, 79, -23, -38, 17, -23, 66, -104, -8, -35, 25, -47, -5, 52, 68, 45, -4, -6, 39, -15, 32, -43, 6, 62, -38, -35, 74, 24, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 10,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0069654532708227634, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { -35828, -4877, 1895, 26663, -16460, -21800, -12553, -13945, -2251, -25840, -28581, 26396, 4563, -12415, -3135, -29181, 3461, 42511, -26562, -47194, -6942, -2406, -19865, -23354, 31033, -5348, -14310, -17653, -30124, -29145, -19921, -5246, -11187, -3474, -14613, 39929, -13293, -34440, 25327, -3414, 9633, -24418, -27825, -12950, -10005, 32398, 45796, 3731, -7212, -30010, -27445, -23015, -13924, -2193, -2150, -5183, 60284, -18722, -17183, -29674, -25449, 10672, -11939, -9408, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 8.1583297287579626e-05, 9.5630610303487629e-05, 0.00013202433183323592, 0.00012673753371927887, 0.00011338813783368096, 0.0001242344151251018, 0.00011432255269028246, 0.00018894967797677964, 9.7361335065215826e-05, 0.00012537505244836211, 0.00011157363769598305, 0.00014043394185137004, 0.00016649550525471568, 0.00010677769023459405, 0.00013138198119122535, 0.00010991394810844213, 0.0001264085149159655, 0.00010567595018073916, 0.00010980178194586188, 7.1076319727580994e-05, 0.00015463819727301598, 0.00014748722605872899, 0.00012246929691173136, 0.00012779769895132631, 0.00012780443648807704, 0.0001070364160113968, 0.000102043486549519, 0.00021833299251738936, 0.00010377325816079974, 0.00011897689546458423, 0.00016231629706453532, 9.302445687353611e-05, 0.000135684764245525, 0.00013633364869747311, 0.00015324300329666585, 0.00010943142842734233, 0.00015144783537834883, 9.8609743872657418e-05, 0.00011275331053184345, 0.00016515322204213589, 0.00012135463475715369, 0.00017537889652885497, 0.00011626862396951765, 0.00014237084542401135, 0.00015870451170485467, 0.00011476303188828751, 0.00011489120515761897, 0.00016502845392096788, 0.00016626599244773388, 0.00011116214591311291, 0.00011570529022719711, 0.00015976063150446862, 0.00013498465705197304, 0.00010030062549049035, 9.5697592769283801e-05, 0.00013381359167397022, 0.00010104388638865203, 0.00015654689923394471, 0.00011084610741818324, 0.00014021474635228515, 0.0001191667906823568, 0.00016858419985510409, 0.00014905414718668908, 0.00013329113426152617, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[64*1*3*32] = { 
  /* [0][0][][] */ 74,44,70,105,77,-68,65,33,-29,20,50,86,48,-1,-115,-103,-15,97,-61,53,-20,-40,39,-33,33,91,-6,-3,-49,72,2,51, 110,123,-46,68,16,-64,39,-25,-54,14,39,96,40,-2,-116,-106,-40,106,-62,17,34,20,46,-9,35,125,38,-97,-68,-15,8,71, 85,29,-56,52,25,-63,-36,65,-65,32,53,107,76,-17,-97,-127,-46,58,-95,-7,22,-28,45,28,31,78,31,-7,-61,-16,18,30, 
  /* [1][0][][] */ -24,-38,4,23,86,-39,-60,-49,-3,-7,33,-1,76,-27,-96,-21,-76,-10,21,-5,4,51,56,-56,-23,69,16,22,-60,38,11,69, 42,-40,62,11,38,7,45,-30,36,4,49,3,64,-33,-80,12,-85,0,0,-16,40,14,18,-24,-21,-20,35,-59,-78,-8,-9,127, -13,52,-40,-1,9,8,52,29,48,-3,22,19,76,-46,-122,-14,-52,-5,23,20,24,32,11,-53,-26,-8,24,51,-78,57,44,15, 
  /* [2][0][][] */ -60,34,-10,-2,-97,12,46,86,44,10,-11,-39,16,-49,23,26,12,-24,83,-28,44,-66,29,-123,-64,-47,-33,56,-18,99,20,46, -61,-12,-42,4,-66,31,40,55,54,10,-6,-41,-2,-70,0,16,13,-29,92,-28,45,-96,40,-127,-36,-85,-48,91,-32,46,43,78, -31,-18,-10,41,-47,36,74,65,67,-21,-23,-42,46,-49,42,46,-9,-13,90,-7,65,-71,87,-102,-32,-49,-57,38,9,10,55,40, 
  /* [3][0][][] */ -7,-44,-3,-49,-21,29,47,6,-119,-23,-44,-70,-100,48,43,-9,1,-40,5,-9,-23,-86,45,-8,-111,-41,83,-81,51,24,-60,-53, 0,-96,25,-38,15,40,-4,-17,-105,24,-25,-86,-69,51,-5,-32,40,-44,82,-84,-66,0,22,24,-127,-23,90,-18,75,-3,-43,-63, 58,-6,13,32,45,26,48,57,-92,-27,-40,-50,-28,32,10,19,23,-30,-5,-35,-44,-14,66,-33,-63,-23,100,-100,55,-46,-78,-15, 
  /* [4][0][][] */ -16,43,41,29,11,17,-25,126,5,8,-18,-15,84,18,10,60,25,61,-24,-9,-45,20,-46,-49,-8,-37,-40,-18,-55,-16,58,27, -12,20,64,0,93,87,-2,64,-24,17,-3,-20,34,-5,13,70,15,39,31,17,-39,-2,-39,-6,29,-80,-33,-30,-75,54,16,3, -36,11,43,24,78,44,83,62,8,-15,-14,-25,48,10,20,127,7,64,26,28,-38,7,-36,-49,35,-60,-69,-39,-72,3,46,-7, 
  /* [5][0][][] */ -56,-5,-1,-33,0,-3,75,-19,71,-58,15,-11,-66,40,-2,-54,-56,19,-25,5,-50,51,12,21,100,25,4,-8,35,-44,74,-20, -61,-15,5,10,-2,25,76,-72,80,-65,29,6,-81,74,5,-34,-56,10,-32,78,-60,64,10,84,127,56,-10,2,69,-11,102,-29, -48,23,-36,-2,-7,5,63,-50,81,-72,39,19,-66,61,-1,-38,-52,13,-29,50,-53,53,21,93,96,110,0,16,53,31,95,-18, 
  /* [6][0][][] */ -29,-51,-13,-1,58,55,57,127,6,-1,6,13,83,-1,27,85,-12,53,4,2,76,-15,107,-27,-79,-120,-34,15,-57,31,4,-49, -13,5,4,-2,-30,64,19,42,8,0,4,20,71,7,-12,117,-32,46,48,20,58,-4,70,11,-78,-114,-57,-14,-74,15,14,-36, 11,-30,33,-1,-21,85,6,64,13,-10,-16,1,54,3,6,51,-25,59,43,29,16,17,113,-11,-61,-91,-50,-8,-61,25,6,-52, 
  /* [7][0][][] */ -16,44,27,-12,11,-6,-4,-12,7,14,-14,-18,18,-30,-22,-10,51,13,80,0,-15,-7,8,12,15,-4,16,27,15,15,-4,-11, -29,19,20,-18,-35,24,-64,21,-14,10,-15,-5,33,-38,-31,-24,82,13,127,8,-12,4,4,3,-1,-37,8,7,16,63,27,-12, -19,4,32,-2,-22,23,-15,-13,-16,17,-40,-16,49,-34,-36,-27,54,15,98,-18,-6,-3,5,5,4,-5,-7,52,5,62,18,-21, 
  /* [8][0][][] */ -55,-127,42,-7,63,71,13,-25,0,-86,-40,-46,21,-7,46,-24,-6,56,-1,111,2,-21,29,-23,97,-11,-23,-93,45,30,82,-27, -47,-92,15,-36,-19,49,73,-95,-8,-61,9,-44,26,-9,59,-10,-34,64,1,27,-16,-10,73,-25,105,-53,-13,-85,55,-106,120,-48, -41,-55,-75,-51,78,0,1,-25,-1,-64,47,-32,5,-23,29,-21,-2,55,-15,77,-5,3,93,-38,121,7,-23,-114,34,9,125,-44, 
  /* [9][0][][] */ -15,94,-9,49,2,-14,-16,-5,-38,34,6,55,46,-29,-127,-25,22,21,85,-7,1,20,-8,-3,-14,-45,-36,52,-4,37,54,23, -6,126,29,33,21,-85,-38,100,-64,68,-39,95,-2,-33,-101,-36,-5,25,119,36,24,-28,-27,41,-9,-40,23,5,-21,85,52,22, 16,111,-20,60,-3,-12,-12,82,-27,64,-28,79,63,-24,-83,-31,0,51,66,6,-24,32,11,-35,-4,-86,34,-16,0,82,26,19, 
  /* [10][0][][] */ 68,26,-27,43,52,-47,-5,-22,43,5,21,43,8,-9,-80,-121,-27,16,-29,13,61,48,11,-6,40,77,35,-26,36,-4,6,6, 58,55,17,20,5,-78,10,19,40,8,47,59,-19,-14,-73,-112,-39,34,-47,15,88,40,13,11,46,127,23,-5,40,-6,-11,-3, 35,-21,34,58,42,-81,-37,-46,23,30,18,45,-11,-11,-49,-98,-40,40,-28,58,64,43,22,54,10,75,34,1,39,-7,-17,27, 
  /* [11][0][][] */ 4,-61,42,-57,-27,-20,-38,-106,79,-52,-20,68,4,-58,-71,62,-11,-24,7,7,-31,64,-67,-14,15,44,-56,82,-116,-47,-45,38, -3,-64,113,-13,22,-22,-51,-87,99,-64,57,69,96,-84,-59,51,-31,-29,-13,44,40,88,-52,-1,11,61,-33,49,-102,-79,-68,13, 23,-36,88,-89,-35,-67,-10,-127,99,-96,5,95,25,-71,-57,23,-42,5,2,7,-18,59,-94,6,-4,34,-34,70,-108,-9,-13,73, 
  /* [12][0][][] */ 6,19,46,-21,-37,-1,127,-15,-15,71,37,-42,-31,2,-11,33,-42,-11,-3,5,-36,11,6,-67,-33,11,-22,66,-59,-19,-11,22, -4,-5,-17,-16,-33,13,51,20,-29,46,65,-42,16,-10,-16,45,-72,4,-14,44,-4,3,-4,-50,-37,55,-75,66,-57,-34,-21,34, -14,-3,38,-4,14,1,119,19,0,64,39,-52,-22,-2,-24,15,-50,-14,11,59,-42,17,-25,-3,11,28,-70,51,-74,14,3,15, 
  /* [13][0][][] */ -1,-41,-22,-90,27,-1,-51,31,55,-31,-20,-15,-41,-35,24,-16,6,46,0,-12,125,-42,92,-40,31,64,-92,-11,61,-36,93,-10, 4,-43,11,-47,64,45,-69,-18,98,-9,26,-38,-31,-33,-14,19,-38,52,-5,56,83,20,1,18,72,84,-100,-88,86,-54,127,-37, -20,-12,-71,-60,54,24,-39,37,73,-16,2,-51,-37,-35,-6,-5,-43,37,-19,53,90,1,18,-100,67,92,-71,40,90,-98,123,-32, 
  /* [14][0][][] */ -11,45,-29,-20,-91,-34,-83,-59,72,-43,-11,40,75,-89,-86,-61,35,-35,127,49,22,35,75,-42,-14,-10,41,15,-5,47,-35,107, 22,24,-24,-15,-31,-48,-56,-65,79,-46,12,49,126,-102,-84,-88,56,-40,115,42,35,30,73,-11,-44,-39,30,-18,-2,67,-18,55, 25,4,3,-25,-83,-36,-60,24,71,-65,25,43,41,-97,-93,-66,43,-32,99,5,84,34,59,-58,-26,-40,52,58,6,48,3,10, 
  /* [15][0][][] */ 28,74,-19,22,-43,-24,-5,-37,7,4,-14,96,-18,33,45,55,-29,8,-51,63,-14,5,-55,55,32,-59,46,43,42,-15,17,26, 27,36,-24,43,-29,23,40,15,-7,8,-41,127,-41,59,76,81,-18,32,-72,40,6,-21,-62,44,72,-29,14,-26,71,8,43,26, 27,92,-16,48,-11,-8,41,-9,26,4,-31,109,-57,38,52,70,-28,11,-74,70,-9,-37,-67,69,63,-41,28,41,71,-7,37,45, 
  /* [16][0][][] */ -32,-65,-58,-5,-36,-42,23,-61,37,17,-18,-88,29,7,-30,-32,58,45,5,14,-113,-48,53,-8,31,13,14,-37,25,127,10,12, -66,-65,-50,-47,-34,1,44,36,17,38,-41,-98,-4,13,-46,-33,79,31,9,-14,-89,-74,110,34,49,7,15,-50,56,44,3,-13, -32,-56,3,-18,-5,-8,85,0,37,12,-24,-95,25,30,-44,-29,74,30,-14,14,-47,-80,80,8,34,-36,18,-54,63,91,24,-57, 
  /* [17][0][][] */ 0,-75,0,6,30,6,-3,-44,47,0,-7,-80,-113,24,21,48,13,25,-16,-127,11,-111,-2,-3,-78,1,-14,2,-15,-23,-30,-27, 11,-29,24,-17,3,60,65,-87,64,1,-22,-101,-117,28,29,48,-16,29,-31,-44,-19,-103,63,-1,-70,33,-15,-93,-6,-73,-89,-33, 18,-70,-39,-16,53,91,-11,9,44,0,-52,-69,-103,28,52,51,-12,14,-31,-36,-3,-122,1,11,-68,8,-16,-67,40,-47,-64,-40, 
  /* [18][0][][] */ -29,-46,-23,-18,-71,97,23,63,-6,0,20,-43,27,31,57,73,90,74,45,15,-19,-21,-33,44,5,6,-23,57,-21,40,41,-30, -26,-25,-65,-19,-12,39,-15,13,7,17,16,-39,6,42,50,83,127,72,95,29,-23,-41,-28,-4,21,-41,-22,16,-2,-59,48,-52, -8,-34,-82,-35,-15,55,-23,15,1,20,11,-40,33,25,21,47,126,81,46,56,20,-38,-31,19,13,-6,-30,5,-6,36,43,-42, 
  /* [19][0][][] */ -27,48,86,95,127,44,44,51,1,-2,28,29,65,38,6,111,-37,75,-3,43,11,-8,25,23,-11,-89,7,-3,-69,7,-3,88, 37,54,103,124,33,71,85,74,-13,-25,46,60,89,26,-35,75,-37,69,-22,-14,68,-19,39,-13,14,-65,-15,-60,-101,22,37,74, -23,40,100,99,97,25,19,64,-7,-35,52,52,114,28,-89,79,-71,51,-12,22,15,-81,35,-60,-5,-69,-19,-30,-90,55,52,84, 
  /* [20][0][][] */ 7,9,-69,-1,-49,13,-4,-1,23,-5,7,-22,9,1,81,105,37,29,6,36,-14,-15,-28,1,14,17,-5,-8,0,-32,17,2, -10,-30,-43,-10,-10,24,7,8,12,-7,10,-20,-4,19,99,127,51,14,13,33,-12,-26,-47,3,1,-14,-16,-25,-4,-25,7,-18, -7,-7,-57,-10,-34,15,-9,13,26,9,9,-15,-15,13,72,112,75,32,6,20,3,-23,-41,-8,-4,-41,-14,-19,-3,-11,9,-9, 
  /* [21][0][][] */ -42,-39,38,-31,52,58,-24,-30,54,-2,57,23,6,-93,-2,-33,-2,-6,24,-31,-5,-17,94,3,63,-42,-43,-27,-5,-39,38,-17, -20,-53,94,-26,3,3,-37,-21,84,-21,-15,39,-19,-90,11,-50,-22,24,38,30,-9,8,112,28,48,-28,-37,-33,-5,-40,37,-13, -52,-18,82,-45,51,43,-39,57,50,-10,30,34,-8,-93,-5,-58,9,8,46,37,-16,-5,127,-50,44,-46,-43,12,6,-14,70,-39, 
  /* [22][0][][] */ -30,-7,59,-17,-10,-3,-35,44,-25,-2,-40,17,30,-4,-26,-114,54,24,96,-19,-4,-11,-58,3,60,25,-31,61,-10,58,55,0, -16,14,24,-17,-65,-29,-24,95,-30,22,0,12,73,-25,-45,-108,76,3,127,-9,-35,28,-56,60,19,46,-9,98,-13,14,21,11, -31,-54,-25,-17,-47,15,33,100,-47,23,-15,11,73,-23,-37,-115,100,21,100,-27,-8,2,-51,0,40,-5,-25,-31,-9,40,45,-5, 
  /* [23][0][][] */ -31,-24,-53,-35,15,9,36,-123,32,-55,12,1,-16,73,-2,-58,11,-30,2,35,-46,10,32,63,69,77,9,-33,30,25,-1,-23, -28,-40,-38,-19,-27,13,50,-41,18,-43,11,20,-16,91,23,-62,9,0,-33,27,-36,43,27,80,127,127,-20,-35,68,14,61,-71, -42,16,-34,-28,-39,36,38,-33,59,-47,5,12,5,75,18,-30,20,23,0,20,-22,-5,42,17,75,107,20,18,64,53,46,-35, 
  /* [24][0][][] */ 48,-103,22,-31,28,60,-50,-102,-10,-31,10,-46,81,-3,26,-5,-36,-64,8,-32,51,-50,2,-12,-117,9,41,-37,1,18,-63,-37, 57,-84,5,26,36,34,-41,-33,-14,-53,-37,-52,5,9,-13,0,-33,-54,34,-85,24,-83,12,-11,-127,20,43,40,-13,-31,-61,24, 30,-26,47,-2,85,41,-20,-45,8,-39,-40,-46,25,16,8,21,-47,-49,3,-41,80,-68,3,-51,-122,-17,29,11,2,27,-71,26, 
  /* [25][0][][] */ -33,-38,31,-1,-29,121,-27,-22,-2,-20,48,10,2,-28,14,114,79,-5,41,-28,39,7,-17,51,-29,-61,-16,48,-46,-7,46,-50, 6,-68,-59,6,35,127,-36,-32,12,-51,41,-4,-21,-13,15,105,105,11,127,63,-2,-55,-34,87,-9,-99,-25,-43,-43,-55,40,-42, -21,-33,14,42,-34,124,-50,23,45,-12,16,13,-33,-29,29,116,88,-4,95,36,14,-68,-18,5,-6,-102,-50,-19,-69,-54,39,-50, 
  /* [26][0][][] */ 17,-37,-44,47,123,-9,-22,-78,-22,-52,30,50,127,-17,-113,-21,-11,-49,48,2,51,-44,-6,-6,-44,-9,64,-90,-29,42,-47,58, 8,61,13,21,23,-10,-7,30,-11,-31,70,71,125,-17,-22,-95,-40,-61,52,53,122,-77,12,-25,-53,24,75,-39,-40,63,-14,89, 13,65,12,40,19,10,-4,-13,6,-42,47,47,125,-1,-57,-69,-57,-57,71,9,60,3,40,-16,-82,47,75,-54,-40,55,-9,53, 
  /* [27][0][][] */ 1,30,-6,41,40,-59,-17,-2,-8,15,24,55,-23,-23,-74,-82,-2,5,27,-18,6,6,15,-31,-4,61,-1,-3,7,10,12,35, 18,79,12,45,7,-72,12,50,-13,43,21,64,29,-22,-127,-95,-3,-3,27,13,-4,11,5,10,16,24,18,29,3,51,26,21, 0,83,37,15,28,-85,-11,45,7,24,18,63,30,-21,-120,-106,13,-3,31,-7,13,-9,22,8,-17,39,-6,7,-2,-8,15,3, 
  /* [28][0][][] */ -24,64,-64,-37,105,-25,-51,-75,-4,-31,88,-10,41,38,-38,-71,120,-72,-14,12,69,20,54,-15,1,110,-21,-88,24,-36,-33,12, -52,17,-19,-29,6,-27,-12,-96,68,-36,122,26,64,45,36,-112,64,-65,-9,96,74,26,22,55,9,97,-26,11,28,60,-54,40, -23,23,-32,-49,98,14,-13,-56,72,-10,87,14,127,50,21,-101,75,3,52,38,29,11,30,44,-29,63,38,-63,23,1,-33,76, 
  /* [29][0][][] */ -39,-44,-24,-55,9,94,4,-4,5,-9,7,-9,23,9,18,64,60,74,69,92,24,-33,20,35,39,1,-26,-32,3,-19,42,-49, -31,-99,-22,-61,5,126,21,-13,4,-3,-4,-16,19,21,43,77,93,72,125,54,23,-37,28,-5,41,-26,-54,-16,19,15,87,-70, -25,-31,-38,-71,-11,127,-10,55,-4,-4,-2,-20,46,3,18,46,76,74,99,39,45,-28,19,11,43,-8,-65,-14,6,18,46,-72, 
  /* [30][0][][] */ -13,-56,42,-74,38,-5,-29,6,25,-19,70,30,70,-98,-2,-18,24,23,52,75,37,-11,107,-31,35,43,-37,-19,-4,40,34,-60, -11,-21,-11,-92,54,0,-21,12,17,-18,70,40,54,-127,7,-24,28,37,38,52,56,-8,97,-12,62,54,-84,36,-8,-15,59,-68, -1,6,44,-92,17,-36,-19,41,43,7,71,24,115,-111,-25,-35,32,6,54,53,27,44,103,-10,27,61,-41,-14,-13,-49,59,-71, 
  /* [31][0][][] */ 13,64,20,25,80,21,-127,-59,70,9,-40,-20,-30,42,-6,-34,-62,-7,9,-23,99,80,44,-62,-63,15,105,31,57,17,-48,-65, 47,-4,-48,-9,-60,-22,18,-21,48,11,-39,-28,50,89,-65,-52,-81,25,-45,-11,88,54,23,-13,-52,67,45,-91,31,13,-6,-66, 33,-15,25,25,24,-37,14,7,75,57,-58,-28,-26,63,-49,-19,-61,24,-14,86,24,87,65,11,-82,29,69,-87,48,-78,-60,-20, 
  /* [32][0][][] */ 18,127,-27,18,93,-72,-13,90,-14,-8,-15,69,-35,71,-5,19,-52,26,-53,15,-75,-3,16,48,-13,39,39,42,12,6,26,-43, 41,124,4,54,94,-75,36,-23,22,11,-44,69,-65,97,-51,-14,-91,16,-76,-5,-45,33,24,6,53,2,20,5,20,-4,-10,-16, 17,49,18,32,51,-66,-34,65,-30,-5,-14,68,-40,106,-86,-17,-80,31,-66,-16,-82,15,28,-48,25,27,52,31,38,-1,12,-50, 
  /* [33][0][][] */ 33,-62,-68,4,35,-5,103,54,-47,27,-49,-26,-58,-3,-2,-54,29,-5,10,-37,-40,-5,32,-31,-58,80,43,-27,16,-13,6,-62, 20,-13,-36,-54,-50,50,127,49,-94,60,-49,-13,-64,54,-7,-82,20,15,-23,-1,-107,4,32,5,-55,36,19,24,44,-59,-4,-45, 37,-46,-47,-15,-17,25,66,111,-54,54,-39,-4,-23,42,23,-50,41,-23,18,34,-72,28,1,-14,-37,91,41,-9,17,-4,7,-55, 
  /* [34][0][][] */ 6,39,17,22,53,-1,-28,10,16,-15,26,6,19,38,-57,-36,-1,-24,-1,-33,11,-28,-39,20,-38,5,44,-33,3,97,-16,96, 30,26,-21,52,17,38,36,-41,18,-4,35,7,83,43,-8,-14,31,-40,-5,6,-1,-11,-49,4,-43,-18,78,19,5,32,-4,127, -19,21,27,32,-26,38,12,-94,-6,-9,32,18,52,30,-56,-23,21,-48,-5,-23,22,-64,-30,-10,-71,-13,3,-13,6,48,22,95, 
  /* [35][0][][] */ -38,-38,-28,-10,16,1,30,37,14,-14,-68,-96,-41,19,-24,17,17,51,-47,9,-49,-23,26,-22,-124,-52,52,-51,6,53,-76,-38, -53,24,-55,-11,47,-56,-43,-26,-22,-13,-78,-108,-102,8,-22,-22,2,34,-38,-56,-60,6,55,7,-127,-77,77,-115,35,2,-62,-3, -44,43,1,-43,49,40,53,72,24,-15,-84,-101,-106,28,-59,9,-7,50,-71,-47,-29,1,109,54,-46,18,82,-59,58,90,-126,-47, 
  /* [36][0][][] */ 29,19,-71,-27,-102,4,5,69,6,109,-25,7,25,-88,-64,-89,45,-12,53,-58,-8,-29,4,-36,14,92,9,13,52,85,49,31, 18,-4,9,-37,-18,1,19,47,-1,127,-39,7,-26,-112,-67,-115,29,-9,46,-64,-8,-14,-4,33,32,38,-22,86,59,-42,10,30, 14,22,-38,-35,-47,-55,4,63,-16,117,-3,13,23,-105,-62,-102,41,-43,50,-46,22,-31,11,-7,31,26,-18,25,51,69,65,-5, 
  /* [37][0][][] */ 41,87,-26,5,-39,48,19,-6,36,-41,-24,44,-48,42,61,19,-52,32,-55,27,4,-2,-21,56,96,14,12,0,68,-47,67,-2, 19,38,-48,6,13,68,18,-17,11,-41,-29,76,-90,63,65,48,-57,74,-90,65,16,2,-57,84,127,6,7,-44,91,-20,71,-15, 25,40,-5,12,42,23,31,-58,44,-27,-30,68,-71,48,44,62,-50,74,-65,109,21,-6,-30,101,127,-2,3,-13,107,-43,99,9, 
  /* [38][0][][] */ -36,-40,49,21,5,18,59,5,3,-57,-22,-54,72,47,-29,21,-48,-41,23,-93,7,-60,34,-35,-105,-64,77,-32,-25,8,-52,37, 2,-80,21,-9,38,59,52,-14,15,-69,-16,-54,97,39,-39,33,-57,-59,49,-87,-1,-37,36,-1,-88,-68,13,0,-39,23,-80,45, -54,-84,8,35,86,79,-11,4,-14,-75,-15,-52,81,39,-39,38,-31,-41,41,-21,14,-55,14,-72,-127,-5,24,-18,-40,40,-57,68, 
  /* [39][0][][] */ -29,-15,11,12,12,23,27,80,28,-15,-15,-40,80,28,-34,2,35,-5,32,-13,0,-20,10,15,-71,-24,41,-58,0,3,-18,33, -66,-31,28,-13,41,78,14,32,-11,-59,2,-55,127,26,-7,-9,41,-21,40,10,-12,-36,15,-47,-81,-93,49,-29,15,88,-18,38, -73,-22,26,6,16,20,36,-16,11,-70,-13,-46,51,27,-32,-38,24,-30,43,-26,-18,-26,58,8,-45,-38,3,6,24,83,29,27, 
  /* [40][0][][] */ -6,36,3,34,-36,-68,31,-48,127,-85,-36,0,27,-9,-85,8,37,-78,57,22,7,-12,41,-50,25,-102,-24,-46,-16,-11,-18,59, -69,-11,-8,11,34,-43,-60,77,113,-96,-25,-32,65,-17,-59,14,50,-68,102,9,9,36,17,-42,14,-91,-24,-13,-1,-73,-14,90, -62,17,33,65,47,-68,-33,-23,124,-101,-32,1,90,-30,-77,-3,61,-57,102,-28,66,64,28,37,44,-62,0,-71,1,-66,-45,87, 
  /* [41][0][][] */ 19,63,-3,-3,109,-50,-2,87,4,31,-28,64,57,-38,-89,-110,-22,26,34,26,15,33,57,28,39,94,-10,-13,29,9,-15,-62, -3,55,66,21,44,-58,2,30,-17,61,-10,63,1,-23,-127,-116,1,34,7,4,31,45,58,23,-12,33,-16,-2,36,82,19,-57, 10,4,0,28,96,-73,-31,90,-33,52,-24,50,26,-25,-113,-127,-14,26,47,26,26,17,49,-38,-26,14,11,-9,19,50,-4,-57, 
  /* [42][0][][] */ 16,-4,9,-1,-33,40,17,14,-23,-16,-12,47,31,4,50,126,42,18,3,23,14,-26,-32,34,41,-69,20,19,10,-49,21,43, -18,-11,2,0,-33,89,2,19,-4,-18,-3,51,25,5,109,127,44,15,25,84,30,-59,-55,20,56,-72,-46,-54,29,5,32,-5, -31,8,-25,21,-8,59,33,45,-14,-3,-11,57,-4,6,82,103,49,8,31,33,38,-21,-50,32,49,-91,11,-50,23,-12,61,16, 
  /* [43][0][][] */ -18,80,-1,-19,-47,-25,48,99,42,62,-69,13,-47,-12,-68,-107,48,-14,46,-14,20,-7,46,-28,1,-13,13,26,26,111,-32,7, -42,48,-71,10,7,27,32,43,12,109,-17,-13,-76,-49,-69,-127,94,0,35,-9,-57,-3,15,37,35,37,84,11,1,50,-35,0, -22,63,-46,-1,-72,-9,88,82,3,71,-53,-21,-12,-71,-49,-96,76,-17,60,-19,-34,-63,17,46,19,53,-12,-17,19,5,-2,20, 
  /* [44][0][][] */ -29,19,53,-78,-23,60,-4,32,50,5,-15,-44,44,-36,1,-12,70,-2,97,-14,-11,-7,56,-27,10,-23,-25,57,12,48,-41,0, -58,-25,25,-58,-58,22,2,-13,44,-18,-12,-49,33,-29,11,-6,63,11,127,64,-42,-6,41,-37,24,-20,-36,-27,-6,39,11,-7, -79,-9,75,-36,28,92,40,77,63,-28,18,-39,41,-35,2,5,59,8,55,-27,-18,-21,51,3,-16,-77,-33,36,-29,47,5,-1, 
  /* [45][0][][] */ -12,-84,4,-7,-85,-17,98,5,-11,-1,6,-60,-51,-24,-61,15,-39,-39,2,-65,-5,0,0,-4,-21,84,-20,52,-78,54,-33,44, 3,-34,49,-19,34,-88,-8,-21,9,0,36,-38,-28,-6,-59,7,-47,-44,6,-64,-33,26,-17,-25,-23,107,-78,-6,-82,-48,-36,33, -17,-19,-35,14,-73,-36,97,-48,14,23,61,-32,-28,-16,-57,18,-45,-34,-1,-20,-19,42,-51,-14,3,127,-24,118,-90,23,-78,13, 
  /* [46][0][][] */ -25,-93,5,-4,17,16,5,-47,21,2,-29,-26,37,-23,-5,59,-90,-12,-6,-19,-3,10,-9,-27,-75,-23,12,-65,-90,-34,-61,-44, -51,-69,85,-5,72,2,47,-77,19,-3,22,-10,-7,-50,-10,52,-100,-19,-17,42,-8,21,53,11,-112,-8,-44,-17,-115,-65,-127,-35, -21,-6,96,3,83,8,0,4,24,-13,24,-48,59,-36,-7,63,-98,-41,-14,-5,33,58,4,-11,-83,58,2,21,-98,-46,-117,-40, 
  /* [47][0][][] */ -63,-13,107,-20,-32,-81,69,-81,109,-1,17,5,24,-60,-57,-2,-53,-10,7,26,-16,59,23,-33,36,-23,-66,49,-66,-27,11,39, -56,106,-2,-4,24,-76,6,34,127,-1,50,23,58,-71,-75,32,-89,-22,11,5,-53,66,-2,-77,53,68,-79,83,-76,26,7,61, -30,84,115,-23,2,-110,42,-20,62,-14,83,15,12,-59,-84,28,-63,-11,47,6,6,103,13,8,40,38,-61,25,-75,-56,15,-1, 
  /* [48][0][][] */ -68,58,21,-55,-38,-15,-14,30,64,-18,-7,-6,73,-53,-30,-48,36,-5,93,-10,-58,36,21,-5,43,-10,-2,14,-21,49,-7,36, -55,-34,57,-55,-46,-7,10,12,56,-23,-19,-20,59,-58,-18,-64,59,3,127,18,-47,75,22,-13,46,3,-51,13,-40,19,-20,37, -58,54,79,-30,22,-13,-31,-12,38,-15,-19,0,39,-46,-41,-73,77,-13,108,2,-45,67,5,-19,38,1,-25,62,-42,99,-3,15, 
  /* [49][0][][] */ 42,44,0,-12,16,36,38,-75,26,-67,-32,-3,-56,47,11,-11,-72,61,-57,48,-4,-3,-24,58,102,60,-13,6,79,-49,72,-7, 20,43,-5,-30,-29,43,95,-72,44,-66,-22,19,-81,65,28,23,-91,80,-61,54,2,13,-36,77,123,7,-7,-22,117,-55,85,-33, 24,-32,14,-11,55,47,22,-32,60,-52,-29,6,-60,73,38,23,-79,88,-61,127,21,22,-6,73,124,71,-12,-7,108,-7,99,-15, 
  /* [50][0][][] */ 51,75,-64,14,6,-26,-52,-57,12,-29,50,73,17,3,33,11,56,-28,-24,108,36,-47,-21,-24,-5,10,19,-47,26,-19,-30,63, 55,127,-65,15,-35,-28,-13,-100,4,-24,63,106,44,26,64,29,50,-7,-39,49,63,-60,-26,3,0,2,61,20,50,8,-19,62, 25,107,-30,42,-65,-46,-72,-88,13,1,25,101,4,41,4,37,55,-4,-10,69,52,-35,-15,-18,0,67,30,6,47,12,-3,39, 
  /* [51][0][][] */ -12,-59,-15,-32,-9,106,-28,13,-9,-8,4,-15,40,-20,12,9,39,34,71,42,22,-34,8,24,27,-17,-13,11,16,37,66,-30, -23,-35,0,-48,-29,96,-19,28,-12,-10,-8,-13,14,-9,13,15,73,36,86,43,14,-25,24,8,29,-36,-34,-7,31,34,36,-36, -22,-29,-29,-45,7,127,-13,-1,-5,-4,-4,-9,51,-16,-3,26,61,32,62,-6,30,-45,25,41,33,-40,-49,21,29,-6,65,-42, 
  /* [52][0][][] */ -9,-8,-39,11,-41,-33,-59,-1,13,-1,55,60,46,-3,-109,-79,-16,-6,58,43,63,4,8,-23,-39,32,3,12,-41,44,-13,40, 33,60,-49,30,77,-48,-53,-6,-12,-12,46,88,94,-16,-122,-93,-17,-13,56,1,35,28,41,-28,-25,70,46,-39,-37,70,-19,79, 17,94,-13,28,-8,-56,31,-23,-32,-4,63,86,127,-13,-122,-96,-31,-21,39,7,68,18,45,-48,-41,41,37,-76,-40,8,11,61, 
  /* [53][0][][] */ -25,-67,33,-24,-30,-3,30,-49,81,-43,9,-3,-21,-16,4,-17,-52,34,-7,72,-29,-57,99,-27,89,-23,-49,-87,43,-20,82,-34, -32,-33,-22,-30,-25,56,39,-34,103,4,24,-3,-19,-1,12,-36,-8,27,-4,-1,-31,-38,96,-26,126,-24,-45,-43,32,26,107,-33, -32,-88,27,-38,-1,38,43,21,83,-45,-3,-3,-30,-17,-13,-14,-28,21,-14,14,-57,-63,54,38,127,14,-38,-64,46,3,111,-30, 
  /* [54][0][][] */ 62,-18,-17,91,2,31,-50,-98,103,-36,-6,38,-24,-41,-11,-68,102,-91,46,-31,-3,20,11,10,43,-18,35,14,4,-63,-75,-25, 48,-7,-13,119,22,30,-101,-63,65,-49,29,53,-29,-41,-2,-73,90,-127,43,-18,11,34,-15,54,5,2,16,10,-17,20,-71,44, 37,2,23,67,-7,16,-86,-108,86,-33,30,59,-69,-51,-6,-53,60,-116,61,21,55,30,-3,87,4,-45,21,-4,-2,20,-32,35, 
  /* [55][0][][] */ -14,-28,-65,41,7,-3,108,59,55,-8,-38,-35,-74,64,53,27,-52,66,-25,35,4,-39,-40,-22,42,17,-12,-20,58,-26,88,30, -13,27,-89,34,-10,-11,95,12,31,-5,-38,-12,-98,66,35,41,-81,63,-43,-32,-22,-14,-67,-48,65,1,-2,-47,63,-56,115,18, -11,-15,-98,53,14,-13,103,54,54,-14,-36,-21,-75,34,18,9,-76,47,-44,-6,-19,-17,-46,-42,72,32,-25,-34,80,-127,76,23, 
  /* [56][0][][] */ -61,-71,-9,10,-38,-85,2,0,127,-29,-62,-66,-4,-4,-37,61,-45,2,-46,-64,-39,17,-2,5,-84,-71,33,38,-10,-11,-115,-4, 5,-12,-55,2,2,-75,-88,-83,83,-15,-76,-111,-34,34,-80,48,-24,15,-57,-64,3,38,10,37,-99,30,18,-55,-27,72,-83,-18, 3,12,11,-4,20,-10,-90,-43,38,-14,-50,-94,-108,-2,-92,46,-50,11,-71,-76,-2,59,12,-2,-51,12,48,-46,10,-57,-123,9, 
  /* [57][0][][] */ -7,81,-3,41,-37,-65,41,6,0,29,20,55,13,-43,-54,-124,36,-37,30,10,-19,13,-34,-15,-20,76,49,-11,5,86,14,69, -9,64,4,29,-70,-47,34,-47,3,61,18,57,49,-49,-74,-127,48,-30,55,25,-39,-23,-1,-6,-14,22,43,68,3,48,38,64, 3,44,-52,47,-72,-38,19,-43,2,45,13,45,58,-50,-72,-123,55,-18,59,-13,-10,-13,-23,-11,-23,49,-3,-46,7,60,25,62, 
  /* [58][0][][] */ 18,102,48,-40,91,-34,56,80,-20,10,-119,15,-58,57,-59,-74,-73,57,-62,83,-31,110,-3,36,19,59,2,-16,-9,-6,-16,-48, 27,84,-27,-21,97,-44,31,-6,-31,30,-93,43,-102,80,-12,-63,-95,74,-98,113,-59,126,31,29,50,127,29,51,40,46,16,-57, 41,105,25,-11,26,-71,20,65,-2,13,-94,32,-90,107,-13,-66,-104,37,-105,53,-43,77,40,23,50,80,3,43,20,43,26,-45, 
  /* [59][0][][] */ -47,-30,-13,-41,16,81,-15,12,15,-6,4,-11,35,13,10,41,81,57,76,70,9,-22,28,24,41,0,-27,-21,-6,37,25,-28, -63,-49,-32,-50,15,127,-15,-15,22,-7,17,-18,44,17,13,54,119,66,125,74,5,-52,30,9,55,-16,-42,-33,5,-18,67,-55, -54,-49,-38,-49,-36,74,23,9,12,-3,14,-20,52,-5,2,45,100,68,89,40,19,-22,39,-8,32,-11,-57,9,9,32,56,-52, 
  /* [60][0][][] */ 0,61,40,56,87,-1,71,65,-5,-8,20,27,57,28,-15,-49,3,55,-36,-52,-16,6,-6,0,21,40,44,5,-40,57,33,28, 20,33,58,52,109,-26,63,73,-16,-6,-26,21,62,17,-76,-90,-14,20,-66,-39,-43,48,2,47,8,27,44,-43,-35,-13,65,35, 13,43,-8,46,35,-20,19,67,-32,-12,2,32,24,3,-85,-127,0,-23,-90,18,-43,-18,7,29,-7,33,-12,-11,-49,42,32,25, 
  /* [61][0][][] */ 7,-91,0,37,-5,31,79,38,-30,-35,-20,-14,-9,54,59,44,16,-68,2,-35,-57,-32,-19,-22,-59,-21,38,-62,36,-104,-23,9, 9,-21,25,14,-41,91,23,54,-55,-29,-7,-23,-53,26,15,23,45,-41,15,-127,-53,-56,-17,9,-92,-4,36,-10,50,-72,-13,-4, -13,-33,-6,35,50,56,85,70,-64,-11,-10,-20,-38,44,48,15,7,-37,12,-59,-64,-37,10,-24,-72,-53,50,-63,53,27,-15,9, 
  /* [62][0][][] */ 34,37,-71,11,-21,0,5,-46,14,10,-18,46,-36,18,57,83,1,32,-43,46,-10,2,-68,-5,17,-3,5,28,6,-14,7,10, 24,66,-47,14,-48,-11,-5,-34,11,14,-19,65,-33,35,78,127,-14,29,-72,48,-3,-9,-88,36,28,-12,8,-10,28,-5,25,0, 15,50,-23,19,-42,-8,-2,-4,17,25,-15,67,-33,38,70,121,-4,48,-53,72,-5,-10,-85,14,26,-37,14,8,22,-8,17,0, 
  /* [63][0][][] */ 25,68,-70,21,11,-2,-32,-23,13,27,-16,74,-15,32,61,63,-24,63,-39,46,-41,-21,-76,18,17,-23,12,23,37,-22,10,16, 12,56,-76,40,1,-25,-47,-17,7,33,-13,94,-45,37,35,127,-46,78,-52,36,-26,-4,-121,-12,17,-34,29,35,23,-15,1,38, 20,61,-65,66,-79,-22,-17,-43,33,35,-23,91,-34,44,47,97,-24,69,-69,75,-17,11,-109,-8,20,-100,17,0,37,8,5,42, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant10_scale = { 64, { 0.0023582247085869312, 0.002764272503554821, 0.0038162597920745611, 0.0036634409334510565, 0.0032775667496025562, 0.00359108648262918, 0.0033045767340809107, 0.0054617282003164291, 0.0028143003582954407, 0.0036240573972463608, 0.0032251174561679363, 0.0040593454614281654, 0.004812674131244421, 0.0030864870641380548, 0.0037976920139044523, 0.0031771429348737001, 0.0036539305001497269, 0.0030546404886990786, 0.0031739005353301764, 0.0020545129664242268, 0.0044699297286570072, 0.0042632259428501129, 0.0035400642082095146, 0.0036940858699381351, 0.0036942805163562298, 0.0030939655844122171, 0.0029496413189917803, 0.0063110743649303913, 0.0029996416997164488, 0.0034391139633953571, 0.0046918708831071854, 0.0026889396831393242, 0.003922067116945982, 0.0039408234879374504, 0.0044296006672084332, 0.0031631952151656151, 0.0043777101673185825, 0.0028503865469247103, 0.0032592166680842638, 0.0047738743014633656, 0.0035078441724181175, 0.0050694551318883896, 0.0033608293160796165, 0.0041153333149850368, 0.0045874696224927902, 0.0033173090778291225, 0.0033210141118615866, 0.0047702677547931671, 0.0048060398548841476, 0.0032132228370755911, 0.0033445458393543959, 0.004617997445166111, 0.0039018301758915186, 0.0028992628213018179, 0.0027662087231874466, 0.0038679796271026134, 0.0029207472689449787, 0.0045251022092998028, 0.0032040874939411879, 0.0040530096739530563, 0.0034446029458194971, 0.0048730494454503059, 0.0043085189536213875, 0.0038528775330632925, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[64] = { -18725, -5331, -503, 12570, -5400, -4473, 1246, -4246, 3969, -14199, -13563, 13465, 4234, -4323, -5285, -15538, 8479, 23367, -12417, -14890, 268, 13065, -5530, -10357, 9342, -4208, -18194, -5543, -9330, -8890, -14162, -6752, -4270, -1099, -7935, 12334, -1730, -15812, 9474, 7078, -1218, -7199, -12856, -848, 852, 21646, 17766, 4885, -3391, -10166, -12434, -14169, -7682, 403, 2188, -1795, 19611, -5208, -8432, -14227, -13134, 9860, -8529, -4114, };
const TfArray<1, int> tensor_dimension11 = { 1, { 64 } };
const TfArray<64, float> quant11_scale = { 64, { 0.00015731477469671518, 0.00016374225378967822, 0.00037065413198433816, 0.00017053299234248698, 0.00028727838071063161, 0.00032690566149540246, 0.00026394426822662354, 0.00031139233033172786, 0.00019523175433278084, 0.00022511395218316466, 0.00015632102440577, 0.00026420893846079707, 0.00031798527925275266, 0.00018801499390974641, 0.00029144599102437496, 0.00019830037490464747, 0.00022104296658653766, 0.00025294077931903303, 0.00022063404321670532, 0.00017470418242737651, 0.00033985354821197689, 0.00020866158592980355, 0.0002118664124282077, 0.00024626785307191312, 0.00029428148991428316, 0.00022924334916751832, 0.0001636874076211825, 0.00034648689324967563, 0.00028513194411061704, 0.00032419469789601862, 0.00020733398559968919, 0.00015731128223706037, 0.00019387452630326152, 0.00022824727057013661, 0.00019969647109974176, 0.00028042550547979772, 0.00027625908842310309, 0.00022875903232488781, 0.00024475410464219749, 0.00021192347048781812, 0.00027955014957115054, 0.00036906087188981473, 0.00023398967459797859, 0.00020435248734429479, 0.00027667800895869732, 0.0001805080974008888, 0.00026973316562362015, 0.0002386947744525969, 0.00034572384902276099, 0.00026887794956564903, 0.00019676523515954614, 0.00022807832283433527, 0.00026304714265279472, 0.00021450960775837302, 0.00020328869868535548, 0.00030965934274718165, 0.00018698352505452931, 0.00024530987138859928, 0.00023969095491338521, 0.00023806017998140305, 0.00016275928646791726, 0.0003013288660440594, 0.00027186906663700938, 0.00021941885643173009, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[64*1*1*32] = { 
  /* [0][0][][] */ 114,68,10,127,56,-65,70,68,-54,34,20,103,67,-11,-89,-126,-47,71,-96,10,41,-39,74,-1,12,73,34,-7,-52,51,9,89, 
  /* [1][0][][] */ 66,73,4,34,-36,-7,-43,-29,34,5,81,0,127,-34,-125,-19,-74,-3,-19,-48,48,21,11,-30,-38,17,100,-40,-55,42,20,122, 
  /* [2][0][][] */ -57,30,-41,39,-13,17,30,127,61,29,-37,-14,-29,-37,-24,4,18,-25,31,-42,18,-86,63,-79,-28,-14,-27,57,-23,47,17,31, 
  /* [3][0][][] */ 12,-69,59,-4,17,13,35,52,-114,79,-91,-75,-48,25,-73,-48,0,-44,39,-67,-92,-65,23,-32,-99,-23,88,-127,54,115,-108,21, 
  /* [4][0][][] */ 33,45,69,33,-22,51,82,127,-11,-28,-5,-21,18,19,-17,113,-7,10,23,-30,-55,31,-10,-54,30,-47,-57,-14,-51,15,6,-10, 
  /* [5][0][][] */ -34,2,-41,3,9,-1,45,-66,63,-44,14,22,-45,40,9,8,-45,26,-29,67,-32,34,17,60,127,55,-24,-41,38,-51,47,-17, 
  /* [6][0][][] */ 62,-46,20,-9,71,35,-22,35,-25,-8,-6,-13,80,-61,-30,127,-36,69,56,-15,16,-49,41,-22,-10,-9,-42,-66,-52,-51,-1,-47, 
  /* [7][0][][] */ -25,-11,-15,-12,-13,82,-34,-29,3,4,-39,-5,5,-50,-6,-34,105,3,127,-1,-22,2,-12,52,-12,-25,5,24,-14,67,33,-17, 
  /* [8][0][][] */ -26,-122,-62,-13,-44,11,14,-18,-20,-59,61,-39,13,-4,8,-3,-45,58,-21,69,-26,33,38,-1,127,-62,-38,-83,66,-68,115,-48, 
  /* [9][0][][] */ -10,99,33,83,23,-94,21,28,-85,51,-33,84,69,-32,-48,-17,21,44,98,68,-30,-17,37,31,54,-127,-34,77,15,74,56,32, 
  /* [10][0][][] */ 71,-19,50,70,19,-66,-20,-74,89,15,64,54,-4,-26,-25,-56,-55,20,-57,21,116,41,21,7,59,127,75,-21,34,-66,-24,44, 
  /* [11][0][][] */ 0,-57,25,-23,82,-75,-53,-117,78,-14,31,66,56,-88,-50,3,-61,-7,17,-4,12,42,-92,-18,-23,86,-39,45,-107,-127,-64,44, 
  /* [12][0][][] */ -39,-29,-19,-35,-1,1,127,37,-32,69,77,-73,-37,-5,-52,31,-29,-14,-2,29,-42,25,23,6,-56,20,-65,43,-59,-52,-16,24, 
  /* [13][0][][] */ -54,35,-81,37,96,33,-59,46,28,2,-11,-47,-81,-15,44,10,-68,43,-30,72,127,-1,60,-32,27,-9,-83,-35,125,-48,100,-34, 
  /* [14][0][][] */ -16,46,61,-28,-85,0,-37,-5,43,-28,27,28,127,-81,-60,-77,55,-40,101,-13,48,-1,86,-19,-16,-94,34,33,-12,48,10,78, 
  /* [15][0][][] */ 42,118,-39,55,-36,49,-36,-55,15,-9,-34,127,-59,84,83,86,-29,22,-84,35,-1,-13,-95,73,96,-11,49,16,94,19,83,17, 
  /* [16][0][][] */ -43,-11,3,-12,-65,21,67,82,10,17,-42,-109,-29,9,-45,4,54,17,-24,-62,-56,-60,127,-43,38,-77,-22,-74,4,127,-32,-29, 
  /* [17][0][][] */ -1,-127,15,-16,-19,-14,-12,-31,35,-18,-15,-96,-47,-31,39,35,-34,17,-47,-104,-24,-40,-18,-30,-39,-1,-33,-8,-29,-73,-32,-34, 
  /* [18][0][][] */ 3,8,-42,-26,-18,6,-29,29,14,15,11,-47,13,19,93,85,127,83,95,78,5,-34,-5,42,22,-52,-68,62,37,-30,27,-58, 
  /* [19][0][][] */ 47,68,54,127,44,77,7,32,-7,-18,30,25,86,12,-75,81,-50,56,-34,-46,28,-28,9,-34,-20,27,63,-65,-66,77,21,58, 
  /* [20][0][][] */ -5,-64,-19,-6,-10,23,21,19,-23,9,20,-23,-51,42,127,85,53,2,-3,33,29,-58,-57,12,-39,-24,17,0,-6,-34,-27,-45, 
  /* [21][0][][] */ -54,-98,-44,-45,-36,-55,-20,-55,68,85,3,-19,-35,-127,22,24,-41,31,26,-3,58,-61,75,-90,20,25,-74,60,-33,-75,72,-30, 
  /* [22][0][][] */ -34,27,-10,-9,-42,-11,-69,17,-4,37,31,16,65,-19,35,-53,127,48,122,-15,-49,0,-64,-16,40,45,-69,21,9,-22,-7,-1, 
  /* [23][0][][] */ -74,-39,-46,-23,33,26,-9,-110,20,-22,24,46,-9,107,0,-2,14,34,-22,51,-18,-21,33,59,72,127,36,-18,69,22,47,-64, 
  /* [24][0][][] */ -8,-86,39,-3,62,30,20,-3,19,-21,12,-59,-12,-28,-21,-7,-23,-39,-3,-43,57,-64,15,-49,-127,12,37,17,-32,-6,-44,21, 
  /* [25][0][][] */ 23,-12,-56,32,8,65,-68,-39,45,-24,37,3,8,-54,46,91,88,10,90,73,-22,-46,1,65,6,-127,-48,30,-11,-47,67,-43, 
  /* [26][0][][] */ 53,58,-34,27,117,30,-62,39,54,-10,101,34,112,-13,-87,-22,21,-2,44,48,127,-55,54,-51,-49,56,36,-74,-40,41,-18,106, 
  /* [27][0][][] */ 15,127,-16,52,-27,-95,-41,-21,7,44,13,89,60,-28,-97,-108,10,-26,31,-9,10,19,26,-27,-23,65,8,12,-14,58,-5,70, 
  /* [28][0][][] */ -48,27,-26,-23,35,-8,-29,-92,65,-27,66,26,78,18,-43,-41,61,-16,13,33,76,11,30,38,-10,127,30,-44,11,27,-24,6, 
  /* [29][0][][] */ -23,-54,-15,-56,-40,127,21,-8,-6,-18,-3,-13,37,15,54,61,57,60,77,53,17,-20,13,34,45,-20,-41,-29,11,14,52,-57, 
  /* [30][0][][] */ 10,-49,42,-117,-7,-45,62,83,-3,19,108,24,108,-114,-69,-17,25,34,99,63,53,8,127,-34,108,75,-74,24,0,20,56,-86, 
  /* [31][0][][] */ 48,30,-78,22,82,-16,-90,-66,36,32,-44,-27,-35,81,44,-49,-6,67,-24,99,55,127,95,-24,-42,-38,77,-102,78,-31,-68,13, 
  /* [32][0][][] */ 80,127,-10,-19,56,-40,-49,51,66,14,-115,72,-75,82,-66,-8,-100,38,-72,49,-64,-2,-9,10,92,-17,99,-18,59,-16,-9,29, 
  /* [33][0][][] */ 16,21,-46,-22,-95,62,93,127,-99,70,-90,-13,-39,49,48,-104,38,5,-50,-84,-79,56,38,7,-66,68,24,7,26,-23,1,-34, 
  /* [34][0][][] */ 48,-16,-11,50,-13,-15,44,-12,-3,-9,28,6,127,40,-61,-39,41,-81,-41,-21,51,-76,-33,34,-63,34,123,-50,16,79,-19,103, 
  /* [35][0][][] */ -66,8,-56,-10,2,12,28,-7,23,-19,-45,-87,-3,17,-32,2,1,27,-44,-34,-35,-16,72,22,-127,-39,48,-74,39,51,-94,-21, 
  /* [36][0][][] */ 29,3,-74,-58,-67,16,-10,68,-13,127,0,15,13,-105,-42,-73,44,-24,51,-72,-18,-34,-7,-45,31,57,-37,101,21,66,13,22, 
  /* [37][0][][] */ 23,40,-32,5,-8,51,72,-33,10,-40,-28,69,-59,90,72,47,-51,51,-56,112,16,-2,-41,82,127,-8,9,5,88,-9,90,-15, 
  /* [38][0][][] */ -44,-100,30,21,62,17,40,-15,9,-44,9,-60,50,14,-64,14,-61,-42,19,-73,34,-45,3,-55,-127,0,61,30,-54,45,-33,42, 
  /* [39][0][][] */ -88,-101,47,-23,67,79,66,48,6,-86,-9,-113,98,21,-4,-5,50,-36,58,-60,-22,-31,91,-43,-108,-75,13,-127,24,35,-82,53, 
  /* [40][0][][] */ -23,60,35,52,11,-6,-60,42,124,-75,44,-10,16,-32,-61,-12,52,-43,62,-12,49,-30,74,-33,10,-127,0,-5,8,-64,-29,73, 
  /* [41][0][][] */ 32,11,-16,12,93,-73,-19,93,-11,34,2,59,-3,-23,-92,-127,-35,44,-7,-5,39,66,40,11,38,53,-13,-5,15,11,16,-37, 
  /* [42][0][][] */ 12,-34,0,11,26,98,6,31,-21,-12,17,55,-14,24,117,127,45,32,28,66,8,-43,-48,12,55,-80,-29,-5,38,-24,33,-14, 
  /* [43][0][][] */ -51,83,-122,-44,-16,-29,74,62,15,98,-102,-15,-47,-114,3,-127,72,-2,86,-3,-25,-40,111,-61,-38,62,-22,89,-10,122,-6,11, 
  /* [44][0][][] */ -65,-8,46,-77,-52,94,1,30,60,-32,21,-53,30,-52,22,-1,109,21,127,-22,-36,26,10,-42,9,-62,-24,-43,-11,21,-49,3, 
  /* [45][0][][] */ -13,-12,25,-18,-60,-117,-12,-27,-38,46,27,-54,-15,-62,-98,-32,-36,-45,-34,-127,-20,19,-35,15,-48,91,24,6,-81,15,-68,44, 
  /* [46][0][][] */ -24,-50,91,-25,66,-8,23,-52,21,-10,-45,-65,48,-29,-25,41,-74,-22,-41,-29,17,-3,48,27,-127,-10,-23,-8,-83,-32,-93,-25, 
  /* [47][0][][] */ -40,-34,-29,-37,105,-122,15,20,127,6,54,35,0,-78,-97,28,-81,-33,32,55,-29,113,-30,-28,47,40,-70,106,-107,-43,-6,36, 
  /* [48][0][][] */ -63,-7,87,-40,-41,11,1,8,35,-30,-20,-5,44,-26,-53,-56,92,11,127,-46,-48,70,-16,-9,39,-18,-20,46,-19,84,-18,32, 
  /* [49][0][][] */ 28,16,-78,-21,59,22,14,-32,19,-30,-21,27,-52,55,28,35,-54,80,-45,127,5,18,-12,46,113,42,-20,-29,90,-51,73,-30, 
  /* [50][0][][] */ 69,76,-93,20,-51,-50,-41,-66,-12,-45,44,127,26,15,54,16,56,-11,-38,120,92,-21,-56,30,7,-10,109,30,35,-12,5,54, 
  /* [51][0][][] */ -21,-53,4,-60,-35,103,25,33,-12,-28,2,-16,25,-33,16,62,64,62,98,59,28,-45,23,60,88,-34,-41,32,61,-35,127,-79, 
  /* [52][0][][] */ 20,88,1,20,0,-68,-12,-6,-28,-24,40,91,127,-22,-81,-127,26,-56,28,10,74,-6,69,2,-55,-8,52,9,-33,49,-14,115, 
  /* [53][0][][] */ -45,-45,-3,-37,43,57,-24,-28,45,12,2,7,-31,-1,-9,-1,-24,19,-7,59,-17,-71,79,25,81,1,-37,-127,17,-30,119,-49, 
  /* [54][0][][] */ 68,-28,-10,81,-13,-47,-106,-127,109,-21,4,53,-16,-54,-16,-40,70,-106,-2,5,88,40,-45,55,2,24,24,41,-37,-60,-38,36, 
  /* [55][0][][] */ -26,1,-12,22,-13,13,127,15,19,-22,-50,-9,-70,61,41,36,-82,38,-36,-29,-18,-12,8,-10,46,3,-1,-57,82,-86,98,0, 
  /* [56][0][][] */ -43,-57,52,62,42,-35,28,-19,83,-13,13,-90,-22,4,-65,-13,-65,11,-60,-127,-40,13,-36,-38,-125,-14,14,4,-46,29,-83,-35, 
  /* [57][0][][] */ 14,82,-75,51,-87,-57,22,-69,10,81,50,68,55,-40,-70,-127,67,-20,51,39,-42,-21,-50,-26,-8,65,36,-66,-8,59,-32,117, 
  /* [58][0][][] */ 40,81,-2,-29,69,2,36,68,-13,5,-75,48,-84,124,-37,-86,-88,42,-90,53,-79,127,-18,47,94,115,5,5,13,22,10,-53, 
  /* [59][0][][] */ -31,-52,-35,-58,-24,79,48,0,15,-25,16,-28,32,16,20,62,113,84,127,107,-3,-29,14,49,82,-12,-62,-18,20,-29,81,-66, 
  /* [60][0][][] */ 21,56,-14,92,61,-63,127,79,13,21,-13,29,75,7,-51,-124,0,-7,-102,27,-16,33,1,17,35,95,41,-71,-81,36,9,95, 
  /* [61][0][][] */ 21,-89,-53,27,-25,3,-3,-21,-73,-19,-55,-31,13,29,19,5,9,-36,47,-127,-71,-13,-38,-28,-48,22,61,-64,62,-30,10,16, 
  /* [62][0][][] */ 38,83,-53,9,-30,-18,1,-48,17,9,-24,82,-57,59,101,127,-8,59,-53,102,-9,10,-85,25,45,-40,0,24,38,0,21,-4, 
  /* [63][0][][] */ 67,43,-44,19,-60,-24,-11,-98,-11,6,-20,118,-53,39,58,126,-50,106,-67,88,-20,22,-127,12,40,-62,52,49,31,0,5,5, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 64,1,1,32 } };
const TfArray<64, float> quant12_scale = { 64, { 0.0045472984202206135, 0.0047330893576145172, 0.010714028030633926, 0.0049293804913759232, 0.0083039915189146996, 0.0094494465738534927, 0.0076295016333460808, 0.0090010222047567368, 0.0056433160789310932, 0.0065070828422904015, 0.004518573172390461, 0.0076371519826352596, 0.0091915968805551529, 0.0054347105324268341, 0.0084244590252637863, 0.0057320171035826206, 0.0063894083723425865, 0.0073114377446472645, 0.0063775880262255669, 0.0050499518401920795, 0.0098237143829464912, 0.0060315155424177647, 0.0061241532675921917, 0.00711855199187994, 0.0085064209997653961, 0.0066264462657272816, 0.0047315037809312344, 0.010015456005930901, 0.0082419468089938164, 0.0093710841611027718, 0.0059931399300694466, 0.0045471973717212677, 0.0056040845811367035, 0.0065976539626717567, 0.0057723722420632839, 0.0081059038639068604, 0.0079854708164930344, 0.0066124466247856617, 0.007074795663356781, 0.0061258026398718357, 0.0080806007608771324, 0.010667974129319191, 0.0067636421881616116, 0.0059069576673209667, 0.0079975798726081848, 0.0052177184261381626, 0.007796834222972393, 0.006899646483361721, 0.0099934004247188568, 0.0077721136622130871, 0.0056876428425312042, 0.0065927701070904732, 0.0076035698875784874, 0.006200556643307209, 0.0058762081898748875, 0.008950929157435894, 0.0054048951715230942, 0.0070908605121076107, 0.006928442046046257, 0.0068813031539320946, 0.0047046761028468609, 0.008710131049156189, 0.0078585734590888023, 0.0063424622640013695, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[32] = { -36046, 13289, 11677, -13406, -8826, 20493, 3969, -15752, -9129, 10457, -2094, 33551, -5442, 37253, -48248, -49431, 2263, -26695, -9127, 52919, -582, -74247, -555, -34319, 35687, -28026, -20462, 6042, 30573, 4070, 22082, -13377, };
const TfArray<1, int> tensor_dimension13 = { 1, { 32 } };
const TfArray<32, float> quant13_scale = { 32, { 7.3174422141164541e-05, 0.00012967899965588003, 3.7098729080753401e-05, 0.00010024681250797585, 3.6535617255140096e-05, 9.3014539743307978e-05, 7.3398179665673524e-05, 4.2067498725373298e-05, 9.4712988357059658e-05, 9.2537571617867798e-05, 7.8693687100894749e-05, 8.9158405899070203e-05, 0.00012807229359168559, 5.3217208915157244e-05, 6.9796849857084453e-05, 7.6209333201404661e-05, 7.2856651968322694e-05, 8.8153625256381929e-05, 0.0001325056073255837, 5.6598168157506734e-05, 0.00011134147644042969, 2.4192853743443266e-05, 0.00010698302503442392, 5.6566626881249249e-05, 6.5182270191144198e-05, 5.99326376686804e-05, 0.0001010456689982675, 0.00012209468695800751, 7.6010845077689737e-05, 7.890370034147054e-05, 8.833988249534741e-05, 0.00010432812996441498, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[32*1*3*32] = { 
  /* [0][0][][] */ 32,81,-24,45,25,-6,-29,62,32,61,-35,23,-15,35,33,0,-29,58,-38,89,25,26,90,13,-63,-70,-27,57,42,-9,-34,-22, 73,36,4,127,51,-86,-2,41,53,-12,56,5,10,-72,29,-7,-60,-7,57,69,106,-66,-12,22,74,45,8,-42,8,44,93,-53, -52,-66,0,-15,16,34,100,-46,-6,3,39,-17,-4,-56,-58,-30,-10,67,-4,-3,1,29,60,-18,68,-12,9,-80,-69,-10,4,55, 
  /* [1][0][][] */ -28,-10,-20,-77,-63,-23,13,7,57,13,-50,11,35,34,-84,60,-28,48,-2,-13,22,-25,-25,-67,-32,53,72,-12,-35,30,33,13, -51,38,-2,-127,-29,34,-105,-57,-35,-31,-41,31,53,44,-11,-21,20,44,63,12,-63,-5,-57,14,31,-42,7,40,-1,-25,58,19, 31,-35,33,-69,27,-18,-75,10,-49,-38,-26,52,-19,-45,-54,-19,-32,-4,3,-42,-36,18,-15,17,-10,7,21,32,19,24,61,28, 
  /* [2][0][][] */ -50,-43,4,28,51,79,19,24,-66,79,-63,45,64,-15,-61,109,-5,-28,89,-22,-53,93,39,-26,11,15,-63,-89,-22,118,29,44, -37,-27,-102,-61,24,-16,-101,48,-76,-37,-44,-21,-35,94,62,95,-77,-77,58,76,-28,43,-40,-105,-112,52,-31,-66,-25,63,-124,21, -127,55,-57,34,-91,-53,-36,34,-85,82,32,-37,55,47,-34,-8,6,-57,97,-63,-92,-11,13,16,-29,69,-31,47,22,-53,13,-28, 
  /* [3][0][][] */ -41,58,78,-27,78,-17,-10,-46,-43,-21,78,16,34,-17,-27,-37,-23,-34,-53,7,-31,37,-45,77,24,78,15,7,-74,-48,-25,-6, -127,83,57,59,52,35,51,-64,61,47,-14,-33,-74,-7,-90,28,-11,65,18,0,70,-29,14,-6,59,39,-61,-53,-60,34,18,-32, -27,-27,48,53,112,-2,-34,-43,24,45,95,20,14,-55,-41,37,-40,-32,39,52,40,10,-78,-26,38,0,24,-32,-4,2,69,-21, 
  /* [4][0][][] */ 2,-51,-65,32,12,-8,7,55,126,64,26,-17,-84,-90,14,52,-64,-42,-12,-2,22,-34,79,63,-40,-13,20,30,-46,-102,-41,-25, 13,-77,71,-29,-18,63,72,63,18,77,118,35,39,-30,-58,-70,-87,-82,-25,-3,38,-11,33,67,-25,14,28,-71,34,0,-88,-30, -3,14,-58,-32,83,-35,-8,102,75,74,37,28,-30,-62,-28,-35,22,-2,74,-1,126,-127,40,-19,-20,-42,-61,27,-20,-36,-10,-12, 
  /* [5][0][][] */ 8,35,6,9,1,-94,100,-72,-12,11,50,-18,-46,-54,0,-78,-86,-17,28,86,58,31,-10,22,-33,-10,-122,-38,19,-103,-14,19, 58,-44,-11,-16,71,-99,110,-33,-40,-62,33,53,-21,-99,-89,-81,-24,3,-21,45,-54,19,88,28,-31,4,-30,28,64,-127,9,-2, 71,64,61,-42,7,-47,-11,-30,58,42,44,34,-67,-90,-43,0,10,-7,-19,72,-54,-18,5,-37,-63,50,-7,42,-58,-66,-72,38, 
  /* [6][0][][] */ 51,17,-66,34,46,22,1,70,-25,-4,-32,-26,-58,16,-127,-57,76,-29,5,24,36,71,11,45,49,-5,-35,-36,53,-35,71,-23, -60,45,-42,2,29,-62,-14,-19,-63,-29,-97,-47,-87,13,-64,-35,-60,63,35,-19,57,74,22,-49,-27,12,37,60,20,-21,67,-74, -49,-81,27,-65,23,17,24,35,-15,76,-67,2,-23,-55,-111,-63,-55,29,40,24,51,-48,19,15,41,-79,-9,-53,38,-4,72,4, 
  /* [7][0][][] */ -94,-27,8,7,42,66,39,17,13,-59,9,49,19,19,38,-3,-47,-4,2,77,-17,27,-52,-48,-74,-58,-39,-88,-64,1,86,-18, -90,5,38,-3,77,-8,41,-65,45,2,-127,63,66,114,-26,-11,39,-28,19,16,9,45,-28,18,-27,-6,-76,-98,12,-4,48,-9, -84,37,42,-32,-1,-1,13,8,34,21,-33,20,111,35,-23,21,32,17,101,61,-8,17,14,53,24,-55,4,-77,39,-32,78,14, 
  /* [8][0][][] */ 77,25,-15,54,-5,-56,73,-100,-16,52,37,-47,71,61,14,36,4,-21,18,-37,-66,-51,-21,43,-7,56,39,28,21,65,-29,-62, 92,-94,-23,41,17,2,4,-28,-41,-70,-34,35,61,11,36,-33,47,-34,-20,25,-36,39,-51,-34,-26,-7,-60,-18,-97,-64,-127,-38, 92,-68,-38,-28,53,21,94,-46,37,-63,-21,-31,28,11,39,-22,19,26,56,72,37,63,29,-63,-22,70,16,-22,-73,20,3,-55, 
  /* [9][0][][] */ -18,28,-11,38,-60,-20,-30,-39,27,-63,-48,-75,-45,-24,-19,-13,-111,19,67,-38,-55,65,-23,32,-51,-79,35,-66,30,-3,-26,-56, -37,-51,98,-80,-25,88,-95,-66,-10,-67,-10,-68,-39,16,70,63,-33,-13,92,38,-10,3,38,73,72,-62,3,36,77,35,65,87, 24,-16,80,-99,-4,-39,5,-37,127,-99,-21,-28,-35,44,25,34,-72,-65,111,-26,46,53,52,-51,35,-103,91,20,65,22,101,6, 
  /* [10][0][][] */ -76,-42,5,44,-28,-69,20,-47,-91,-59,-47,-28,-16,-45,34,93,65,25,-26,80,54,-39,93,-71,7,38,69,53,-70,60,14,-74, -75,-57,-45,55,25,-81,103,51,-25,-85,-33,17,-87,30,-54,106,53,40,58,57,77,-29,106,-27,11,127,-14,-67,34,-95,49,-21, -15,-54,-71,80,56,-70,23,-2,-68,-40,-66,41,-73,-56,11,-8,39,-52,-22,-5,77,-17,24,-10,-47,10,107,81,-38,57,-38,41, 
  /* [11][0][][] */ -78,-77,50,-77,-29,12,82,-16,11,-72,-61,-23,97,35,57,18,10,-47,0,-115,-60,30,-43,13,-55,19,89,-51,-39,18,-31,-96, -49,-99,-77,7,48,13,56,-2,-16,-89,-1,-23,-28,-2,18,34,-12,-11,-50,-127,-62,88,1,-27,33,12,-65,64,-55,-34,82,12, -87,-51,-65,-42,-38,-21,-78,-15,-48,-90,30,18,42,29,-28,13,94,-48,42,-96,-115,13,62,24,-18,8,46,55,-9,57,0,14, 
  /* [12][0][][] */ -73,-33,-17,78,73,-54,-34,-63,56,80,27,-47,-75,-41,10,1,-1,-5,61,24,28,56,32,-17,-30,-27,-16,-37,-57,-21,30,25, 58,63,50,6,60,-28,-11,55,-40,-1,-4,41,11,-37,-84,-8,-127,60,-23,10,-31,-72,52,-58,-43,30,-99,30,-87,-45,99,62, 7,-67,-72,-34,73,-48,78,56,-6,72,43,-4,7,-26,26,-65,-80,53,-47,-16,57,42,-13,38,47,73,-97,48,-44,-96,68,13, 
  /* [13][0][][] */ 34,-35,-109,-49,7,-20,-127,-40,15,94,19,-51,3,29,-20,32,-38,22,-40,39,-60,12,43,0,-29,-59,-83,-75,34,-19,52,-63, -10,-38,-38,-33,16,-27,-98,-52,-6,69,-57,14,-16,10,-50,73,-48,72,7,33,22,-84,80,-68,23,-58,-96,-11,-1,26,-35,-60, 67,-57,-54,-20,-70,-40,-117,31,17,32,-8,-50,54,7,-22,2,-51,18,-37,26,3,26,-43,-21,-75,41,16,-29,45,22,-47,-34, 
  /* [14][0][][] */ 23,74,-1,22,-29,73,-16,36,35,8,49,19,101,11,-27,27,75,-11,27,65,-70,-34,14,3,51,18,8,3,-9,39,57,-10, -7,33,5,-6,-57,-41,47,-44,23,-66,11,-37,-5,73,44,24,42,-3,-75,25,9,-41,61,17,80,-44,-28,-6,4,8,11,-46, -20,86,-6,3,18,-36,46,-10,45,-71,-12,-25,-9,4,77,-4,10,-26,-24,-11,-25,73,70,127,23,2,73,36,84,0,6,30, 
  /* [15][0][][] */ 3,-7,22,-10,-16,72,2,9,-61,26,-52,-40,65,53,41,-7,22,16,-66,25,40,50,79,2,24,-69,-26,76,8,127,17,-22, 22,71,-56,-34,-64,28,-8,74,38,-31,57,-9,-53,77,16,47,-40,10,-16,-26,-8,-30,7,104,52,-29,14,65,-2,47,72,-6, -5,-43,34,51,-22,89,-66,37,62,47,-16,-32,97,67,52,-54,35,-30,-89,36,44,-9,-4,64,34,16,10,24,-4,100,-73,-38, 
  /* [16][0][][] */ 35,36,-18,-2,-27,53,-5,-86,44,-74,-55,11,80,96,10,-68,33,41,-19,-103,43,57,49,-66,53,-40,116,18,55,-32,-52,-23, 29,-32,-37,-36,-84,17,-92,55,-70,-109,24,80,19,-4,-19,-65,51,5,27,64,48,-65,-105,82,66,24,-28,9,-19,22,-52,-40, 40,-29,-84,-110,-82,88,-69,-117,-22,-89,79,82,31,-4,99,-16,127,13,-54,49,-86,-48,42,49,68,-122,115,63,57,24,-113,-5, 
  /* [17][0][][] */ 74,93,-31,38,10,26,81,74,-6,-89,-66,15,95,4,-35,-26,102,28,45,-102,-9,-104,10,32,23,-70,97,-34,-66,37,14,8, -42,46,-12,-103,59,0,-71,38,-24,-8,47,-45,38,-16,4,5,-64,-74,-12,31,41,2,-40,121,42,24,41,-5,17,65,-9,82, 29,21,17,39,32,69,-73,-56,25,58,-84,62,7,78,37,34,34,46,59,-24,-52,13,-26,108,120,45,-50,-65,-127,62,-109,-8, 
  /* [18][0][][] */ 9,-11,-18,-13,-53,105,-114,46,16,-58,-1,49,89,2,31,31,23,-19,-20,-116,-121,6,3,-1,77,10,98,-15,52,127,19,12, -77,-26,-62,-120,-118,-8,34,-18,62,-36,-76,55,-1,47,-75,-92,32,28,-8,9,-110,64,4,60,39,-7,102,-13,-33,99,18,31, -26,59,-24,6,-10,35,-15,-68,-20,-47,21,-13,3,43,81,-78,-83,90,42,-113,30,57,-70,-49,17,-49,-59,81,16,118,100,65, 
  /* [19][0][][] */ -48,-45,-45,1,-47,36,-21,7,44,-52,-30,55,-12,-57,-74,3,-9,25,22,29,18,54,-84,25,-52,-58,-31,-59,-52,-107,-108,10, -17,-89,-54,0,70,-98,-52,11,-37,-64,34,82,-13,4,40,-5,10,4,26,23,-46,18,-12,-127,-12,-47,-63,1,-57,-85,-26,7, 48,-72,-26,19,-16,-76,95,-73,14,-36,41,-25,-30,-77,15,16,-63,37,-44,-122,27,37,-57,-54,-67,-52,7,-39,48,-41,5,-27, 
  /* [20][0][][] */ 45,-27,-69,64,-25,-50,44,-38,-3,-37,62,-1,-78,5,0,-19,75,-29,62,44,-9,9,-17,-38,-52,35,-5,-69,53,-22,-75,-4, 127,-21,-42,105,-45,-66,52,-4,29,-50,-51,-9,-89,-10,-42,10,-44,-66,53,26,48,32,-12,-120,-89,48,26,71,51,13,-3,-60, 116,42,2,14,-37,-34,52,29,-88,-1,48,26,-62,-8,31,12,-16,25,-19,9,-27,22,15,-15,-33,-4,48,0,81,30,-117,3, 
  /* [21][0][][] */ 33,55,-91,127,66,-39,62,40,102,50,56,22,18,-58,6,7,-21,47,87,60,89,-8,71,17,49,29,54,-32,-19,117,3,-3, 17,55,49,-9,67,-78,55,77,-13,88,46,37,4,-42,-54,2,-85,70,38,36,48,-92,56,-13,63,-41,-85,6,-39,119,105,-29, 40,16,-35,-11,51,-30,25,68,86,-34,-2,25,5,7,83,20,-51,3,33,70,66,1,66,-60,-47,74,49,17,1,19,-2,17, 
  /* [22][0][][] */ 23,32,-46,64,-18,-53,-11,76,-38,48,-16,-51,-6,-44,-14,-32,-33,-7,33,64,127,-75,-5,48,-33,-21,64,-43,-29,-68,43,53, 8,51,-71,21,-21,-47,-49,30,-11,59,-29,-52,-36,-26,15,-25,-71,83,34,54,75,21,-30,19,19,-29,-8,-31,30,-36,-16,-39, 32,-54,-3,81,17,-36,-20,2,5,66,30,-9,-21,-72,-25,-23,25,57,-36,-8,46,-19,36,-71,-50,10,24,-56,-37,-58,6,-41, 
  /* [23][0][][] */ -23,-3,105,23,46,80,73,21,-5,7,17,-7,75,-110,-7,49,51,38,58,30,-31,-36,-27,107,1,4,16,98,-56,74,-24,-38, -72,59,59,16,-53,-71,26,5,-10,-36,31,-65,50,-112,24,-53,32,-2,32,39,-101,40,7,-60,127,-8,26,60,51,-51,45,-118, -22,117,-18,-86,-36,-65,31,25,64,13,69,66,18,-56,76,39,43,9,70,-13,-46,-34,87,68,46,7,10,61,3,61,-71,-93, 
  /* [24][0][][] */ -69,8,-47,16,11,-41,-2,56,-88,32,34,-41,-90,-65,-39,-34,34,4,42,30,-5,46,57,-7,-125,-31,50,-63,-87,-82,-62,45, 47,-23,-69,-77,12,-123,35,-80,-32,40,56,-30,35,-9,-11,29,-7,-44,-21,49,-21,13,42,29,-127,1,50,-21,-33,-5,57,-49, -34,-108,-50,14,37,-107,45,40,-43,-27,-59,-5,17,-78,11,-24,-54,-30,19,-60,23,79,-3,-2,-24,11,-45,29,-83,-35,-38,47, 
  /* [25][0][][] */ 17,78,56,36,46,-59,82,9,-119,92,34,75,70,-51,82,37,25,-72,70,-78,2,34,49,-53,80,21,-30,48,-1,-15,-6,70, 102,1,64,-40,90,-102,25,-16,-113,-18,-85,81,-110,-60,7,-108,92,-42,107,43,-115,-51,17,-69,-39,115,-34,-7,-12,23,27,92, 32,65,59,2,3,-92,-42,61,-127,33,-38,1,-110,-65,32,-55,72,31,9,-22,-92,36,-29,10,-23,51,36,-28,-14,33,-102,23, 
  /* [26][0][][] */ -43,21,-20,17,-44,-20,-58,41,20,56,44,110,-11,79,38,75,-90,5,-50,114,99,-37,49,-48,-36,49,-65,0,73,-63,51,-8, -3,-24,-18,-53,25,-26,94,-55,98,-26,32,-40,-40,-2,11,41,-5,-21,34,127,20,-73,103,70,-74,45,25,-45,-22,6,-49,-42, 81,66,-36,120,-31,-23,31,-19,-10,52,-36,-41,-24,-44,-54,-66,73,-14,-54,41,104,5,60,-23,23,13,-36,-60,-11,-84,-52,81, 
  /* [27][0][][] */ 47,54,31,-80,-48,18,-99,8,13,42,-56,34,69,-97,-35,-4,66,19,8,-80,-87,9,23,-72,-57,109,-22,-36,-1,4,-42,-27, -47,46,15,3,-40,-3,41,-96,-13,5,-23,2,40,-57,36,26,19,44,3,54,-34,-25,79,50,-33,-23,-18,23,1,-87,-88,-28, 60,9,-5,-85,-24,34,-16,-71,68,-76,-28,76,55,-75,46,-3,127,-36,44,31,28,-35,-13,-44,-12,45,-84,-2,25,43,-26,17, 
  /* [28][0][][] */ 92,37,-91,-7,-51,-52,66,-57,-4,21,-66,31,-68,1,3,-17,-34,32,-50,-25,16,-45,17,63,-107,-8,-30,12,-16,3,4,-32, 49,-53,-127,-9,-22,-32,48,0,-93,62,32,-56,38,25,-89,32,-86,49,-72,17,-45,-16,48,-33,-59,71,22,-4,47,-23,12,-9, 32,-118,-126,-6,-72,-105,3,-39,-115,36,73,62,36,-4,-74,-64,59,53,-19,-32,36,-14,1,-53,20,10,-35,-13,12,-88,-65,-11, 
  /* [29][0][][] */ 7,1,55,-85,58,7,-72,-67,38,-17,-86,69,28,-97,-45,30,-7,-18,60,61,-58,-45,31,25,66,64,10,-51,32,-41,-41,57, 66,4,14,-4,61,52,22,-5,89,-54,-8,-2,-49,-85,18,73,17,-1,-66,60,83,21,54,63,11,-11,20,30,-22,-4,-99,27, 33,105,-42,-127,-69,-41,-33,-59,39,-24,-41,75,-24,-88,30,83,-13,-10,-21,-40,-19,-32,40,-15,-67,16,-100,-11,40,-24,-78,43, 
  /* [30][0][][] */ 2,-40,-11,-8,42,-40,21,-52,-84,111,-78,-68,-38,-22,70,-24,64,64,-24,29,82,-110,-4,-12,15,-17,58,-83,-106,-102,-103,38, 65,-54,-12,90,54,-91,8,-87,-5,9,38,-26,53,15,-51,80,72,-19,-12,-64,-77,-116,15,16,-52,119,5,-93,-81,-95,39,91, 11,-34,-64,72,21,11,66,-55,-10,98,1,-61,-56,-30,-42,-57,-45,-13,-89,90,66,-40,-26,-77,22,101,-127,-31,-106,6,-64,76, 
  /* [31][0][][] */ 75,-42,-66,78,8,-31,-30,24,-60,-52,5,41,-48,-42,76,46,-32,-18,103,99,56,-94,41,-38,-27,-21,-113,87,-7,78,-45,-27, 34,-48,-28,90,-1,-57,69,24,-44,91,20,6,5,65,-9,84,-58,29,-20,59,91,54,-49,2,-21,59,-66,38,-22,-41,-56,-9, 26,-41,26,107,93,68,-27,-31,3,62,20,70,-86,42,8,61,-30,-90,-52,77,127,-68,58,-90,-106,-2,-21,32,44,-94,7,-67, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant14_scale = { 32, { 0.0037880693562328815, 0.0067131794057786465, 0.001920514740049839, 0.0051895440556108952, 0.0018913638778030872, 0.0048151458613574505, 0.0037996526807546616, 0.0021777364891022444, 0.0049030706286430359, 0.0047904546372592449, 0.0040737888775765896, 0.0046155229210853577, 0.0066300043836236, 0.0027549308724701405, 0.0036132202949374914, 0.0039451797492802143, 0.0037716191727668047, 0.0045635076239705086, 0.0068595069460570812, 0.002929955255240202, 0.0057638888247311115, 0.0012524076737463474, 0.0055382619611918926, 0.0029283224139362574, 0.0033743344247341156, 0.003102573100477457, 0.0052308989688754082, 0.0063205575570464134, 0.0039349044673144817, 0.0040846606716513634, 0.0045731500722467899, 0.0054008243605494499, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[32] = { -901, -2621, -1162, -566, -1950, -1398, -1267, -1500, -2659, -1821, -1238, -2630, -1395, -2607, -2612, -3397, 201, 116, -1918, 128, -1546, -1446, -2510, 656, -2404, 179, -2484, -3417, -1096, -66, 586, -1318, };
const TfArray<1, int> tensor_dimension15 = { 1, { 32 } };
const TfArray<32, float> quant15_scale = { 32, { 0.00019410261302255094, 0.00014768741675652564, 0.00014891952741891146, 0.00017770146951079369, 0.00016529200365766883, 0.00016638348461128771, 0.00020266040519345552, 0.0001072462837328203, 0.0001258827542187646, 0.00014092374476604164, 0.00017193501116707921, 0.00012306051212362945, 0.00017344245861750096, 0.00018653641745913774, 0.00012561575567815453, 0.00012554314162116498, 0.00021217999164946377, 0.00013223457790445536, 8.2879079855047166e-05, 0.00018367514712736011, 0.00017238348664250225, 0.00023932324256747961, 0.00016253604553639889, 0.00012612176942639053, 0.00016090767167042941, 0.00014057384396437556, 0.00013682479038834572, 0.00010258563270326704, 0.00013657884846907109, 0.00020264515478629619, 0.00019121301011182368, 0.00013018464960623533, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[32*1*7*1] = { 
  /* [0][0][][] */ 9, -127, -55, 95, -16, 58, 58, 
  /* [1][0][][] */ -127, -19, -60, 57, -113, -14, 0, 
  /* [2][0][][] */ 83, -104, -61, -27, 31, 127, 32, 
  /* [3][0][][] */ -64, 111, 92, -30, 79, 127, 49, 
  /* [4][0][][] */ 126, -127, -60, 86, -88, -121, -124, 
  /* [5][0][][] */ -53, 127, -19, 119, -96, 20, -9, 
  /* [6][0][][] */ 50, -21, -127, -13, -35, -80, -31, 
  /* [7][0][][] */ 127, 115, -97, 23, -50, -77, 98, 
  /* [8][0][][] */ 102, -127, -93, -98, -97, 32, 16, 
  /* [9][0][][] */ -91, 94, -2, -127, -29, -46, -72, 
  /* [10][0][][] */ 111, -127, 3, -8, -118, -26, -64, 
  /* [11][0][][] */ -1, -127, -118, 46, 27, 67, 109, 
  /* [12][0][][] */ -56, 48, 51, 127, -70, -51, -20, 
  /* [13][0][][] */ 11, 53, 65, 69, 28, -88, -127, 
  /* [14][0][][] */ 99, -13, -127, -42, 86, 49, 6, 
  /* [15][0][][] */ -26, 64, -57, -127, 104, 27, -55, 
  /* [16][0][][] */ 21, 84, 13, -127, -32, 60, 26, 
  /* [17][0][][] */ -22, -93, -21, 64, 127, 46, -85, 
  /* [18][0][][] */ -127, 44, 103, -64, 118, 10, -118, 
  /* [19][0][][] */ -18, 127, 38, 18, 112, 52, 63, 
  /* [20][0][][] */ -42, -68, -104, -73, -70, -127, -29, 
  /* [21][0][][] */ -21, -54, -54, -46, 4, 127, 15, 
  /* [22][0][][] */ -38, -66, -116, 99, -17, -98, 127, 
  /* [23][0][][] */ 94, -91, 127, -63, -22, -68, 47, 
  /* [24][0][][] */ 8, 6, -127, 44, -94, 63, -107, 
  /* [25][0][][] */ 127, 116, -122, -33, 124, 63, -60, 
  /* [26][0][][] */ -33, 91, -87, 127, 31, -16, -115, 
  /* [27][0][][] */ -127, 72, -109, 89, -45, 99, -80, 
  /* [28][0][][] */ 71, 127, 31, 102, -116, -126, 18, 
  /* [29][0][][] */ 37, -45, 85, -54, 4, -127, 32, 
  /* [30][0][][] */ 20, -127, 19, -92, -14, 73, 41, 
  /* [31][0][][] */ 29, 127, -104, 17, -43, -110, 98, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 32,1,7,1 } };
const TfArray<32, float> quant16_scale = { 32, { 0.0012627218384295702, 0.00096077081980183721, 0.00096878624754026532, 0.0011560252169147134, 0.0010752963135018945, 0.0010823968332260847, 0.001318393973633647, 0.00069768365938216448, 0.00081892195157706738, 0.00091677019372582436, 0.0011185118928551674, 0.00080056209117174149, 0.0011283184867352247, 0.0012135003926232457, 0.00081718503497540951, 0.00081671262159943581, 0.0013803229667246342, 0.00086024339543655515, 0.00053916440811008215, 0.0011948866304010153, 0.001121429493650794, 0.0015569016104564071, 0.0010573675390332937, 0.00082047685282304883, 0.0010467743268236518, 0.0009144939249381423, 0.0008901046821847558, 0.00066736410371959209, 0.00088850472820922732, 0.0013182947877794504, 0.0012439236743375659, 0.0008469077292829752, } };
const TfArray<32, int> quant16_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,1800,1 } };
const TfArray<1, float> quant17_scale = { 1, { 0.15371763706207275, } };
const TfArray<1, int> quant17_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,900,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.019317075610160828, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,900,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.019317075610160828, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,450,1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.019317075610160828, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<3, int> tensor_dimension21 = { 3, { 1,450,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.019317075610160828, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,450,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.019317075610160828, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,450,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.023795479908585548, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,450,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.023795479908585548, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,450,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.034595217555761337, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,450,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.034595217555761337, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,225,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.095425233244895935, } };
const TfArray<1, int> quant27_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,225,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.062864847481250763, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,225,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.11236016452312469, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,225,64 } };
const TfArray<1, float> quant30_scale = { 1, { 0.11236016452312469, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.018224706873297691, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,10 } };
const TfArray<1, float> quant32_scale = { 1, { 0.13152855634689331, } };
const TfArray<1, int> quant32_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,10 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 17 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 17,16,15 } };
const TfArray<1, int> outputs1 = { 1, { 18 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 18,2 } };
const TfArray<1, int> outputs2 = { 1, { 19 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 19 } };
const TfArray<1, int> outputs3 = { 1, { 20 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 20,3 } };
const TfArray<1, int> outputs4 = { 1, { 21 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 20,4 } };
const TfArray<1, int> outputs5 = { 1, { 22 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 22,14,13 } };
const TfArray<1, int> outputs6 = { 1, { 23 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 23,3 } };
const TfArray<1, int> outputs7 = { 1, { 24 } };
const TfLiteAddParams opdata8 = { kTfLiteActRelu };
const TfArray<2, int> inputs8 = { 2, { 24,21 } };
const TfArray<1, int> outputs8 = { 1, { 25 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 25,4 } };
const TfArray<1, int> outputs9 = { 1, { 26 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 2,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 26,12,11 } };
const TfArray<1, int> outputs10 = { 1, { 27 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 26,10,9 } };
const TfArray<1, int> outputs11 = { 1, { 28 } };
const TfLiteAddParams opdata12 = { kTfLiteActRelu };
const TfArray<2, int> inputs12 = { 2, { 28,27 } };
const TfArray<1, int> outputs12 = { 1, { 29 } };
const TfLiteReshapeParams opdata13 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs13 = { 2, { 29,5 } };
const TfArray<1, int> outputs13 = { 1, { 30 } };
const ALIGN(1) uint8_t opdata14[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs14 = { 2, { 30,6 } };
const TfArray<1, int> outputs14 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata15 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs15 = { 3, { 31,8,7 } };
const TfArray<1, int> outputs15 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata16 = { 1 };
const TfArray<1, int> inputs16 = { 1, { 32 } };
const TfArray<1, int> outputs16 = { 1, { 33 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension0, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension17, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28800), (TfLiteIntArray*)&g0::tensor_dimension18, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 28800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 43200), (TfLiteIntArray*)&g0::tensor_dimension20, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28800), (TfLiteIntArray*)&g0::tensor_dimension21, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14400), (TfLiteIntArray*)&g0::tensor_dimension22, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension23, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14400), (TfLiteIntArray*)&g0::tensor_dimension24, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension25, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14400), (TfLiteIntArray*)&g0::tensor_dimension26, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 28800), (TfLiteIntArray*)&g0::tensor_dimension27, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14400), (TfLiteIntArray*)&g0::tensor_dimension29, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 14400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14656), (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension32, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension33, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_ADD, OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_ADD, OP_RESHAPE, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 34, };
const size_t tflNodes_subgraph_index[] = {0, 17, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  33, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_12_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 34;
  for (size_t i = 0; i < 34; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_invoke() {
  for (size_t i = 0; i < 17; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
