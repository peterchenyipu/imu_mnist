/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 15.04.2024 05:20:09

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 10
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 20
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 14176;
#else
constexpr int kTensorArenaSize = 13152;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_ADD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.15371763706207275, } };
const TfArray<1, int> quant0_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 300, 6, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 150, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[3] = { 1, 75, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 1, 75, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[3] = { 1, 38, 64, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const int32_t tensor_data6[1] = { 1 };
const int tensor_dimension6 = 0; /* empty TfLiteIntArray */
const ALIGN(16) int32_t tensor_data7[10] = { -683, 110, 670, 259, -263, 124, 902, 1344, -997, -1264, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<1, float> quant7_scale = { 1, { 9.298881923314184e-05, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[10*64] = { 
  -19, -49, 48, 1, 35, -60, 61, 75, 44, 32, -101, -21, 8, -11, 35, -3, -41, -21, 84, -37, 24, -10, 35, -80, 10, 75, -6, -65, -11, 79, 82, -75, -86, -58, -80, -64, 5, -20, -17, 48, -10, -71, 66, -54, 40, -30, 19, 15, 35, -29, -45, 69, -3, -26, 1, 1, -34, -26, -105, 80, -59, -24, 17, -17, 
  -49, -1, 33, 73, -34, -56, -50, -122, -63, -75, 28, -19, 63, 2, -127, 53, 17, 60, -73, -1, -3, 52, -77, -2, 62, -62, -64, -105, -84, -76, -102, -12, 71, 57, -45, 58, -17, 24, 17, 35, -68, -34, 47, 25, -58, 33, 49, -99, -123, 34, -10, -9, -117, 66, -46, 90, 47, -107, 34, -63, -61, 61, 71, 52, 
  -64, -25, 18, 59, 51, 60, -65, -88, 61, -116, -36, -10, 38, -45, -25, -67, 54, -10, -98, 4, -31, -36, -31, 28, 49, -98, 19, 21, 35, -6, -62, -3, -26, 62, 58, 45, -35, -96, 39, 64, 49, -20, -5, 60, 51, 15, 3, -17, 16, -47, 2, -57, -3, -4, -14, -16, 13, 41, -2, 19, 71, 54, -85, -30, 
  -27, 63, 13, -41, -16, -40, -23, 1, -50, -54, 51, 46, -38, 15, 60, -56, -58, -73, -83, 20, -49, -30, -53, -47, 54, -72, 81, 79, 46, -94, -23, 80, 46, -56, 13, 35, -28, -122, 46, 1, 64, 39, -96, -9, -52, -2, 31, 44, -17, -70, 52, -95, 80, -76, 37, -67, 31, -16, 16, -55, -10, -59, -20, 19, 
  62, -47, 28, -31, 2, 75, -52, 16, 14, 50, 64, -61, -46, -38, -62, 54, -27, -12, -22, 50, -70, 1, -16, 56, -90, 1, -53, 13, -47, 5, 0, -54, 51, 36, -35, -12, 16, 64, -54, -45, 9, 56, -26, 53, -17, -49, -72, -1, -2, 33, -12, -1, -39, 42, -13, 26, -10, -1, 40, 51, 70, 50, 39, 21, 
  48, 20, -65, -70, 59, 30, 8, -18, 11, -12, 52, 52, 16, -22, -27, -24, -72, -91, 14, 52, 8, -46, 57, 2, -40, 2, 54, 24, 36, -30, 56, -6, 22, 15, 10, -71, 6, 8, -21, -31, -40, -1, -68, -39, -54, 8, 12, 74, 38, 2, 41, -77, 50, -56, -44, -32, -80, -12, 40, 0, 12, -50, 78, 66, 
  -73, -69, -1, 29, 9, 43, 7, 23, 83, -30, -40, -51, 51, -3, -56, -78, 61, 4, 13, -103, -41, 21, -4, 36, -20, -41, -93, -85, -15, 68, 46, -47, -21, 62, -94, 64, 62, 6, -45, 54, -12, -7, 18, 73, 51, -18, 49, -29, 10, 51, -111, 42, -125, 46, -94, 14, -2, -66, -2, 74, -20, 1, -15, -95, 
  -42, -1, 43, -34, -85, 27, -49, -3, 2, -23, 17, 53, 46, 40, 4, -52, 31, 34, -55, -84, -24, 68, -15, -35, 12, 30, -82, 46, -23, -118, 42, -31, 16, -38, -10, -5, 0, -51, -15, 5, 57, -88, -20, 13, 58, 55, 66, 59, 52, 14, -47, -78, 32, 69, 14, 52, 36, 22, -43, -84, -95, -52, -72, -74, 
  20, -37, -27, 30, -7, -74, -28, 82, 15, 40, 17, 35, -91, -15, 84, -12, 8, -109, 62, -21, -46, 17, 81, 23, 25, -6, 39, 61, 21, 27, 48, -28, -73, -6, 4, -75, 77, -90, -79, -23, -26, -7, -43, 20, 36, -25, -97, -49, 61, -95, 36, 49, 46, -12, 45, -121, -85, 54, -10, 26, 7, -41, -23, 40, 
  -3, -50, -52, -43, -62, -11, -55, 30, 38, -3, 53, -12, -29, 65, -5, 87, -45, -1, 38, -11, -2, -52, -50, 67, -27, 42, 49, -43, 40, 29, 25, 24, 18, -41, 2, 30, -78, 88, -24, -47, 26, -21, 68, -88, -10, -25, 42, -70, 3, 36, 57, 53, 4, 2, 37, -12, 32, -55, -13, 66, -72, -20, 78, -11, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 10,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0060017216019332409, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { -5055, 10075, 13302, 10149, 9355, 6069, 2859, -3090, -2107, -6821, -18159, 8437, 16465, -5577, 4320, -32152, 21752, 12742, -14776, -9906, -17894, 12293, 19579, -20919, 7862, -12748, -3053, 19538, 4322, -11887, 3316, 900, -10487, 11921, -8571, 20458, 15017, -12004, 11775, 21607, 10964, -12825, -21143, 15541, 18826, 9859, 17749, 20630, 30468, -6744, -17031, -35092, 10716, 16221, -14122, -6650, 20291, 22486, -13235, -19505, 11027, -2441, -23467, -11820, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 0.00012632149446289986, 0.00012085886555723846, 9.5246985438279808e-05, 9.7834723419509828e-05, 0.00011633754184003919, 0.00014379364438354969, 0.00011223142792005092, 0.00014773564180359244, 0.00011138187255710363, 0.00012353384227026254, 9.4963645096868277e-05, 0.0001330032100668177, 8.9860586740542203e-05, 0.000111884277430363, 0.00014008375001139939, 0.00011210766388103366, 0.00011157072731293738, 9.605669038137421e-05, 0.00010825626668520272, 8.1806290836539119e-05, 0.00010278334229951724, 0.00014033848128747195, 0.00012072428216924891, 0.00015207608521450311, 0.00012720352970063686, 0.00011979245755355805, 0.00011250879470026121, 0.00013387310900725424, 9.309663437306881e-05, 0.00012647447874769568, 0.0001200501064886339, 9.00630620890297e-05, 0.00011909735621884465, 0.0001183034255518578, 9.14643460419029e-05, 9.7913456556852907e-05, 0.00010179178934777156, 0.0002266520750708878, 0.00010906453098868951, 9.2502392362803221e-05, 8.6004729382693768e-05, 9.4128605269361287e-05, 0.00011722496128641069, 0.00013898500765208155, 9.8110715043731034e-05, 0.00010841299081221223, 9.5684292318765074e-05, 0.00014150193601381034, 0.00010554040636634454, 0.00018626873497851193, 9.5888564828783274e-05, 9.156908345175907e-05, 0.00011540819104993716, 9.4074152002576739e-05, 0.00010853817366296425, 0.00010799846495501697, 0.0001004398291115649, 0.0001362557231914252, 0.0001017339964164421, 0.00010872343409573659, 0.00014452339382842183, 0.00012951320968568325, 0.00012102621258236468, 9.2084403149783611e-05, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[64*1*3*32] = { 
  /* [0][0][][] */ 0,-13,-1,1,-14,2,59,-7,33,4,-19,82,-15,-37,27,102,16,37,13,18,0,-21,14,-34,17,-36,-70,62,-6,17,88,-33, 74,62,-109,-46,-31,29,16,-74,39,-22,-3,-19,-27,-18,43,96,15,67,37,3,64,45,12,-8,-5,-29,-24,-25,-38,-90,44,-50, 97,-47,-127,-50,-36,9,-37,-2,30,58,-17,100,13,-41,110,82,15,16,17,-29,72,45,-28,41,-39,-42,-11,60,-28,-81,70,-20, 
  /* [1][0][][] */ -18,-69,31,21,33,-100,-71,-53,-8,-61,25,23,87,13,37,-70,11,-79,-68,30,16,111,99,6,-20,33,-9,28,-72,9,-73,2, 49,-73,84,-2,-38,-10,10,-51,55,-37,12,-25,1,-35,61,11,4,-32,-64,18,40,1,-4,47,10,-44,18,-58,-97,-51,-98,16, -25,13,6,-19,-62,-11,-13,12,91,-57,-39,81,19,-57,1,-52,127,-118,-48,85,36,75,-31,-7,0,-22,17,72,-82,13,-50,-70, 
  /* [2][0][][] */ -61,39,35,-65,-12,-118,4,50,-75,88,-29,79,98,-27,1,-54,12,-27,-100,-76,11,0,-52,-64,-24,-26,67,52,24,38,-14,-7, -36,-83,0,-81,10,-78,17,-30,-85,64,81,50,17,-50,-30,-95,21,11,-42,-67,-4,-45,-50,-14,44,-69,61,79,-29,-27,-9,20, 16,-62,26,33,44,-127,26,-7,-50,-39,-19,58,111,-17,57,-79,-55,3,-42,-42,41,29,66,58,-19,-37,32,8,65,-82,-11,-75, 
  /* [3][0][][] */ -91,-40,6,-27,63,-23,84,26,-68,50,4,-71,-4,79,-12,-75,-63,-7,-19,57,-50,-56,11,5,41,-102,-17,-10,-18,7,-43,-20, -63,-88,30,-25,59,-34,52,-7,-46,87,28,-115,16,28,-63,-95,15,-40,78,-54,-102,59,-20,45,-9,-70,1,9,-19,-13,-41,-27, 6,-22,19,64,117,-40,92,53,-53,9,28,-9,73,7,-61,-45,-11,29,-4,22,-71,28,42,-16,127,-101,20,-57,-38,-50,-84,31, 
  /* [4][0][][] */ -38,-39,-7,76,-78,-82,6,127,45,-17,48,-2,31,-1,-22,-32,6,-26,-21,-9,7,7,-98,-83,30,88,-41,-63,-62,-9,4,-10, -29,-52,5,9,-10,-4,-15,52,-21,27,67,9,-64,-70,-24,-22,37,-40,11,26,50,0,-97,-6,73,30,-28,-107,-72,52,-67,-39, -53,-35,-24,72,-12,-54,78,70,27,-43,75,-31,-15,-17,5,45,-85,7,12,58,56,30,-43,-73,60,60,-36,-100,-34,10,15,-60, 
  /* [5][0][][] */ -34,0,-65,22,-106,-26,56,35,49,-67,94,43,-23,-58,-71,-23,18,19,38,-40,18,-30,-4,-76,29,-50,-32,25,65,-111,66,-51, -30,12,-27,35,-110,-6,26,-24,52,-26,53,4,-28,-20,-35,66,49,-54,60,56,5,-22,-45,-15,-10,-45,-38,24,-5,-60,56,26, -13,6,-92,66,-127,-7,48,7,54,-70,108,46,-5,-10,-66,18,6,24,64,32,-54,-47,-5,-15,-26,50,-11,42,-14,-52,67,-27, 
  /* [6][0][][] */ -47,-37,21,-46,75,-88,60,118,23,0,-63,-16,93,-5,21,54,64,-42,-34,-35,36,-69,15,-10,-44,67,-2,-91,-46,98,-23,-30, -50,53,33,28,-19,-72,36,0,37,15,-57,-6,73,23,-59,58,-23,-45,6,4,27,-31,-103,71,-24,55,-55,-127,-27,60,15,33, -7,3,79,-13,7,-59,15,26,41,-35,-58,-102,62,10,-7,1,-22,-3,13,-8,-42,0,31,39,-5,104,-2,-127,-19,96,-14,-39, 
  /* [7][0][][] */ -10,38,107,-7,33,-35,34,-18,0,28,-55,-46,-16,-42,41,10,35,41,-13,18,-44,-8,-25,52,48,91,7,-18,-37,8,-1,14, -16,-6,52,-36,-5,-7,11,38,-35,-12,-28,-2,4,-4,17,-11,15,18,0,25,-20,11,10,7,24,5,-1,-42,12,16,38,-3, -39,5,127,-6,9,-6,24,2,-49,37,-87,-67,30,20,-3,3,-11,28,-15,-34,-23,-19,13,25,62,68,-25,-5,-9,19,38,21, 
  /* [8][0][][] */ -76,-82,61,67,-9,53,43,31,-56,-44,32,19,72,-28,-57,-34,44,6,107,54,40,-32,-34,15,117,1,-56,-49,46,35,-23,44, -55,-39,50,19,-43,19,62,-17,-37,-9,27,21,60,-22,-11,12,-29,-5,79,-29,0,-32,-16,4,64,-36,-6,-55,-6,-48,-12,-3, -50,-24,-11,3,14,-21,54,30,-59,-16,99,5,35,-30,-82,0,67,37,44,27,-10,-37,2,-28,127,10,-55,-82,-32,6,10,-7, 
  /* [9][0][][] */ -35,59,46,12,2,11,32,-29,-10,-16,-30,-30,35,-5,9,60,45,33,12,-29,2,1,-52,-3,-7,66,-45,37,4,-13,127,20, -4,68,54,-31,9,-61,11,37,-60,45,-50,2,-30,-21,31,14,-32,2,8,13,37,-65,-88,34,2,36,15,-3,-2,12,101,-38, 15,64,24,-12,-15,4,40,24,7,12,-63,48,39,15,27,75,-2,57,-33,-11,-34,5,-23,-40,12,-6,2,-12,23,23,97,-45, 
  /* [10][0][][] */ 126,25,-53,54,-3,98,-4,-76,116,-21,-60,99,3,-7,56,62,76,68,68,-20,100,55,-6,-28,-22,-54,48,12,-17,-27,114,33, 42,57,-50,-3,-33,3,29,-26,47,-62,6,100,-7,0,34,97,72,68,73,0,55,-38,21,-20,-17,-39,4,100,19,-10,36,-91, 20,-109,-73,80,-5,0,-14,-127,36,15,-78,58,-53,-35,75,108,48,81,65,62,36,46,67,26,-104,-122,57,41,-33,-68,34,26, 
  /* [11][0][][] */ 61,-37,31,-36,35,-40,-48,-49,7,61,-85,-29,-16,-8,22,49,41,-64,-40,-73,-27,52,62,16,-37,49,14,29,-127,14,-34,44, 20,-18,87,30,33,-34,-75,-26,-19,68,-6,-50,50,-57,20,20,6,-59,-79,20,43,45,74,16,-1,21,34,30,-65,-13,-38,-67, 49,1,92,-36,-4,-61,-55,-49,17,-1,-98,9,-11,-33,24,-46,-11,8,-37,-60,-40,52,14,31,-48,-3,30,49,-88,42,-8,70, 
  /* [12][0][][] */ 7,-7,-39,-109,13,-15,115,-87,-4,41,53,34,-56,93,14,-12,-35,-77,36,-30,-74,44,-8,-68,-94,-98,38,62,5,-20,-99,-14, 2,-29,-109,-58,-1,-49,6,-38,-30,-14,78,69,40,62,26,61,-75,-13,-10,50,52,19,-44,-35,-81,-47,-47,57,-44,-41,-127,40, -22,-26,-57,-50,106,-25,91,-40,18,-14,59,-1,-32,72,23,-51,-13,-101,30,76,-100,28,-71,56,12,-85,-51,31,-61,30,-85,-95, 
  /* [13][0][][] */ 1,-47,15,-58,40,26,-52,-7,-17,-18,-55,33,-118,-46,39,30,67,-1,68,2,82,-35,88,12,-87,-66,-24,11,46,71,23,106, 2,-32,42,2,47,83,-61,-61,44,42,2,-60,-74,8,-63,119,-20,26,26,71,-9,45,-42,45,1,-25,-23,-63,46,37,43,-3, -15,60,-31,-19,42,55,-68,-9,16,52,-26,-18,-127,19,-44,68,-3,3,-52,64,22,40,-25,-74,0,-39,103,42,60,-10,42,56, 
  /* [14][0][][] */ -25,21,80,12,1,-27,-77,-8,21,74,-85,-12,-40,-66,55,-35,32,3,-81,42,-37,40,43,15,70,51,45,-30,-74,48,-54,71, 8,-18,58,9,29,-25,-26,-20,7,55,-26,-27,12,0,52,-49,-19,6,-83,38,-40,25,35,34,-3,8,11,-74,-52,44,-43,-4, -10,20,127,20,4,-24,-57,46,-7,-3,-42,-75,-54,-20,18,-32,-13,32,-93,-22,28,58,38,-12,54,11,57,1,-63,48,-33,-18, 
  /* [15][0][][] */ 1,107,-17,-1,-21,-17,-13,-48,31,55,-8,19,-10,83,78,87,-55,4,65,62,-9,8,-19,68,-72,-10,30,98,36,29,120,-10, 4,9,-38,5,11,74,43,14,-37,5,-17,46,-16,87,88,83,33,63,34,-8,72,-1,79,18,2,32,-16,20,125,44,126,22, 15,103,-70,-8,35,17,38,-20,40,-34,-22,8,-83,-8,92,97,-6,10,4,58,19,-58,-13,99,-60,-7,20,89,127,41,87,50, 
  /* [16][0][][] */ 4,-101,-6,21,-26,-54,30,-57,19,24,89,-95,65,-40,-59,-65,-22,20,11,21,-84,-9,-17,-6,84,-46,-91,-10,-97,31,-56,41, -61,-67,-11,-61,-40,12,43,35,-11,64,16,-47,-22,-36,-49,-49,37,-34,28,-22,-46,-32,52,49,89,-48,-36,-32,-34,-29,-100,28, 16,-69,15,-6,-14,20,37,-3,6,-2,45,-71,48,-11,-85,-67,14,-12,-19,15,-3,-45,14,3,31,-127,-50,-41,-6,0,-61,-68, 
  /* [17][0][][] */ -8,-55,-44,-38,70,33,3,-38,-18,-25,19,35,-4,91,-84,8,51,30,65,-14,5,-39,-6,-40,-43,-127,33,26,40,22,32,-50, 1,-14,-29,-63,36,8,38,-86,-7,6,-7,-24,-22,-2,-67,1,3,17,-12,20,-32,-13,59,-25,-52,-62,28,-59,27,-7,-42,-32, -1,-36,-90,-55,97,34,-20,-10,2,-10,-42,5,5,34,-7,-2,-9,-41,24,8,3,-35,4,-12,-82,-63,6,-36,96,-2,38,-71, 
  /* [18][0][][] */ -17,28,127,-60,-2,10,31,48,-15,6,-85,5,21,25,90,69,-16,5,26,-50,-8,2,-10,79,21,97,16,-5,-52,127,71,34, -5,38,33,-11,70,-48,12,2,25,44,-78,10,-5,49,36,52,-23,-26,25,-19,-52,-24,75,-7,41,19,31,-55,3,-2,71,12, -15,27,50,-111,62,-19,20,20,-30,10,-101,-5,52,-1,17,21,-31,-8,12,28,20,-82,42,58,73,113,0,-66,20,114,97,24, 
  /* [19][0][][] */ 39,28,-28,81,-11,-3,100,8,119,24,29,35,-21,-7,70,75,-45,50,11,94,26,87,-61,71,-44,-52,-6,80,-70,-75,-34,-51, 96,43,-36,8,-76,-17,79,39,85,13,70,68,-74,-34,24,-18,77,23,-13,15,71,127,6,21,11,-19,-64,30,-33,-100,-37,-104, 106,40,-63,51,-44,-94,12,25,113,-57,49,86,-47,-15,-21,33,-66,-5,-26,74,20,50,-8,-27,-60,0,-39,63,-9,-74,8,-46, 
  /* [20][0][][] */ 6,73,42,-47,1,-23,-32,17,-4,18,-65,6,52,56,4,70,-24,51,41,42,24,-69,-2,74,-53,64,75,53,-19,76,50,-4, -10,36,61,-65,124,76,-37,45,-75,-5,-53,-36,9,77,14,49,108,56,29,46,-35,-9,0,95,-34,52,21,8,55,75,58,-39, 23,57,5,-64,69,-26,-53,36,-47,47,-80,-29,-60,14,35,64,1,42,46,-82,45,-88,51,81,-36,-37,51,-5,-20,127,50,-26, 
  /* [21][0][][] */ -28,-47,-2,-9,34,-35,6,-50,-11,48,6,18,32,-31,32,27,63,-45,-5,-86,-14,-15,-39,-1,-4,-52,-12,8,-39,-26,-5,32, 0,-66,58,29,-39,-127,19,-56,45,-24,-85,55,-25,-31,38,-33,14,27,49,1,-35,30,10,36,-39,-52,28,21,-30,-28,-32,-3, -56,-7,58,-35,50,-63,-16,13,-50,12,-12,43,21,-32,-5,-63,67,-20,43,-24,-48,17,10,-46,-48,-59,-21,35,2,-24,49,-52, 
  /* [22][0][][] */ 3,10,127,-9,-9,-71,-53,17,39,36,-95,-16,23,-20,16,-9,19,3,-25,-65,19,-33,-40,-54,53,43,-67,3,-83,65,7,-2, 30,20,54,-33,-61,-108,-43,59,39,45,-33,-41,51,-65,-31,-3,-16,-61,-21,-56,-47,0,-15,37,-31,71,-55,-14,-60,14,-33,5, -34,-68,38,-37,-47,-53,17,66,-9,48,-60,-23,71,-35,-32,-11,52,-15,6,-81,-33,-45,6,-40,29,14,-66,-107,-60,41,7,-73, 
  /* [23][0][][] */ 12,36,-78,21,-8,68,-17,-56,17,-4,25,4,19,6,12,24,-30,3,78,41,19,25,52,23,-27,1,-2,1,71,-11,27,65, 15,23,-39,29,-41,43,-1,43,-6,-24,17,85,34,14,38,-33,-48,7,-13,0,26,30,11,21,48,32,-19,13,23,2,111,-10, -17,83,-57,12,-63,123,-2,43,33,-1,-3,24,44,57,-7,18,-14,86,33,19,39,-16,18,-35,-16,-15,1,45,127,-8,108,18, 
  /* [24][0][][] */ 7,-24,40,9,31,1,-13,-52,24,66,56,-55,10,20,12,-127,-14,-73,-99,78,34,64,20,13,29,15,58,-52,-39,57,-102,-67, 26,-26,14,72,9,-64,13,-5,-6,-15,-29,-54,-103,21,-34,-100,-33,-6,-48,-23,-37,30,29,22,13,26,36,-7,-60,-1,-85,-5, -7,33,41,37,91,-65,19,6,51,77,-37,-34,-79,71,-33,-76,-34,-16,-87,87,53,53,25,-36,12,-17,56,-48,-58,54,-112,9, 
  /* [25][0][][] */ -32,41,90,-72,31,-23,11,-26,-17,28,-35,8,-15,-35,83,102,-5,8,-25,-60,8,-14,3,48,-61,86,48,65,-12,68,91,15, 50,3,-12,-55,80,-4,15,-26,-31,-17,-31,-84,-50,-1,59,22,35,8,14,31,-27,-35,30,69,-6,19,43,-7,42,13,76,50, -18,56,56,-51,42,-11,31,38,4,86,-75,8,-42,-14,100,127,23,-4,26,-19,-4,-70,34,5,18,22,34,12,-44,22,50,69, 
  /* [26][0][][] */ 50,-13,6,63,49,-26,-32,18,5,-7,-10,30,-12,-58,4,25,35,-25,-92,19,-23,81,67,-5,3,57,40,-69,-39,28,-75,31, -4,40,58,26,-15,-43,-24,90,-12,33,18,0,-39,-41,82,-83,-40,-57,-76,30,35,16,40,-51,3,55,8,1,-44,36,-6,16, 34,98,70,39,-17,-13,-27,61,37,15,-50,-48,-24,9,54,-74,-82,-42,-74,-5,-21,127,109,-35,-25,110,46,4,-55,36,-18,18, 
  /* [27][0][][] */ 60,-37,48,32,-45,-25,-84,-25,32,31,-1,16,-46,-113,46,-73,55,-8,-71,-56,49,37,16,-61,18,32,-2,52,-103,-45,-84,14, 44,0,66,10,-70,-20,-36,38,-8,62,-18,-15,56,-102,-64,-7,-12,3,-49,-10,-30,16,-42,5,69,-38,-6,51,-118,-3,-69,-101, 77,12,120,-7,-60,-61,-102,34,71,12,-25,38,60,-87,-48,-82,80,-21,-65,-24,66,10,27,-5,-9,-12,-22,40,-127,-68,-68,-95, 
  /* [28][0][][] */ 69,56,13,7,28,-82,-54,42,1,41,2,-51,-67,-26,2,13,47,-69,-111,-1,55,106,127,-76,10,122,19,-91,-59,-21,-57,-16, -9,7,54,59,-83,-102,-34,20,41,12,10,8,-69,-20,74,-84,-106,-90,-110,90,16,89,-1,-10,21,69,-22,18,-74,49,-83,25, 40,45,43,11,20,16,-28,50,50,52,-1,-63,52,-30,34,-116,-102,-16,-66,31,-52,64,78,-30,-34,78,97,-37,-22,2,-37,104, 
  /* [29][0][][] */ -68,-46,45,10,23,21,64,20,-66,-17,32,27,29,29,-46,1,-14,46,63,46,-30,16,-32,114,127,26,5,-69,41,7,-7,15, -18,-73,25,42,26,38,61,24,-23,-5,11,-1,12,6,-25,-16,0,12,51,-19,-21,13,-1,15,54,3,-14,-45,21,26,27,40, -42,-9,32,4,12,44,49,88,-72,-24,21,-51,73,5,-52,-34,3,39,80,-24,3,-22,-81,57,120,40,-48,-45,6,12,-2,-3, 
  /* [30][0][][] */ -23,-23,107,-117,36,-46,8,-21,13,6,-16,7,33,-35,36,83,79,32,31,24,-41,-101,44,-12,0,73,34,-14,-64,87,11,-20, -9,-2,0,-79,23,-38,-13,-8,-20,12,-82,-54,-9,-65,34,58,32,22,-21,8,13,-88,82,26,26,67,-7,13,-53,8,21,-20, 0,-2,113,-127,17,-86,6,23,-6,33,-50,-49,51,-29,4,61,40,-21,20,-14,-41,-42,88,53,-28,127,43,-73,-71,-1,71,-6, 
  /* [31][0][][] */ 39,63,74,62,38,36,-105,-53,59,-53,25,6,-73,-71,50,-32,43,-77,-43,-22,68,68,74,-47,-62,27,79,58,-33,53,-98,14, 29,-18,43,32,-63,1,3,-14,15,-60,36,-14,19,38,-42,-59,-5,-14,-115,-30,42,6,34,-17,-18,57,-6,-49,-90,62,-19,-14, 66,7,73,78,4,-26,-17,-3,63,35,20,26,-70,-57,-27,-48,31,-38,-88,87,-11,68,116,4,-55,42,58,-64,-65,-32,-127,76, 
  /* [32][0][][] */ 39,26,-72,-45,25,22,32,12,20,-27,59,98,28,-30,44,98,127,29,50,50,51,-35,-27,35,-46,-21,12,23,-63,10,24,12, 73,8,-40,-11,47,26,61,-101,76,36,28,24,-16,44,-11,17,4,1,64,29,88,12,7,3,-9,-58,-7,-4,-15,-5,-30,-7, 40,-78,-95,-58,-25,22,7,-27,-34,-23,51,63,-3,98,-66,1,39,42,61,7,37,9,25,-52,-60,-60,67,-11,37,-36,14,-51, 
  /* [33][0][][] */ -2,-73,-60,102,55,-46,71,6,59,-43,-18,-32,2,-44,-88,-4,-123,63,77,-71,20,-24,-48,-65,49,19,-11,24,-13,-13,-11,-62, -6,6,-32,-19,-43,31,51,-2,-2,25,-24,40,-41,25,-66,-53,-127,73,-37,-21,-113,-14,-48,-36,31,-37,-73,43,5,-74,-58,41, 23,-46,-76,83,-24,9,20,61,72,4,-1,40,43,24,-49,-2,-32,-18,63,33,-57,24,-93,-73,80,-22,-22,20,-40,-13,-44,-53, 
  /* [34][0][][] */ 87,47,6,65,16,-65,-3,98,37,-4,57,48,-49,-33,-37,-127,-61,-29,-64,-12,24,68,20,-6,24,14,36,-24,-7,44,-105,4, 115,55,-15,95,-23,12,29,36,69,40,99,66,16,-2,88,-9,62,-48,-57,33,-24,118,-28,-53,32,-22,44,40,-60,-12,-58,50, 20,45,21,91,-73,6,17,-24,6,70,103,62,8,-71,-9,-54,23,-80,-86,4,52,28,74,-79,-74,-9,-29,15,-53,-5,-25,14, 
  /* [35][0][][] */ -3,-91,17,-38,77,83,20,-14,60,-35,22,-109,-8,79,-38,-2,-19,59,-35,66,-65,2,-52,-55,-28,-32,-47,-39,-32,-51,4,-10, -21,1,2,-42,76,-31,-25,-81,-27,-57,-29,-89,-79,-42,-16,-29,-55,17,61,-28,-76,62,-37,-25,-32,-71,-37,-127,-19,-100,-16,42, -5,-25,-17,-60,74,111,37,19,69,-35,-26,-124,-104,-5,-83,22,-85,61,-15,-16,-22,60,52,23,31,-2,-21,-46,82,-3,-79,-70, 
  /* [36][0][][] */ 19,38,29,47,-83,-21,33,72,27,35,-42,46,127,-12,-63,-45,46,-22,12,-111,-84,-101,-80,-85,71,91,-27,-54,-4,38,-3,-10, 0,15,92,24,40,-42,63,40,59,81,-85,-64,12,-42,-58,-112,-50,-13,-34,-88,-84,-44,-75,20,84,15,-56,22,-28,-82,-96,25, 20,30,36,16,-3,-111,46,44,12,63,-25,36,102,-34,-46,-93,35,-62,-44,-52,-29,-60,-44,-65,74,15,-36,-70,-84,31,-26,-116, 
  /* [37][0][][] */ 7,21,-16,4,-42,60,16,-5,31,-20,12,2,-13,21,14,43,-21,3,75,-24,14,-14,18,-15,-10,7,13,34,32,-17,125,8, -3,-11,-21,8,-8,34,-10,-16,0,-40,10,-2,-15,23,13,42,-9,7,19,-18,-7,-7,2,-7,-9,9,20,14,7,-9,48,11, 1,6,-15,1,10,9,23,-27,33,-17,-11,52,-19,10,9,77,-8,32,51,34,-1,-10,1,38,-1,-7,10,25,73,-27,127,21, 
  /* [38][0][][] */ -35,-8,19,96,-45,-20,67,-17,1,-9,56,-82,-13,61,4,-110,8,-42,-127,-30,62,4,24,-5,-55,-17,97,-33,-22,-23,-73,25, 26,-39,17,0,-38,10,56,-36,12,-48,38,-40,-28,-3,7,-63,-3,-73,-70,-27,11,50,1,52,27,-45,-73,-36,-62,-3,-111,-3, -43,-68,-20,101,56,56,30,-9,-13,-33,58,-18,-23,42,8,-46,55,-23,-93,118,62,21,-11,-41,-47,14,-19,-44,-67,2,-102,47, 
  /* [39][0][][] */ -74,-52,-39,78,46,-85,96,102,68,84,52,-25,4,5,-77,-44,52,-29,-101,-52,-37,7,-57,27,15,14,-5,-104,-41,-8,-92,16, -80,-76,-24,-21,57,-50,92,30,-37,-54,82,-43,46,-44,-11,-32,46,-76,-91,-31,-65,50,-59,-82,8,-75,22,-105,-41,53,-93,19, -103,-83,-29,71,41,-116,127,-13,24,-57,56,-29,-77,-28,-55,-87,19,-105,-57,-68,-71,58,47,20,123,-43,-44,-47,-13,53,-81,-41, 
  /* [40][0][][] */ 54,56,-13,70,-101,-68,-14,-74,46,36,21,77,-62,-6,-75,-52,67,-119,-65,89,-10,-57,-17,-26,-6,-21,52,-5,-28,3,-103,-6, -40,12,-19,27,-48,-3,-67,32,-7,4,-1,-14,-9,-7,25,13,38,-81,-12,61,-38,18,-88,-38,6,16,38,31,17,-51,-82,54, -19,43,-7,89,-43,-51,-82,-69,8,-6,0,110,4,-112,-70,-54,70,-87,-5,34,52,48,-70,106,43,34,84,-61,1,-60,-127,67, 
  /* [41][0][][] */ 64,59,-72,41,-4,-2,39,41,127,-50,-3,40,67,-52,5,-42,1,41,17,68,55,77,31,22,62,73,11,1,8,-48,-43,-68, -34,62,7,102,-73,-3,56,-28,66,33,33,19,-5,-2,-56,26,43,39,-21,47,55,32,29,13,-34,-7,-22,16,10,2,4,-79, 34,-9,-65,112,-40,-35,-6,30,22,24,-13,9,1,-10,-41,-18,1,24,18,76,78,19,8,-57,-20,15,32,6,-46,-33,-16,-46, 
  /* [42][0][][] */ 11,-26,66,-14,52,27,23,10,-85,59,9,38,-18,123,-39,73,59,23,61,-22,-20,13,-9,116,-32,-63,49,57,50,-2,-23,81, -7,-25,35,-1,47,92,-11,12,-28,53,5,-45,-2,13,23,21,-7,20,36,38,15,-2,2,68,-11,-5,9,-30,52,62,-19,6, -52,-20,13,-16,121,81,47,46,-90,63,-22,0,-27,95,3,-5,72,7,71,-39,23,-35,1,127,-2,-56,39,-38,62,33,33,19, 
  /* [43][0][][] */ -2,2,11,26,-103,-42,40,82,56,-16,-2,-7,-27,15,-79,-92,-94,-4,18,16,2,17,-33,-60,19,-2,-87,6,33,-29,-25,-34, -24,6,-7,35,-45,37,36,35,36,13,84,-27,-38,-22,-62,-68,-37,29,-45,25,-115,60,-48,23,68,6,12,-2,-91,-51,-42,-46, 35,4,-27,64,-127,-7,69,75,-3,-58,1,-38,20,-76,-49,-36,-30,-4,2,22,-83,7,-60,1,45,3,-72,-25,4,-59,-30,-26, 
  /* [44][0][][] */ -34,-19,117,-48,-33,-60,59,15,-36,127,16,-38,35,-106,-20,-50,106,-47,71,-61,-11,-35,37,14,53,-29,-74,37,0,5,-109,-38, -52,-51,53,-15,-69,-104,61,-50,-67,66,-9,-1,10,-37,-22,-17,-7,34,36,49,-45,-17,1,-4,80,-26,-62,-71,-33,-26,-55,-29, -107,-49,115,22,40,-8,85,66,-53,-24,73,19,54,-89,-61,-27,37,-7,-36,-75,-43,-60,16,52,29,-105,-55,-3,-74,-40,-57,-30, 
  /* [45][0][][] */ 36,-48,-7,-42,-45,32,62,14,-31,28,-28,-26,-57,-40,-62,-21,-3,-37,-6,-15,86,-31,86,-13,-77,-127,85,7,18,79,-38,29, 37,-1,30,-53,65,-53,-11,-33,4,18,-16,64,-45,18,-27,-11,12,-27,47,-14,32,-3,46,-32,-83,-79,-16,-59,13,7,-14,-13, -19,17,-34,-20,-44,7,44,-65,22,100,33,36,-40,7,-35,-5,-19,-6,-17,41,38,15,-25,-26,-55,-60,44,57,-32,51,-76,-89, 
  /* [46][0][][] */ 28,-42,-78,-58,-15,48,-23,-42,0,-63,24,-8,-34,70,-21,-1,93,-21,-1,8,67,-45,-36,-30,-84,-124,53,-127,-10,-19,-42,21, -85,-17,18,-39,16,8,-6,-107,-54,50,60,46,-104,-58,-33,20,100,-8,25,99,45,-7,61,-9,-92,-127,-72,-47,-81,-38,-120,21, 1,56,4,-43,58,46,-61,23,1,-73,62,-47,-15,17,-3,56,121,-86,12,27,116,53,-23,-45,-96,-32,29,-32,-7,-32,-100,-37, 
  /* [47][0][][] */ 2,-100,54,-42,-51,-96,25,-31,93,-31,-10,42,35,-62,34,22,86,-102,-57,-4,70,-34,27,-29,-75,-21,-23,27,-107,-34,-40,29, -4,13,9,-49,-54,-79,-21,42,74,-5,5,34,41,-71,-24,85,33,-108,-10,-34,-3,-39,-20,-59,-44,32,-7,42,-98,19,-55,17, 26,-32,76,-57,-36,-127,-7,1,-14,-50,54,35,-17,-76,-16,70,75,-103,-28,-34,103,1,-9,19,-91,52,-3,-20,-95,-43,-25,-65, 
  /* [48][0][][] */ -41,7,87,-45,-70,-107,-33,11,36,26,8,5,69,-127,45,45,40,-61,-5,-44,4,-122,0,5,8,38,-27,-19,-93,10,-22,43, -11,-105,51,-79,-74,-112,15,-29,13,28,-54,-43,4,-119,65,61,-26,-25,-15,-36,82,-54,20,-13,28,16,-124,-51,-112,-55,-53,41, -62,-17,111,-31,-7,-115,-50,-59,-53,112,-47,17,-27,-104,-21,16,99,-78,14,-59,40,-83,-52,-25,47,54,-49,26,-116,34,2,-69, 
  /* [49][0][][] */ 11,19,-32,6,-7,45,-14,-28,25,-70,23,13,-12,26,-39,40,22,55,67,-5,-23,-28,0,-21,-18,26,-2,18,82,-59,112,-7, -3,40,0,-11,-80,8,1,-30,56,-66,-18,-10,-37,-20,-16,88,-35,10,88,-22,-21,-6,8,4,-23,-1,27,7,53,-63,60,-17, 1,-8,-6,-1,-1,39,-35,-5,58,-45,-3,-16,-40,42,2,67,-57,34,32,53,25,-3,32,-16,-1,54,-1,8,30,-32,127,16, 
  /* [50][0][][] */ 98,4,29,16,47,-3,-55,38,89,11,2,2,-24,-66,127,40,33,4,-56,84,23,90,60,10,-2,-4,27,-28,-56,25,-8,37, 51,62,26,27,16,28,-41,5,42,8,-4,50,-6,-19,110,12,5,11,-80,-24,-2,60,58,15,-5,-8,55,64,-26,52,10,19, 39,76,40,34,-15,-20,-87,9,41,64,-94,11,-77,-9,33,-7,9,-57,-63,14,-9,120,73,-24,-12,74,32,54,10,44,28,-22, 
  /* [51][0][][] */ -6,16,95,61,23,27,62,42,-20,-2,-39,14,-10,13,85,-24,-25,72,105,31,-26,41,-44,91,88,42,45,6,70,93,113,15, -3,50,74,18,14,16,68,83,-36,-2,-45,-19,-29,69,41,-31,3,-3,33,18,-76,55,30,16,35,25,31,-14,79,65,13,83, -44,69,70,-11,86,96,64,35,-24,49,-18,-24,53,96,13,23,-23,24,20,-56,-26,-60,-25,119,127,-2,-46,3,103,25,99,57, 
  /* [52][0][][] */ 8,-47,47,-18,-29,-53,-84,19,35,64,-29,-11,-38,-49,91,3,63,4,-114,27,95,42,72,-4,-56,42,-13,76,-127,39,-68,29, 20,-5,52,7,21,-47,-72,14,-52,36,-76,-22,-31,-97,49,1,36,6,-76,-56,-55,48,63,-21,12,49,-13,29,-80,68,-61,-12, 27,47,114,2,-26,-74,-30,19,-59,96,-28,-4,53,-90,49,-35,0,-56,-111,-36,51,64,88,-41,-7,32,14,-1,-106,28,-35,43, 
  /* [53][0][][] */ 32,-48,-12,-78,-86,-15,52,-94,17,-58,-48,87,-32,-19,-66,2,-61,56,74,53,0,-83,86,-70,-53,-104,14,-31,109,-51,112,-114, 13,-10,-88,-59,-77,16,79,-68,51,58,-11,50,-6,-45,-16,-43,54,-35,42,-82,-14,1,87,-64,-3,-71,36,57,18,2,70,-61, -6,-43,-33,-52,-38,-3,36,9,41,-48,-52,13,-76,-62,-53,-20,-38,-30,3,-69,-83,-60,2,13,18,-22,37,0,127,-34,120,-61, 
  /* [54][0][][] */ 30,57,14,60,-4,-7,-32,-25,20,58,-108,-38,-17,6,88,-23,40,58,-84,-28,-58,-10,83,8,50,-4,14,15,-20,35,-27,-15, 41,71,16,78,46,34,-24,28,-65,14,2,5,-2,15,79,-30,-29,-14,-71,-12,-61,-3,2,32,-7,33,12,19,-21,108,-13,88, 18,127,66,21,37,14,-13,-33,-13,95,-14,-33,-53,-28,73,8,-31,-12,-52,49,38,-9,10,72,15,-34,30,3,7,97,39,96, 
  /* [55][0][][] */ 3,-40,-98,-33,85,68,67,12,15,-57,6,56,-16,127,10,25,91,58,120,48,-10,-21,2,-22,-70,-99,48,29,65,50,54,3, -17,3,-90,-39,52,14,37,-57,-57,-20,31,74,-40,32,-21,71,29,-42,89,-37,-57,5,-22,-59,-67,-69,95,11,71,56,55,3, -7,2,-108,13,99,28,17,19,17,-23,44,-39,50,22,-46,-45,-6,-39,65,-24,-66,-7,2,-32,-73,-11,2,28,51,-37,64,-35, 
  /* [56][0][][] */ -35,-98,-27,-34,15,-14,4,8,22,-33,33,26,18,-3,-41,7,-5,-21,-31,28,-45,-28,2,-13,-55,-127,1,11,22,-32,-56,-22, 17,-55,-43,-48,26,-17,-20,-58,-16,4,-4,-47,17,48,-77,1,44,29,20,18,-2,-21,33,15,-61,-38,-8,-62,-22,21,-36,-69, 20,-46,-17,-41,49,54,-40,-29,-30,8,40,-34,-53,-40,-95,-10,-26,23,-22,8,0,10,22,-2,-25,-50,18,-53,75,-57,-32,-16, 
  /* [57][0][][] */ -27,-2,33,50,-57,-71,14,59,-29,58,51,-11,-18,-119,41,-113,34,-65,-41,16,37,11,-51,-46,49,33,-31,35,-60,-1,-77,42, -42,-3,23,-33,-82,-44,28,-11,-18,90,55,43,23,-127,10,-36,-21,-40,-23,-4,-30,-46,18,-27,50,-61,-41,73,-66,-48,-19,-26, -34,-34,2,65,-83,-29,3,-2,-49,75,3,-26,55,-112,-10,-79,15,-21,-38,-47,22,-15,-58,-29,60,-24,-113,-8,-49,-35,-44,-42, 
  /* [58][0][][] */ 11,13,-56,19,-32,67,47,70,89,-16,30,40,81,-38,-23,-1,75,72,90,77,92,98,-24,-14,-45,-33,-47,13,-37,-63,49,-71, -14,19,-67,63,-38,9,30,-73,61,5,46,89,-19,-32,27,80,47,64,118,87,13,101,41,-29,-63,13,-5,91,-6,-47,3,-80, 31,9,-75,108,-116,-46,11,2,127,-33,-22,60,-7,23,1,35,0,-2,10,12,49,0,71,-52,-42,-71,-49,90,-31,-99,45,-71, 
  /* [59][0][][] */ -62,-44,46,15,20,60,64,50,-39,-36,8,1,31,29,-30,3,3,10,114,33,30,35,-14,127,118,40,-12,-68,64,38,-4,14, -50,-70,20,24,31,105,48,34,-35,-4,37,8,60,27,-17,-10,-25,39,40,22,-25,-29,-20,31,86,35,-2,-77,57,-20,66,29, -73,-63,23,5,-52,19,106,63,-69,-22,10,8,78,-2,-57,16,31,111,74,-12,24,13,-79,28,114,34,-71,-35,32,12,48,16, 
  /* [60][0][][] */ -18,-22,-44,75,-88,3,72,70,19,15,84,13,-3,-62,-45,-39,-59,41,-9,-67,27,-3,-82,-79,100,58,-21,77,-48,-53,-57,-56, 17,1,-11,29,-50,-39,53,85,26,2,19,-12,1,-14,-70,-48,-93,1,-22,-58,-29,70,-44,5,40,31,-39,-22,-27,-111,-36,-37, 62,-37,-57,103,-127,-7,17,94,0,17,99,58,-59,-50,-47,-92,-31,-18,-31,48,-13,22,-2,-9,47,50,-60,38,-25,-49,-59,-42, 
  /* [61][0][][] */ -16,-67,-16,66,21,40,104,-27,35,-3,1,-40,40,116,-7,36,-127,-13,-1,40,-67,-4,-7,-18,94,0,-23,13,51,-75,23,43, -13,43,-1,16,-18,87,13,4,-27,3,37,-12,-64,19,-57,-46,-30,43,0,-84,-13,-29,1,25,-32,6,-48,38,-27,-51,5,-22, -50,17,-60,43,95,54,110,-3,-33,56,17,-37,-17,70,-17,-70,-115,73,15,3,-71,-1,40,-34,8,-73,-11,12,26,35,9,-2, 
  /* [62][0][][] */ 39,28,-30,-21,19,58,70,-40,42,-35,-38,43,-26,48,8,35,22,16,127,37,72,-6,-8,16,-26,-27,-32,66,-8,11,86,49, 1,60,1,-5,-14,26,37,-27,21,-6,-42,15,33,49,18,84,38,-2,31,-4,31,-21,28,85,-12,-44,8,-5,50,-5,113,-7, 43,-25,-2,-11,6,-1,54,1,10,-14,-3,74,30,61,54,124,36,66,94,16,41,-16,-4,73,-83,-119,32,29,-2,-13,54,-33, 
  /* [63][0][][] */ 86,49,-2,-30,33,-14,12,47,63,35,-22,-10,32,40,104,24,20,88,24,34,16,50,36,64,-53,45,15,0,-42,-13,13,-73, -3,55,-34,6,43,-27,-16,52,50,50,2,18,-23,-21,9,98,-32,69,34,25,-11,77,-14,-27,-17,37,30,13,-14,-56,-12,-32, 95,25,-53,6,-66,-44,1,-10,86,-29,-98,59,-22,-38,98,92,-14,0,-54,62,50,127,5,-13,-72,-102,11,-25,-35,-7,-9,-39, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant10_scale = { 64, { 0.0026803696528077126, 0.0025644600391387939, 0.0020210109651088715, 0.0020759191829711199, 0.0024685238022357225, 0.0030511047225445509, 0.0023813976440578699, 0.0031347484327852726, 0.0023633711971342564, 0.0026212194934487343, 0.0020149988122284412, 0.0028221465181559324, 0.0019067189423367381, 0.0023740315809845924, 0.0029723858460783958, 0.0023787715472280979, 0.0023673784453421831, 0.0020381917711347342, 0.0022970500867813826, 0.001735817757435143, 0.0021809220779687166, 0.0029777910094708204, 0.0025616043712943792, 0.0032268469221889973, 0.0026990852784365416, 0.0025418323930352926, 0.0023872829042375088, 0.0028406046330928802, 0.0019753833767026663, 0.0026836157776415348, 0.0025472992565482855, 0.0019110151333734393, 0.0025270832702517509, 0.0025102370418608189, 0.0019407485378906131, 0.0020775897428393364, 0.002159882802516222, 0.0048092473298311234, 0.0023142003919929266, 0.001962774433195591, 0.0018249028362333775, 0.0019972804002463818, 0.0024873535148799419, 0.0029490720480680466, 0.002081775339320302, 0.0023003756068646908, 0.0020302899647504091, 0.0030024778097867966, 0.0022394233383238316, 0.0039523681625723839, 0.0020346243400126696, 0.0019429709063842893, 0.0024488042108714581, 0.0019961250945925713, 0.0023030317388474941, 0.0022915799636393785, 0.0021311959717422724, 0.0028911603149026632, 0.0021586564835160971, 0.0023069628514349461, 0.0030665888916701078, 0.0027480933349579573, 0.0025680109392851591, 0.0019539052154868841, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[64] = { -5417, 3045, 3772, 7621, 4366, 3973, 1462, -3460, -500, -10645, -8123, 4994, 6723, -2336, -830, -12846, 12456, 11567, -8847, -7339, -4087, 13195, 7502, -9793, 2757, -5848, -4593, 6882, -903, -9023, -305, -4379, -3972, 1645, -1035, 11613, 2797, -8201, 5391, 8222, 1566, -2204, -5154, 7922, 9841, 8392, 14179, 5778, 6991, 8163, -8572, -12301, 1434, 11136, -5829, 6138, 10312, 4638, -5931, -6446, 2087, 7259, -11139, -6228, };
const TfArray<1, int> tensor_dimension11 = { 1, { 64 } };
const TfArray<64, float> quant11_scale = { 64, { 0.00023183885787148029, 0.00015880214050412178, 0.00015061772137414664, 0.00016370543744415045, 0.00024546019267290831, 0.00024294151808135211, 0.00023803061048965901, 0.00018296786583960056, 0.00021074849064461887, 0.00013671701890416443, 0.00020035008492413908, 0.00020122282148804516, 0.00015200587222352624, 0.00020607566693797708, 0.00025364811881445348, 0.00022367555357050151, 0.00017947729793377221, 0.00019175463239662349, 0.00017097071395255625, 0.00015239075582940131, 0.00018403159629087895, 0.00014584317978005856, 0.00017705703794490546, 0.00026053388137370348, 0.00016773455718066543, 0.0001999116939259693, 0.00018712737073656172, 0.00018627813551574945, 0.00018210755661129951, 0.00020889060397166759, 0.00026120422990061343, 0.00019341114966664463, 0.00021009829652030021, 0.00018620291666593403, 0.00019203696865588427, 0.00015096600691322237, 0.00020115500956308097, 0.00037695013452321291, 0.00012628547847270966, 0.00018375263607595116, 0.0001672540238359943, 0.00018643298244569451, 0.00029169506160542369, 0.00019963578961323947, 0.00020030634186696261, 0.00018113889382220805, 0.00016222581325564533, 0.00026716283173300326, 0.0002172748208977282, 0.00014542587450705469, 0.00020690078963525593, 0.00018003617879003286, 0.00017874980403576046, 0.00013914769806433469, 0.0001607018057256937, 0.00015549990348517895, 0.00015894167881924659, 0.00023466847778763622, 0.00022880836331751198, 0.00021225077216513455, 0.00018581474432721734, 0.00017069304885808378, 0.00023396147298626602, 0.00015449237253051251, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[64*1*1*32] = { 
  /* [0][0][][] */ 89,22,-81,-10,-15,-38,63,29,44,62,-59,75,18,-26,67,127,-2,67,0,-22,75,7,20,2,-57,-19,-29,12,-4,38,28,-10, 
  /* [1][0][][] */ 127,-21,23,70,-107,-41,-93,-73,75,-77,63,26,58,38,16,-50,25,-47,-90,21,-2,35,-17,21,-62,-61,114,-35,-94,14,-49,28, 
  /* [2][0][][] */ -109,50,-49,34,75,-48,66,49,22,39,-19,39,-15,47,-65,-76,73,-23,-127,-68,-6,-109,-15,2,-27,-4,10,93,-30,8,-69,21, 
  /* [3][0][][] */ -62,-76,26,-9,120,-24,76,28,-12,79,-10,10,29,5,-127,-114,-48,20,-10,9,-95,-35,-57,-12,109,-122,-55,-82,-35,55,-88,-8, 
  /* [4][0][][] */ 12,-33,10,59,-69,-53,65,127,50,-41,86,-6,-38,-38,-37,6,-42,-61,9,-64,-39,46,-10,-62,46,82,-63,-58,-46,-20,-31,-71, 
  /* [5][0][][] */ -18,11,-99,41,-62,-28,45,-35,55,-66,116,127,27,-97,-68,61,21,13,62,32,26,-21,-70,-25,47,-21,-43,-17,-47,-122,-6,-53, 
  /* [6][0][][] */ 2,-8,68,-31,53,-51,-3,25,-12,-16,-29,-59,51,-46,-34,58,47,17,31,-14,-34,-48,-22,39,22,127,-24,-92,-36,27,-24,-30, 
  /* [7][0][][] */ -47,10,127,-28,4,20,13,-13,-54,34,-72,-2,-8,-35,79,5,60,21,-8,-30,-46,-47,-25,113,67,115,-6,-18,-34,60,74,55, 
  /* [8][0][][] */ -11,-83,28,-6,-53,-9,63,23,-67,17,105,-27,68,-45,-81,8,34,30,78,-8,-2,19,-61,14,127,-47,-40,-28,28,-34,39,5, 
  /* [9][0][][] */ -32,98,108,-4,18,-70,120,-14,-89,92,-80,-43,107,-26,127,96,-5,111,36,27,-69,8,19,55,34,74,-48,104,49,31,119,-61, 
  /* [10][0][][] */ 56,-42,-7,60,-20,37,-3,-83,101,2,-12,53,-3,-36,86,120,30,30,37,46,127,65,19,-23,-37,-35,32,50,20,-62,-4,7, 
  /* [11][0][][] */ 71,-15,62,0,11,-86,-77,-113,31,40,-37,78,3,-80,26,-7,12,-22,-55,45,20,79,30,-42,-29,3,-17,11,-127,-11,-30,-17, 
  /* [12][0][][] */ -26,-84,-116,-106,50,2,116,-21,-13,-8,106,-34,-39,96,-60,21,-30,-77,-68,108,-45,36,22,13,-71,-127,-22,44,3,-69,-53,49, 
  /* [13][0][][] */ -47,57,2,39,78,54,-77,9,-27,118,-71,-2,-127,-33,33,77,-40,43,-16,77,66,-54,62,-11,-53,-93,22,-33,27,63,-6,113, 
  /* [14][0][][] */ -4,21,127,29,-16,-5,-45,22,-23,103,-38,-52,13,-47,76,-45,-9,15,-70,-18,-52,32,85,13,34,35,39,-26,-50,49,-40,46, 
  /* [15][0][][] */ 36,84,-13,25,12,85,-12,-45,31,12,-22,31,-47,42,101,93,4,23,37,-38,-10,-23,-25,91,6,15,53,64,93,57,127,18, 
  /* [16][0][][] */ -33,-68,19,-21,-67,11,59,32,-44,-66,31,-29,-42,3,-119,-30,-4,-24,4,-44,-22,-33,35,-28,77,-127,-97,-30,-24,14,-99,-36, 
  /* [17][0][][] */ -16,-117,-66,-71,43,-5,8,-56,-13,19,-11,-10,0,13,-44,-37,21,-30,-7,-47,-40,-25,-8,-35,-52,-127,30,-12,33,-41,2,-52, 
  /* [18][0][][] */ 1,82,127,-75,45,-44,55,45,-21,66,-101,-63,30,6,86,51,22,61,58,27,16,-54,-10,84,56,60,-39,18,40,82,37,-13, 
  /* [19][0][][] */ 127,96,-60,123,-38,25,6,30,108,-13,86,85,-8,-4,1,80,3,41,-9,-52,32,61,-23,3,-63,49,53,-14,-53,-23,-30,-92, 
  /* [20][0][][] */ -75,-38,38,-83,104,-27,47,88,-66,110,-24,52,-88,107,112,30,113,-35,-6,38,82,-64,43,40,-90,-49,48,-69,-40,127,7,-31, 
  /* [21][0][][] */ -86,-74,-75,-112,-20,-127,-8,-114,-78,51,-55,59,23,3,-19,17,-78,50,-29,2,38,-99,-17,-86,-2,-3,-4,112,-37,-65,4,42, 
  /* [22][0][][] */ -45,37,70,-38,-46,-70,-62,-17,35,127,-15,-86,51,-79,46,21,27,1,-10,-68,-74,-48,-63,-42,75,103,-101,-68,-55,65,-28,-63, 
  /* [23][0][][] */ -7,27,-23,54,24,127,-14,-43,24,47,-3,99,54,38,-56,50,-28,78,32,27,42,-3,37,-25,-13,30,41,24,0,-31,89,-31, 
  /* [24][0][][] */ -11,-67,9,19,89,37,17,-39,41,31,9,-98,-127,42,-41,-94,-52,-5,-108,109,69,31,115,-89,-44,5,118,-23,-39,-6,-74,-20, 
  /* [25][0][][] */ 11,70,28,-67,20,-58,8,-17,-9,27,-26,-18,20,-66,78,127,46,37,18,36,-47,-58,-8,91,-28,11,16,47,23,77,121,29, 
  /* [26][0][][] */ 68,77,49,29,24,5,-81,75,50,35,-3,24,-39,-66,10,-19,4,-7,-127,33,-4,125,122,-55,-39,123,16,-6,-55,64,-53,32, 
  /* [27][0][][] */ 79,40,64,40,-89,-117,-82,-23,35,66,-2,6,63,-113,14,-57,56,-25,-63,-27,-3,94,14,-47,-22,37,-43,52,-127,-13,-124,39, 
  /* [28][0][][] */ 3,46,44,64,-49,14,-118,-32,58,-67,-38,59,0,-82,-25,21,-11,-9,-127,105,67,51,125,-8,32,118,37,-73,-53,59,-14,-27, 
  /* [29][0][][] */ -61,-60,58,-7,-16,48,87,55,-58,16,29,16,94,39,-20,19,-28,20,107,16,6,-34,-16,94,127,47,-31,-74,43,59,60,23, 
  /* [30][0][][] */ -2,-31,94,-82,9,-72,29,43,-24,54,-41,-27,60,-48,12,46,7,-13,18,-33,22,-66,30,-10,9,127,-22,-2,-26,41,40,25, 
  /* [31][0][][] */ 17,45,38,80,38,37,-68,-52,-10,-25,-10,-46,-72,5,64,-66,81,80,-56,115,10,127,121,-18,-29,-17,54,-46,4,15,-85,31, 
  /* [32][0][][] */ 105,-22,-68,-41,20,61,-5,6,127,-44,-42,5,-23,-24,-44,16,-25,29,40,72,7,-72,35,-7,-2,-81,82,-14,114,-32,85,34, 
  /* [33][0][][] */ 2,46,-110,80,-98,119,127,40,-13,-45,-47,5,94,57,-28,-108,-96,56,27,-98,-67,46,-74,16,86,-80,-9,57,9,-60,4,-86, 
  /* [34][0][][] */ 98,30,3,127,-68,-57,-24,36,7,45,39,1,34,-51,28,-52,40,-25,-81,10,22,27,82,15,-40,-18,83,-32,-58,20,-67,-3, 
  /* [35][0][][] */ -60,-48,-75,-65,2,127,19,-100,58,-25,1,-58,-31,38,-86,-65,-126,-55,7,11,-92,-18,87,-5,-50,-28,13,-84,38,-61,-80,10, 
  /* [36][0][][] */ -12,-24,5,-28,-2,-20,55,70,51,90,10,-8,115,-42,-25,-23,27,9,3,-127,-78,-88,-71,-56,66,49,-85,39,-20,9,-36,14, 
  /* [37][0][][] */ 2,18,-22,-5,0,40,44,-16,9,-14,-13,48,-18,41,17,50,16,45,72,25,41,-4,12,36,-8,-10,18,40,14,-3,127,-3, 
  /* [38][0][][] */ -44,-99,-48,127,91,38,28,-81,0,-35,83,-23,-96,87,-100,-88,-79,-67,-115,18,114,59,-5,-108,-83,-2,127,27,-78,6,-80,-2, 
  /* [39][0][][] */ -104,-79,-4,10,54,-59,103,21,11,-55,29,-110,-8,45,-15,-33,72,-9,-75,-67,-18,20,-23,13,46,-55,-32,-127,-1,11,-109,-14, 
  /* [40][0][][] */ 37,104,78,101,-44,58,-89,8,31,-34,93,-22,-57,-127,-64,-99,87,18,-91,21,74,-65,67,-69,-1,-47,29,65,12,-86,-115,88, 
  /* [41][0][][] */ 63,-44,-60,127,-9,-16,1,100,65,-1,36,-19,-75,-65,-8,-20,-79,65,-6,18,32,108,-47,-5,46,68,-1,37,18,-88,-62,-28, 
  /* [42][0][][] */ -12,-29,40,-17,127,67,35,8,-78,75,24,38,-30,8,3,28,21,27,39,-5,-11,-5,-27,61,20,-46,8,2,40,25,-23,-28, 
  /* [43][0][][] */ -20,15,-103,-41,-8,-21,46,25,62,-11,-45,-52,58,-40,-15,-49,-127,40,90,10,-45,-22,12,-99,-11,-38,-72,38,-19,-17,-53,-6, 
  /* [44][0][][] */ -74,-28,89,-49,-51,-21,45,-7,-20,14,89,-56,8,-127,-13,-32,76,-12,61,-102,-59,-36,-75,0,101,-64,-19,-94,-7,-50,-84,30, 
  /* [45][0][][] */ 22,-7,-30,-6,-32,-57,-55,-19,-63,19,17,58,-16,-33,-72,-79,97,-61,0,-49,35,24,-24,-26,-59,-127,78,-34,20,24,-76,14, 
  /* [46][0][][] */ 29,-37,-26,-127,29,15,-22,-93,18,-68,-69,-50,-20,-14,-47,26,78,-91,-74,36,4,-22,96,43,-121,-115,4,-23,-81,-30,-104,-10, 
  /* [47][0][][] */ 7,-51,-6,-58,9,-127,-36,4,64,-62,55,53,-14,-89,-7,57,4,-90,-35,37,-3,19,-64,-4,-20,76,-44,82,-59,-34,13,-2, 
  /* [48][0][][] */ -42,-36,127,-54,-65,-79,-21,-25,-12,15,-21,22,10,-82,2,-28,75,-30,4,-103,2,-11,-38,6,66,36,-74,7,-84,55,6,40, 
  /* [49][0][][] */ -10,14,-127,-91,99,3,-48,-3,3,-16,-36,22,-34,-41,-81,23,-3,46,-9,62,-91,-37,-30,-82,-51,-8,-20,-29,106,-68,85,-99, 
  /* [50][0][][] */ 75,25,16,29,-8,-50,-42,17,-4,-12,-18,54,-20,-7,127,59,-4,9,-69,79,22,116,60,31,5,12,81,19,-3,39,29,16, 
  /* [51][0][][] */ -43,24,127,-13,-15,23,84,76,-8,-9,-8,24,-21,18,-1,43,-10,93,72,16,-36,-12,9,99,116,57,-7,31,80,38,64,6, 
  /* [52][0][][] */ 93,85,98,6,-31,-103,-79,7,-56,4,-61,20,42,-92,109,-26,108,-83,-127,-17,33,74,98,-18,-41,30,32,41,-118,62,-46,72, 
  /* [53][0][][] */ -56,-14,-36,-50,67,23,-4,-66,-38,-23,-71,61,-6,54,-95,-34,27,-52,61,3,-30,-93,3,-11,-100,-79,17,-53,-12,-82,81,-127, 
  /* [54][0][][] */ 42,85,103,71,-24,-27,-70,-23,10,36,-71,-28,19,-40,37,-32,12,23,-88,67,24,27,65,3,21,70,43,83,-57,8,-24,127, 
  /* [55][0][][] */ -15,-34,-93,-53,49,15,67,-75,-16,-122,-79,79,-26,127,0,40,-34,-15,34,-35,-73,-36,-9,-27,-68,-109,81,-10,95,-45,71,-66, 
  /* [56][0][][] */ -14,-86,-24,-14,66,44,5,-38,-30,29,33,-46,-18,49,-108,-30,-15,26,-49,-54,-27,24,-44,-69,-97,-127,-7,-30,43,-13,-23,-91, 
  /* [57][0][][] */ 31,62,-17,12,-80,-64,-12,-42,6,127,94,-18,18,-60,19,2,-41,15,-63,16,-24,-4,-33,-33,31,24,-41,-53,-55,-12,-71,44, 
  /* [58][0][][] */ 68,11,-57,56,38,87,31,39,101,-14,60,45,25,11,-6,-14,-22,-9,-1,-27,-6,127,-40,11,14,-46,-10,13,-65,-29,55,-65, 
  /* [59][0][][] */ -40,-53,41,-1,-9,13,104,61,-41,-24,41,13,19,13,-63,14,-25,85,115,32,-22,-41,-27,109,127,47,-50,-46,38,-8,51,12, 
  /* [60][0][][] */ -35,2,-94,119,-117,-59,106,114,81,27,120,-7,-10,-85,-33,-96,-59,-22,-18,74,-10,86,-34,-21,127,50,-43,-37,-35,-81,-58,-63, 
  /* [61][0][][] */ -3,-111,-85,42,22,-5,23,-43,-67,-14,-48,-11,88,20,-72,-76,-75,21,84,-127,-115,-20,-40,-48,83,-54,32,-52,65,-29,26,13, 
  /* [62][0][][] */ 24,9,-5,-34,23,-26,74,-10,39,-26,-32,21,-8,20,91,127,41,70,95,74,9,21,37,72,-48,-88,-6,37,50,31,97,29, 
  /* [63][0][][] */ 127,-5,-15,18,-70,-60,23,-32,97,-1,22,57,-66,52,94,65,-33,103,-26,51,7,87,8,57,-30,3,62,16,-28,-27,-20,-75, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 64,1,1,32 } };
const TfArray<64, float> quant12_scale = { 64, { 0.004919304046779871, 0.0033695644233375788, 0.0031959023326635361, 0.003473605727776885, 0.005208329763263464, 0.0051548872143030167, 0.0050506843253970146, 0.0038823282811790705, 0.004471795167773962, 0.0029009485151618719, 0.0042511550709605217, 0.0042696734890341759, 0.0032253570389002562, 0.0043726442381739616, 0.0053820665925741196, 0.0047460896894335747, 0.003808263223618269, 0.0040687713772058487, 0.003627764992415905, 0.0032335238065570593, 0.0039048991166055202, 0.0030945930629968643, 0.0037569084670394659, 0.0055281734094023705, 0.0035590981133282185, 0.0042418530210852623, 0.0039705871604382992, 0.0039525674656033516, 0.0038640736602246761, 0.0044323732145130634, 0.0055423970334231853, 0.0041039204224944115, 0.0044579990208148956, 0.003950971644371748, 0.0040747621096670628, 0.0032032923772931099, 0.004268234595656395, 0.0079983668401837349, 0.0026796052698045969, 0.0038989798631519079, 0.0035489019937813282, 0.003955853171646595, 0.0061893709935247898, 0.0042359987273812294, 0.0042502270080149174, 0.0038435198366641998, 0.0034422101452946663, 0.0056688301265239716, 0.0046102749183773994, 0.0030857385136187077, 0.004390152171254158, 0.0038201217539608479, 0.0037928265519440174, 0.0029525239951908588, 0.0034098727628588676, 0.0032994954381138086, 0.003372525330632925, 0.0049793445505201817, 0.0048550008796155453, 0.004503671545535326, 0.0039427350275218487, 0.0036218734458088875, 0.0049643428064882755, 0.003278117161244154, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[32] = { -14674, 5120, -211, -16129, 10276, 32691, -6716, -677, -19774, 2838, -4794, -11140, 5106, 31067, -5086, -24827, 760, -34127, -31447, -63, -4787, -15503, 6035, -31039, 2229, 8882, -6237, 9674, 37261, -8323, 19098, -9032, };
const TfArray<1, int> tensor_dimension13 = { 1, { 32 } };
const TfArray<32, float> quant13_scale = { 32, { 0.00016542978119105101, 0.00014237120922189206, 0.00013285584282130003, 0.0001123092879424803, 0.0001140239619417116, 8.049548341659829e-05, 0.00016663879796396941, 6.5527776314411312e-05, 9.1354180767666548e-05, 0.00010628323070704937, 0.00010304425813956186, 7.4839903390966356e-05, 8.0559453635942191e-05, 7.8462158853653818e-05, 0.00015317207726184279, 0.00011738267494365573, 8.2824823039118201e-05, 7.130914309527725e-05, 0.00010424312495160848, 9.8386219178792089e-05, 6.6299115133006126e-05, 0.00010817717702593654, 9.0079403889831156e-05, 7.7473676356021315e-05, 0.00015497239655815065, 7.6119868026580662e-05, 8.6427266069222242e-05, 0.00014229057705961168, 9.7923533758148551e-05, 0.0001090370278689079, 0.00018944445764645934, 6.3138279074337333e-05, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[32*1*3*32] = { 
  /* [0][0][][] */ 27,50,-26,-31,19,-4,-47,54,36,32,-64,72,30,127,64,6,-14,54,-49,92,13,79,81,47,-46,-70,-25,77,86,15,-44,1, 79,32,-11,12,28,-84,-15,24,39,-39,30,44,54,-8,51,-11,-67,-50,33,62,77,-24,-58,42,98,32,15,-14,38,57,62,-51, -54,-78,-36,-19,-28,2,96,-56,-8,-30,-6,34,37,-25,-41,-73,-23,4,-31,14,-29,63,22,-6,54,10,14,-70,-44,13,-52,19, 
  /* [1][0][][] */ -35,47,-27,-16,-112,-68,63,103,117,20,-74,-50,-3,-1,-53,63,-22,53,8,1,44,-49,21,-118,-125,127,71,-39,-82,2,29,19, -93,92,-4,-42,-67,-3,-87,15,-30,-26,-64,-9,30,55,31,-56,54,59,77,34,-66,-22,-9,-17,-23,-28,-9,31,-31,-66,59,5, 40,31,62,43,29,-61,-62,95,-47,-10,-47,44,-59,-69,-61,-32,-12,-14,-49,-45,-19,23,82,-9,-19,2,7,38,5,-3,74,43, 
  /* [2][0][][] */ -56,-20,5,-47,77,57,37,19,-77,110,-76,-8,112,-80,-66,74,33,11,56,-46,-28,-17,46,-19,21,34,-63,-41,-37,97,100,14, -24,13,-64,-87,76,-16,-80,53,-81,-4,-56,-61,20,38,50,82,-24,-37,17,37,17,-44,-1,-87,-80,55,-41,-15,-18,50,-53,21, -127,72,23,-58,-17,-43,-18,54,-86,59,21,-67,124,-1,-54,-12,47,13,63,-87,-66,-91,79,14,13,69,-36,90,24,-28,96,0, 
  /* [3][0][][] */ 55,38,3,-25,12,-12,22,-11,-16,-31,54,49,51,43,13,-127,-39,-66,-49,11,-46,65,36,53,-11,55,73,48,-23,-36,-48,-24, -28,70,6,14,-19,45,78,-26,87,54,-23,9,-62,55,-53,-50,-27,42,19,18,57,5,98,-34,38,22,-3,-8,-17,36,-6,-56, 88,-37,16,30,44,7,-14,-17,37,57,71,80,17,1,-5,-45,-59,-88,21,74,27,50,-4,-62,7,-20,70,5,41,-6,35,-53, 
  /* [4][0][][] */ 25,-44,-102,-20,-2,-20,-1,-23,20,9,-34,-20,-45,-5,23,46,-9,21,-64,17,-9,13,32,21,-30,-70,14,31,-33,-21,-20,-20, 20,-69,-9,-67,-24,12,51,-16,-64,16,49,32,36,57,-32,-59,-24,-10,-74,10,-2,41,-8,23,-28,-40,12,-44,44,35,-55,-44, 3,-9,-127,-54,51,-60,-11,14,3,30,-22,17,-5,44,0,-38,54,71,4,0,52,-34,-3,-34,-21,-82,-46,22,-8,8,-5,-48, 
  /* [5][0][][] */ -97,5,-62,-30,-63,-49,38,-72,-40,8,19,-104,-54,10,67,-10,-81,26,21,47,53,-15,-110,9,10,-34,-98,-57,-33,-80,15,-21, -27,-79,-56,-51,5,-63,32,-20,-71,-81,-31,40,-29,-62,-67,-51,-17,79,-48,-7,-77,-21,56,-3,-7,-77,-6,-10,36,-105,27,-58, -11,41,35,-39,-98,-9,-120,-9,76,41,-4,32,-89,-43,2,39,21,86,-50,30,-72,-48,-49,-82,-68,-79,8,-6,-127,-33,-80,-9, 
  /* [6][0][][] */ 37,-47,-43,12,51,71,-5,31,-36,-32,6,-60,-26,78,-83,-36,51,-50,26,-3,23,43,-35,53,62,3,-54,-43,59,-31,39,-3, -53,3,-33,10,56,-3,7,-81,-66,-47,-51,-60,-40,89,-1,-4,-84,79,52,-15,50,52,-2,-59,2,27,57,81,39,-17,32,-44, -30,-127,10,-22,47,93,59,-21,2,79,-27,8,59,25,-49,-23,-65,50,51,43,58,-73,17,9,73,-31,27,-17,56,-1,38,31, 
  /* [7][0][][] */ -2,11,-31,51,9,37,54,20,-1,-57,88,30,-1,-9,-4,38,-76,-38,-47,15,-53,23,-50,-49,-49,49,-5,-28,-66,-19,83,-127, -19,28,-16,53,28,-27,35,-69,16,-11,-49,25,43,73,-102,17,8,-95,-43,-49,-10,28,-9,28,12,60,-72,-39,35,-25,1,-111, -27,47,1,39,-43,3,-13,34,-1,-13,25,-50,85,-34,-107,83,-23,-31,52,-3,-7,-1,44,64,73,2,10,-36,54,-41,51,-86, 
  /* [8][0][][] */ 50,61,11,84,-52,-42,70,-85,13,90,38,6,11,113,-21,54,-11,-21,57,-37,-104,5,-18,113,1,1,32,24,102,100,87,-101, 45,-112,-17,78,-10,17,3,24,-23,-55,-49,114,33,28,14,-51,30,-10,-26,44,-42,100,-34,-17,1,-113,-78,-10,-63,-92,-82,-43, 11,-75,-54,66,43,30,127,-13,90,-50,-8,6,20,15,36,-38,-49,100,38,103,83,95,101,-64,12,-44,50,9,-25,0,56,-44, 
  /* [9][0][][] */ 26,34,-13,-16,-52,-2,-3,4,-8,-31,-52,-59,-39,-78,0,53,-8,110,8,-8,-94,13,-26,49,-63,13,21,-28,60,-4,-21,21, -32,-84,68,-80,-22,100,-82,-56,-42,-51,-15,-92,-49,-42,74,127,67,36,18,52,-48,-69,64,80,91,3,-27,81,88,35,69,104, -20,-49,47,-64,-4,-72,-11,-34,87,-94,-44,-55,-90,-58,-8,91,-4,-62,10,-60,28,-26,104,-53,41,-114,37,15,75,9,110,-53, 
  /* [10][0][][] */ -59,-93,58,64,-92,-24,-39,-72,-33,-65,44,-1,-22,-26,38,-10,44,-10,-25,59,5,16,47,-49,38,-22,21,39,-65,124,12,-84, -82,-81,-1,37,-23,-23,81,82,32,-104,30,30,-89,58,-54,41,29,20,47,28,29,4,20,-23,69,81,-59,-82,68,-21,45,-16, -9,-36,-34,114,10,-9,1,30,-4,-53,1,56,-60,-41,-2,-61,8,-64,-84,-27,46,31,-91,-23,21,-53,91,79,-42,127,-52,63, 
  /* [11][0][][] */ -44,-13,26,-46,19,69,85,-34,0,-81,-23,-39,74,50,45,19,8,-63,-48,-38,53,-30,-24,24,-50,-12,71,-36,25,87,10,-18, 13,-31,-90,16,82,67,62,-24,-51,-109,8,-37,-50,8,40,30,-39,4,-87,-43,46,61,33,-39,50,-15,-58,84,9,31,96,60, -26,19,-74,-10,-18,41,-83,-32,-119,-127,15,46,32,76,13,21,62,-44,24,-1,-23,-26,92,-6,-1,2,75,62,66,100,-5,34, 
  /* [12][0][][] */ -117,-63,-73,78,14,-25,-91,-21,5,31,-3,-99,-84,-10,4,9,34,-108,69,10,-28,-2,4,12,-27,-17,-10,4,-15,14,-18,26, 48,69,21,41,24,5,-49,111,-98,-27,-13,30,32,20,-114,9,-93,-8,-3,-25,-76,-127,35,-25,-34,40,-90,74,-33,-32,69,63, -29,-76,-105,-26,58,-23,69,92,-52,51,44,-17,45,40,9,-66,-43,9,-41,-74,42,29,-46,85,74,102,-77,98,18,-88,42,-11, 
  /* [13][0][][] */ -21,-29,-73,-51,72,-46,-48,-66,-46,48,11,-42,-5,7,38,-6,-21,-46,-127,33,-59,21,22,-4,-25,-100,-31,-52,1,-26,44,-40, -68,-25,-10,-34,60,-61,-26,-76,-44,14,-63,41,-34,-30,-16,41,-44,23,-34,22,10,-81,57,-66,30,-107,-50,17,-39,12,-55,-55, 22,-29,-40,-27,-49,-71,-58,14,-5,-20,-3,-52,39,-32,25,-43,-54,-67,-91,16,-14,37,-89,-23,-80,-53,72,-23,13,0,-75,-25, 
  /* [14][0][][] */ 44,80,37,-41,-77,67,-50,59,58,50,-44,20,61,-75,-127,30,108,34,96,75,-94,-31,17,-62,-2,25,-70,-44,-55,-19,114,13, 24,24,25,-42,-81,-51,69,-39,59,-46,-61,-49,-50,43,10,28,62,43,-46,35,23,-46,103,-47,58,-65,-86,-32,-43,-37,27,-53, -17,54,-4,-19,45,-41,88,24,79,-76,-109,-53,-22,-61,85,-40,-14,4,16,-3,-16,51,120,92,-28,-57,67,47,66,-43,-6,51, 
  /* [15][0][][] */ 56,10,-41,-30,20,56,35,-9,-52,69,-96,41,59,48,-21,30,28,89,29,15,66,80,68,-35,-37,-46,-39,97,41,108,40,-10, 38,73,-124,-27,-23,-21,25,60,42,3,32,77,-51,83,-25,75,-54,82,90,-63,32,-9,-9,86,-24,-32,-2,79,36,18,99,-12, -3,-73,-29,-8,24,39,-57,4,36,71,-42,36,127,47,40,-81,10,11,-16,-27,97,1,-40,46,-49,-22,-25,35,21,63,-75,-28, 
  /* [16][0][][] */ 8,83,-2,-12,18,-14,4,-42,-24,1,-69,8,70,77,38,-52,7,-90,-34,-59,20,35,22,-80,45,-18,50,42,21,-26,43,-10, -25,20,-33,-15,-26,-37,-56,94,-94,-29,-12,54,29,-17,-5,-47,11,-125,27,67,38,-66,-99,49,47,22,-58,43,-37,29,23,-33, -20,34,-112,-56,0,27,-31,-47,-49,-7,24,51,40,-37,68,-8,63,-127,-22,32,-48,-51,45,26,45,-117,73,88,35,23,-36,-6, 
  /* [17][0][][] */ 71,55,-88,9,-8,14,108,93,25,-21,-42,56,51,-4,-54,-13,111,62,95,-65,15,-63,70,-13,-20,-84,99,-36,-21,-43,62,11, -54,-19,-72,-82,66,-12,-38,56,8,64,83,1,30,-10,20,47,-59,-37,38,92,74,70,20,81,-27,31,65,14,97,-9,45,76, 53,-65,-19,32,20,66,-34,-37,54,110,-54,127,6,89,83,59,24,117,102,44,-25,86,28,77,54,31,-28,-41,-70,-11,-44,-26, 
  /* [18][0][][] */ 34,-63,-9,20,22,106,-86,36,2,-21,79,21,80,20,14,82,100,9,42,-45,-6,38,28,-12,37,-8,72,14,127,104,18,56, -48,-103,-65,-54,-49,0,48,-25,30,-5,-20,30,-9,69,-96,-25,102,38,46,69,-8,69,30,52,10,-29,81,14,44,49,2,38, -17,-54,-35,42,73,48,10,-46,-43,-24,57,-44,-1,79,57,8,-16,76,79,-61,120,38,-55,-50,25,-51,-72,101,86,48,83,52, 
  /* [19][0][][] */ -66,3,-24,20,-75,56,-10,-3,24,-23,12,33,-13,-11,28,-6,-4,-46,51,40,-8,25,-18,68,-9,-59,-1,1,-21,-53,-58,57, -27,-30,-21,-7,15,-50,-36,-2,-77,-29,35,92,-23,47,127,-18,12,-63,30,37,-55,-6,47,-72,57,-80,-31,51,-30,-36,6,47, 56,-26,15,-4,-59,-23,101,-66,-3,-9,66,-36,-41,-20,95,1,-48,0,-43,-63,17,26,-15,-19,4,-79,41,11,53,11,27,-7, 
  /* [20][0][][] */ -83,-47,-72,49,-9,-88,48,-30,46,-39,72,59,-86,23,18,-102,98,-3,77,5,-24,28,-1,-26,-76,-3,-34,-99,-9,38,-57,100, 44,-35,-54,101,-21,-110,71,12,99,-65,-74,47,-88,-8,-47,-35,-78,-52,50,-43,62,71,12,-127,-94,29,11,84,-8,80,52,-14, 31,40,-19,36,4,-83,69,68,-39,-23,46,90,-44,-3,51,-31,-15,80,-44,-64,-19,61,44,18,-37,-32,46,-30,51,87,-84,63, 
  /* [21][0][][] */ 31,28,-67,59,26,-35,63,-9,83,27,8,59,66,49,25,-63,-16,35,0,86,71,68,43,35,31,44,61,-15,47,61,-65,-76, 15,59,27,-30,23,-70,64,44,-49,70,15,59,41,41,-85,-72,-82,50,-52,48,23,-20,12,-5,47,-39,-80,24,26,56,18,-127, 44,33,-65,-17,-40,-44,18,34,54,-58,-51,46,27,51,63,-65,-81,-103,-55,79,38,79,24,-53,-87,64,52,46,64,-44,-106,-66, 
  /* [22][0][][] */ 39,13,-62,8,-32,-61,24,15,-5,55,20,-88,-83,-3,-11,12,-25,-34,50,59,63,-78,-17,72,-18,-52,64,-69,-53,-43,-1,36, 14,13,-44,-7,-28,-69,-20,-15,21,45,-8,-59,-90,11,18,4,-73,124,7,50,-9,39,-49,24,55,-127,-14,-29,26,3,-76,-40, 49,-86,77,56,37,-32,10,-39,27,64,65,36,-27,-54,-37,-2,59,92,-86,-17,-58,30,61,-86,-39,-111,32,-15,-60,-14,-49,23, 
  /* [23][0][][] */ 40,-28,95,-50,84,98,100,76,1,37,39,24,106,-55,-56,92,78,124,87,19,22,5,-2,98,-71,24,6,112,-16,65,22,83, -43,20,22,-43,-26,-54,32,71,-50,-10,54,-67,75,-78,19,-51,33,8,61,21,-57,83,28,-86,81,4,-10,60,116,-84,95,-72, -20,48,-81,-114,-47,-58,6,127,-23,18,42,112,-8,-65,85,57,19,-48,109,-32,-4,-57,114,46,-14,15,-62,39,20,26,-48,-50, 
  /* [24][0][][] */ -124,-11,16,57,27,70,-29,67,-58,55,59,-48,-63,14,-88,-43,47,65,65,-25,-71,-23,40,41,-31,-13,7,-59,-35,-32,-37,74, 16,-19,-19,-34,10,-12,-2,-79,-22,70,80,-51,64,74,-70,41,-8,-2,-3,25,-84,-71,-11,75,-37,3,8,-2,11,54,78,-40, -77,-127,3,39,40,27,11,42,-47,-2,-18,-16,42,-12,-66,-14,-50,1,57,-55,-45,-7,-78,38,78,38,-99,50,-46,36,-27,69, 
  /* [25][0][][] */ -25,58,57,-28,19,-63,37,44,-13,93,-25,38,127,-43,78,67,-55,-52,-32,-26,20,-9,82,-90,75,9,24,18,-60,29,26,34, 35,-2,46,-78,56,-99,-24,4,-17,13,-126,35,-47,-39,-30,-68,4,-18,37,52,-89,-91,49,-100,-21,76,19,-31,-70,50,45,46, -34,59,72,-38,-44,-89,-95,77,-25,58,-114,-1,-56,-46,2,-7,-21,66,-59,-37,-64,-26,18,-25,15,24,71,-52,-69,42,-81,-17, 
  /* [26][0][][] */ -53,48,-29,-28,-97,3,-49,4,19,70,34,127,45,127,65,96,-97,-25,-81,114,114,7,48,-36,12,-41,-47,37,65,2,72,-45, -16,-42,-33,-85,-23,-11,122,-82,87,-31,15,-60,-3,8,16,48,11,-53,16,116,22,-32,109,98,-39,-53,51,-27,-39,84,-54,-110, 87,43,-59,31,-78,-10,67,-37,-28,49,-56,-43,27,-78,-77,-111,88,-48,-118,9,119,73,56,-11,50,-102,-8,-39,-23,1,-66,44, 
  /* [27][0][][] */ -7,97,-4,-31,-32,25,-98,67,-15,1,-38,-37,26,-93,-70,-90,18,18,-29,-127,-66,-9,-28,-112,-55,58,-43,-64,-13,12,44,-24, -104,96,-8,14,-44,18,46,-25,-40,-21,-19,-75,14,4,41,28,-33,76,-35,12,-28,-58,42,29,-13,-52,-14,5,-5,-78,-24,-7, 32,56,-15,-24,-24,43,-19,22,33,-101,-44,47,20,10,58,19,112,-22,26,-15,33,-52,-51,-71,36,57,-84,-25,40,43,65,50, 
  /* [28][0][][] */ 42,55,8,0,-5,-56,18,-42,36,-17,-113,29,-82,-72,94,35,-9,-41,-104,-53,13,-51,-17,39,-124,-124,-22,-39,-104,5,3,-39, 0,-9,-26,-18,6,-46,-11,51,-42,20,-12,-97,30,-67,-58,78,-100,-42,-114,9,-77,-23,14,-90,-82,13,39,-81,-33,-30,-5,-12, 8,-26,-20,4,-71,-123,-60,14,-19,0,82,69,18,-121,3,-50,66,-79,-5,-42,17,-21,-43,-127,21,-18,-27,-103,-95,-117,-115,7, 
  /* [29][0][][] */ -68,24,127,-119,46,17,-65,10,36,107,-71,28,88,-31,-48,16,33,-37,105,47,-63,-77,-14,65,68,85,36,-30,2,-5,-6,80, -2,-7,64,-9,39,60,34,66,79,52,16,-67,-8,-30,35,55,43,-18,-36,28,90,-9,53,109,0,-18,47,37,-73,16,-78,-22, -70,119,20,-91,-100,-51,-28,8,48,91,-29,54,-1,-44,37,53,-22,-58,41,-104,-17,-85,52,28,-94,41,-108,-47,10,-11,-49,-33, 
  /* [30][0][][] */ -23,0,41,-9,-1,2,22,-8,-53,56,-47,-73,-24,-98,70,-72,35,-10,-15,-21,50,-52,9,-5,17,-45,95,-59,-100,-69,-77,-7, 23,-3,52,31,-1,-52,-6,-14,-7,-35,11,-11,36,-73,-33,22,35,-106,-8,-86,-93,-60,25,17,-34,36,37,-82,-75,-77,38,21, -18,38,14,41,-18,38,21,29,10,56,-1,-18,-63,-76,-3,-60,-45,-127,-63,31,-9,-14,-10,-57,50,40,-75,-37,-74,-21,-36,24, 
  /* [31][0][][] */ 51,13,5,39,-24,-41,-68,0,-108,-72,-14,38,-44,-59,117,27,-91,-15,-11,34,-27,-16,63,-26,-32,-11,-91,75,-18,50,-30,17, 27,12,22,8,-11,-45,50,5,-73,43,8,-12,26,69,33,86,-115,51,-103,14,27,127,-25,0,-14,54,-29,35,-25,-31,-43,37, 38,29,85,-3,102,103,-51,-36,-63,14,4,50,-50,53,38,76,-82,-65,-115,45,84,6,87,-81,-74,-55,23,48,52,-55,24,13, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant14_scale = { 32, { 0.0059158140793442726, 0.0050912331789731979, 0.0047509614378213882, 0.0040162107907235622, 0.0040775281377136707, 0.0028785404283553362, 0.005959048867225647, 0.0023432911839336157, 0.0032668504863977432, 0.0038007174152880907, 0.0036848909221589565, 0.0026762953493744135, 0.0028808279894292355, 0.0028058283496648073, 0.005477475468069315, 0.0041976366192102432, 0.0029618383850902319, 0.0025500345509499311, 0.0037277627270668745, 0.0035183180589228868, 0.002370874397456646, 0.0038684455212205648, 0.0032212641090154648, 0.0027704797685146332, 0.0055418550036847591, 0.0027220672927796841, 0.0030906626489013433, 0.0050883498042821884, 0.0035017724148929119, 0.0038991938345134258, 0.0067745856940746307, 0.0022578421048820019, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[32] = { 345, -866, -462, 589, -287, -696, -4063, 80, -878, -603, -730, 823, -4174, 85, -937, -294, 1295, -4503, -368, 769, -2418, 786, 46, 383, -139, -314, -4181, -4072, 1231, -2051, -726, -1137, };
const TfArray<1, int> tensor_dimension15 = { 1, { 32 } };
const TfArray<32, float> quant15_scale = { 32, { 0.00012833815708290786, 0.00020811043214052916, 0.00025365097098983824, 0.00033206565422005951, 5.5339893151540309e-05, 0.00013672703062184155, 8.3254715718794614e-05, 0.00018014457600656897, 0.00017246529750991613, 0.00016363606846425682, 0.00023684922780375928, 0.00023099774261936545, 6.0636677517322823e-05, 8.5926862084306777e-05, 0.00017441806267015636, 0.00018222727521788329, 0.00016295343812089413, 8.2744329120032489e-05, 0.00017337815370410681, 0.00011899265518877655, 6.9292967964429408e-05, 0.00012842683645430952, 0.00014735072909388691, 9.3601571279577911e-05, 0.00021429106709547341, 0.00030386776779778302, 9.509985102340579e-05, 6.753743946319446e-05, 6.7284716351423413e-05, 0.0001095650513889268, 0.00012891870574094355, 0.00018788363377097994, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[32*1*7*6] = { 
  /* [0][0][][] */ 12,-48,-16,-23,61,93, 44,22,23,-52,89,40, -3,-46,53,-121,43,97, -30,31,34,-16,3,68, -30,17,14,-99,13,31, -32,47,53,-79,46,127, 26,27,-22,-4,22,90, 
  /* [1][0][][] */ -58,-54,5,-33,-127,47, 15,-17,-20,-101,-2,-3, 1,35,2,-21,-101,-13, -8,-29,35,-99,-108,47, -13,-29,1,-34,-43,42, 4,35,-28,66,-117,-41, 33,3,1,-36,-111,80, 
  /* [2][0][][] */ 5,-16,-9,100,54,30, 0,18,-16,96,41,4, 23,-2,-27,82,10,-21, -30,-16,19,106,51,19, -21,26,23,80,20,10, 21,-7,21,111,30,10, 2,-6,-18,127,-23,44, 
  /* [3][0][][] */ -77,69,42,3,127,99, 9,76,31,-38,-38,65, 51,-31,54,17,-7,26, 13,-16,39,14,-81,-77, -2,-69,-64,60,-6,1, 24,46,-50,-53,46,-90, 13,-70,-79,15,-88,-23, 
  /* [4][0][][] */ 98,-41,-61,19,-58,-50, -60,81,-90,-75,63,-52, 42,-9,-94,-81,-18,-2, -74,-28,55,-111,-1,94, -63,15,-35,-90,124,109, 5,-39,-127,-65,-11,75, 3,-52,-71,-111,83,42, 
  /* [5][0][][] */ -18,32,-19,20,-95,-127, -6,-69,2,-5,-103,-54, -44,-14,-17,88,-62,-46, -43,22,54,80,74,-67, 82,63,-39,80,23,-54, 20,48,62,30,99,-2, -50,38,34,60,-6,27, 
  /* [6][0][][] */ 34,-7,-69,-49,-19,3, -48,45,64,-70,-12,-18, -14,-67,-31,-10,-49,18, -104,106,8,-45,119,51, 28,21,27,17,24,14, -68,-51,-48,39,-30,38, -127,15,-11,-68,89,-36, 
  /* [7][0][][] */ 40,21,-9,32,-42,-111, 36,30,38,32,-49,-127, 1,7,-31,-5,-22,-41, 29,8,15,-27,-20,-97, 6,5,-40,2,-39,-75, -36,30,30,-36,24,-67, -50,-4,8,30,26,-30, 
  /* [8][0][][] */ 58,-32,6,-79,0,-43, -3,-93,-25,-25,45,-80, -28,82,51,54,-68,-86, -74,32,4,-113,7,-127, -52,-35,-44,-93,-108,28, -50,-5,-64,-66,-46,-41, 100,57,-42,-90,-13,-46, 
  /* [9][0][][] */ -27,46,18,-53,-50,51, -21,18,43,-36,-34,127, -10,-32,-25,60,-41,113, 52,6,-27,40,-17,28, 20,28,52,-38,-81,63, 29,-31,28,-27,-22,86, 51,-9,-49,-4,-44,95, 
  /* [10][0][][] */ 87,-60,22,-109,-98,10, -83,-93,54,-80,16,-3, -79,22,-49,95,127,-106, 20,39,-91,-21,-45,18, -70,42,-93,54,-110,77, 70,47,50,26,2,-62, 30,-53,34,-84,-38,21, 
  /* [11][0][][] */ 9,-12,-53,127,74,92, 75,43,27,85,24,47, 51,-29,49,77,-17,-15, 6,-40,-1,83,9,13, 10,35,-1,-1,-24,-67, -52,-37,-1,62,9,32, -26,65,-17,10,44,22, 
  /* [12][0][][] */ -54,37,-41,94,-82,-89, -35,-18,-57,104,-21,-39, -44,52,5,58,41,36, -79,15,-79,7,-55,59, -66,-12,-64,123,67,81, -41,71,-23,44,127,-61, 34,-38,-30,64,87,-39, 
  /* [13][0][][] */ 29,2,67,90,-39,-57, -72,62,-9,-27,-127,-70, -34,28,-2,-56,8,2, 61,45,-49,-25,95,63, -9,55,-46,-70,-59,-22, 116,61,-38,-109,-68,91, 84,-24,-33,-36,61,84, 
  /* [14][0][][] */ 29,-1,-37,-17,89,-44, -19,-10,-21,39,0,-12, 5,28,-19,-45,117,-59, 31,43,-6,-29,112,-71, -41,-33,13,30,122,-63, -46,-13,-35,4,50,-3, 30,57,27,15,104,-127, 
  /* [15][0][][] */ 5,6,-5,-114,-57,29, -16,33,56,-75,-92,-19, 10,-19,-14,-47,-116,-8, 14,20,-22,-83,-68,21, 24,23,23,-45,-93,-40, -42,-39,-11,-51,-127,30, 28,41,-16,-23,-89,-12, 
  /* [16][0][][] */ 20,68,9,-79,42,47, 15,-45,34,14,2,107, 60,51,-20,-3,119,2, -26,-36,48,-99,15,17, 38,15,-68,-111,19,108, -8,-53,22,-52,111,54, 0,32,-61,10,-8,127, 
  /* [17][0][][] */ -19,-34,-30,127,87,109, -76,45,19,26,-62,125, -24,-44,-60,-22,8,31, 7,15,-16,101,-58,28, 62,-62,-70,113,-14,-50, -72,48,-15,63,100,53, -87,-38,-50,72,48,-90, 
  /* [18][0][][] */ -76,12,22,-75,83,-53, -65,-63,53,-3,40,-2, 69,72,33,7,-8,-62, -11,-56,-38,123,-32,-6, 88,-40,17,44,86,-77, -43,-17,1,-44,37,-91, 29,61,37,-91,82,-127, 
  /* [19][0][][] */ 0,81,-2,57,70,50, 79,38,47,-35,54,85, -45,58,-5,11,110,107, -39,56,59,14,127,-19, -23,-76,74,47,-2,1, -1,-78,-5,50,13,103, -1,51,-34,-89,24,99, 
  /* [20][0][][] */ -21,0,-103,0,-111,-90, -28,-55,27,-14,1,84, -18,-51,24,87,-66,-91, 71,-85,-81,94,-105,-118, 5,-11,-66,97,-127,-84, -78,38,-68,-40,25,-33, -35,-115,82,-21,-74,-33, 
  /* [21][0][][] */ 5,-23,-17,-26,-71,127, 18,-54,35,51,-26,12, -40,-23,39,32,-80,26, -31,-20,38,-8,-17,14, 11,-36,36,3,-93,68, 7,10,15,26,-55,84, 31,1,-38,44,-64,75, 
  /* [22][0][][] */ 3,-48,-8,27,-17,-90, 67,-9,-30,-5,4,-38, -21,42,53,13,-52,-13, -33,-48,-31,26,-111,-102, 22,29,-37,17,-70,-127, -10,-8,-32,26,-8,-76, 55,-24,-15,98,-22,-39, 
  /* [23][0][][] */ 18,-66,33,-104,74,-57, -18,-29,-31,-25,46,23, 45,-92,-23,-10,36,-86, 46,-29,-50,-52,52,0, 16,25,12,-16,14,12, 7,26,-25,-25,127,-113, -84,-73,40,-94,16,-42, 
  /* [24][0][][] */ 3,-56,-51,-31,-127,-16, -63,12,-12,17,-25,-20, 47,27,37,-19,-78,27, 10,1,-46,-42,-120,-17, -40,14,6,-73,-75,27, 41,6,52,-91,-113,46, 41,34,2,1,-11,-5, 
  /* [25][0][][] */ 37,53,-22,-27,80,-6, -19,-48,36,-85,58,30, -14,48,-14,-65,17,-10, -9,-46,-29,-51,86,16, -18,30,57,-81,83,42, 33,-12,-36,-83,17,7, -11,-29,-1,-127,20,11, 
  /* [26][0][][] */ -26,33,-49,-61,58,-53, -59,15,-35,-127,-5,-90, -39,34,63,-92,21,-4, -9,-40,11,-15,12,-13, -51,15,-25,-108,-1,-94, -9,5,1,-64,-13,-1, -27,21,8,-57,39,2, 
  /* [27][0][][] */ -95,34,-78,-73,-72,111, -86,86,32,31,-118,-15, -41,-39,20,80,-93,127, -54,-11,-105,58,-90,35, 60,39,1,26,-7,-12, 22,27,2,107,-55,83, -95,57,66,47,19,22, 
  /* [28][0][][] */ 122,62,53,109,-14,13, 72,22,-57,66,6,-16, 54,-13,-26,84,6,92, 39,3,12,40,125,13, -5,-52,-13,-127,100,-114, 7,-90,-84,-71,-43,-5, 25,-50,82,-52,-35,-36, 
  /* [29][0][][] */ 3,-7,30,54,111,-64, 10,39,-4,15,88,-43, -56,-11,47,53,79,-16, -14,-42,2,-18,50,9, -46,21,48,27,-15,22, -35,-10,-27,0,-5,-47, -38,-8,47,34,26,-127, 
  /* [30][0][][] */ 1,-10,-26,17,92,98, -3,-21,-8,-15,95,91, 28,-14,11,-26,110,102, 25,-23,-30,-50,33,8, -26,-14,-21,-42,127,55, 12,-21,0,-10,39,22, -28,-22,14,23,29,16, 
  /* [31][0][][] */ 7,44,-53,37,-29,74, 37,-24,-37,-16,-59,127, -65,-32,-42,42,-1,57, 9,8,-16,41,-26,103, -17,36,52,91,-5,75, -11,-14,45,32,-48,55, -21,-5,23,81,39,28, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 32,1,7,6 } };
const TfArray<32, float> quant16_scale = { 32, { 0.00083489547250792384, 0.0013538487255573273, 0.0016501096542924643, 0.0021602313499897718, 0.00036001004627905786, 0.00088946870528161526, 0.00054160808213055134, 0.0011719187023118138, 0.0011219616280868649, 0.0010645237052813172, 0.0015408070757985115, 0.0015027406625449657, 0.00039446793380193412, 0.00055899156723171473, 0.0011346652172505856, 0.0011854675831273198, 0.001060082926414907, 0.00053828780073672533, 0.0011279002064839005, 0.00077409890946000814, 0.0004507808480411768, 0.0008354723104275763, 0.00095858046552166343, 0.00060891889734193683, 0.0013940564822405577, 0.0019767917692661285, 0.00061866582836955786, 0.00043936038855463266, 0.00043771628406830132, 0.00071276823291555047, 0.00083867221837863326, 0.0012222646037116647, } };
const TfArray<32, int> quant16_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,300,6 } };
const TfArray<1, float> quant17_scale = { 1, { 0.15371763706207275, } };
const TfArray<1, int> quant17_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,150,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.027963992208242416, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,150,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.027963992208242416, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,75,1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.027963992208242416, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<3, int> tensor_dimension21 = { 3, { 1,75,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.027963992208242416, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.027963992208242416, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.025480592623353004, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,75,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.025480592623353004, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,75,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.047128386795520782, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.047128386795520782, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.075367562472820282, } };
const TfArray<1, int> quant27_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.046332467347383499, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.085984431207180023, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,38,64 } };
const TfArray<1, float> quant30_scale = { 1, { 0.085984431207180023, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.015493690967559814, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,10 } };
const TfArray<1, float> quant32_scale = { 1, { 0.13575856387615204, } };
const TfArray<1, int> quant32_zero = { 1, { 37 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,10 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 17 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 17,16,15 } };
const TfArray<1, int> outputs1 = { 1, { 18 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 18,2 } };
const TfArray<1, int> outputs2 = { 1, { 19 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 19 } };
const TfArray<1, int> outputs3 = { 1, { 20 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 20,3 } };
const TfArray<1, int> outputs4 = { 1, { 21 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 20,4 } };
const TfArray<1, int> outputs5 = { 1, { 22 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 22,14,13 } };
const TfArray<1, int> outputs6 = { 1, { 23 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 23,3 } };
const TfArray<1, int> outputs7 = { 1, { 24 } };
const TfLiteAddParams opdata8 = { kTfLiteActRelu };
const TfArray<2, int> inputs8 = { 2, { 24,21 } };
const TfArray<1, int> outputs8 = { 1, { 25 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 25,4 } };
const TfArray<1, int> outputs9 = { 1, { 26 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 2,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 26,12,11 } };
const TfArray<1, int> outputs10 = { 1, { 27 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 26,10,9 } };
const TfArray<1, int> outputs11 = { 1, { 28 } };
const TfLiteAddParams opdata12 = { kTfLiteActRelu };
const TfArray<2, int> inputs12 = { 2, { 28,27 } };
const TfArray<1, int> outputs12 = { 1, { 29 } };
const TfLiteReshapeParams opdata13 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs13 = { 2, { 29,5 } };
const TfArray<1, int> outputs13 = { 1, { 30 } };
const ALIGN(1) uint8_t opdata14[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs14 = { 2, { 30,6 } };
const TfArray<1, int> outputs14 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata15 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs15 = { 3, { 31,8,7 } };
const TfArray<1, int> outputs15 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata16 = { 1 };
const TfArray<1, int> inputs16 = { 1, { 32 } };
const TfArray<1, int> outputs16 = { 1, { 33 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension0, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1344, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension17, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension18, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7200), (TfLiteIntArray*)&g0::tensor_dimension20, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension21, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2400), (TfLiteIntArray*)&g0::tensor_dimension22, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension23, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2400), (TfLiteIntArray*)&g0::tensor_dimension24, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension25, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension26, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4864), (TfLiteIntArray*)&g0::tensor_dimension27, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension29, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2688), (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension32, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension33, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_ADD, OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_ADD, OP_RESHAPE, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 34, };
const size_t tflNodes_subgraph_index[] = {0, 17, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  33, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_12_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 34;
  for (size_t i = 0; i < 34; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_invoke() {
  for (size_t i = 0; i < 17; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_12_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
