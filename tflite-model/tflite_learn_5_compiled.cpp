/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 24.04.2024 04:34:16

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 10
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 20
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 14176;
#else
constexpr int kTensorArenaSize = 13152;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_ADD, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1800 } };
const TfArray<1, float> quant0_scale = { 1, { 0.27221176028251648, } };
const TfArray<1, int> quant0_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 300, 6, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 150, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[3] = { 1, 75, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 1, 75, 32, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[3] = { 1, 38, 64, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const int32_t tensor_data6[1] = { 1 };
const int tensor_dimension6 = 0; /* empty TfLiteIntArray */
const ALIGN(16) int32_t tensor_data7[10] = { 4, 813, -362, -234, 100, 337, -36, 1095, -873, -539, };
const TfArray<1, int> tensor_dimension7 = { 1, { 10 } };
const TfArray<1, float> quant7_scale = { 1, { 0.00014933350030332804, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[10*64] = { 
  -37, -38, 44, 16, -27, -57, 46, 47, 46, 17, -95, -32, 15, 3, 2, 16, -25, 1, 58, -33, 7, 6, 27, -20, 26, 55, -31, -122, -25, 58, 50, -93, -36, -54, -107, -89, -35, 1, -11, 47, -60, -92, 63, -92, 49, -14, 31, -34, 24, -13, -31, 53, -52, -9, -10, 19, -15, -64, -102, 61, -124, 6, 12, -9, 
  -92, 13, 44, 82, -32, -99, 40, -90, -93, -84, -49, -31, 54, -52, -81, 17, 39, 57, -85, -41, 36, 70, -67, -76, 51, -70, -65, -107, -104, -78, -84, -40, 56, 33, -73, -14, -18, -22, -14, 45, -86, -103, 12, -34, -47, 59, 57, -82, -109, -3, -45, -23, -100, 61, -55, 78, 48, -93, -36, -78, -96, 64, 12, 25, 
  -39, -31, 14, 41, 44, 0, -32, -56, 22, -63, -20, 2, 32, -63, 20, -39, 38, 1, -39, 9, -1, -26, -33, 24, 43, -60, 19, 21, 0, 17, -56, 3, -16, 47, 46, 48, -51, -74, 44, 42, 36, -31, 9, 50, 44, 15, 5, -29, -12, -70, 13, -10, 15, -2, -33, 6, 16, 30, -24, 24, 38, 45, -50, -28, 
  6, 36, 6, -38, 17, -27, -23, -27, -78, -19, 50, 30, -37, -13, 55, -31, -50, -57, -101, 29, -41, -26, -82, -70, 42, -75, 56, 61, -8, -99, -53, 57, 36, -12, 10, 59, 9, -84, 45, 11, 57, 45, -98, 30, -86, -22, 1, 30, -59, -70, 33, -106, 59, -54, -2, -50, 10, 3, 29, -76, 15, -47, 14, 16, 
  59, -27, 19, -25, -28, 42, -28, 48, -13, 55, 41, -48, -43, -39, -62, 54, -30, -13, -26, 34, -50, -3, -27, 11, -92, 14, -40, 27, -38, 5, -3, -37, 45, -2, -32, -12, 40, 39, -70, -53, 14, 45, -1, 38, -15, -39, -49, 20, 3, 5, -29, -2, -15, 24, 30, 8, -8, -9, 32, 38, 42, 24, 28, 5, 
  34, 23, -48, -50, 41, 30, -18, -25, -4, -9, 42, 55, 12, 1, -25, -19, -46, -56, -17, 34, -12, -37, 19, -30, -29, -6, 42, 17, 44, -68, 43, 0, 6, 14, 13, -37, 13, 4, -16, -23, -31, -5, -91, -28, -81, 5, 10, 66, 26, 43, 34, -97, 42, -36, -32, -24, -49, -16, 28, -42, 6, -43, 62, 60, 
  -91, -28, 0, 11, -6, 33, -13, 15, 59, -52, 5, -26, 36, 8, -40, -71, 42, -6, 25, -127, -26, 17, 13, 46, -31, -23, -50, -21, 13, 50, 35, -7, 1, 48, -108, 57, 51, -15, -59, 35, 20, 34, 22, 59, 41, -12, 35, -38, 14, 24, -56, 41, -107, 32, -37, 0, -8, -67, 39, 51, -19, -16, -30, -54, 
  -6, 6, 37, -3, -49, 45, -17, -20, -4, -18, 30, 28, 50, 20, -53, -42, 41, 36, -61, -44, -1, 52, -25, -31, -1, -6, -68, 8, 23, -94, 15, -37, 13, -16, -21, -44, 2, -28, -41, 6, 19, -33, -46, -25, 12, 48, 52, 39, 23, 15, -45, -77, -4, 61, 29, 55, 36, -20, -22, -47, -48, -13, -39, -34, 
  14, -35, -56, -28, 9, -28, -78, 49, 30, 25, 11, 24, -79, 9, 72, -14, -46, -88, 58, -6, -79, -19, 67, 50, 49, -1, 33, 47, 9, 31, 40, -11, -81, 10, 17, 11, 40, -37, -2, -17, 10, 1, -1, 42, 34, -53, -87, -35, 41, -32, 29, 45, 37, -9, 21, -96, -73, 60, -1, 39, 20, -55, -11, 17, 
  -8, -44, -46, -46, -68, 33, -59, 25, 59, -6, 40, -19, -32, 63, -56, 53, -37, -27, 33, -6, -25, -55, 0, 62, -50, 35, 41, -61, 66, 27, 47, -4, -14, -39, 11, -35, -62, 69, -54, -48, -22, -31, 39, -108, 11, -25, 12, -27, 41, 45, 56, 37, -16, -16, 36, -36, 12, -46, -19, 60, -61, -31, 51, -1, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 10,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0080248871818184853, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { -2675, 4312, 36375, 39867, -7392, -4698, 22114, -2769, -14728, -4069, -6468, -8897, 26742, -9415, -7665, -11982, 17335, 39099, -13913, -11057, 24455, 38742, -2407, -8200, -2894, -6166, -12998, -10231, -5537, -15806, -4870, -14618, 3455, 2014, -19083, -10037, 2979, -8555, -7708, 19489, -6089, -7583, -10689, -5679, -6994, 24037, 15940, -157, -1766, -3994, -18380, -12845, -12359, 22244, -2646, 43844, 12044, -17428, -6613, -14046, -8590, 35107, -8665, -3264, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 0.00012047056225128472, 8.8096239778678864e-05, 6.7161010520067066e-05, 5.6789147492963821e-05, 8.4082465036772192e-05, 9.7012372862081975e-05, 0.00010323536116629839, 9.9253309599589556e-05, 8.1033373135142028e-05, 0.00011467975127743557, 0.00011544450535438955, 8.1137914094142616e-05, 7.2931557951960713e-05, 0.00011036141222575679, 0.0001174070785054937, 0.00010257188841933385, 8.9067965745925903e-05, 6.2561834056396037e-05, 5.8013676607515663e-05, 0.00012667695409618318, 6.6588116169441491e-05, 7.2032220487017184e-05, 8.4805978985968977e-05, 9.1910478658974171e-05, 0.00011128481128253043, 8.7018350313883275e-05, 0.00011781826469814405, 9.7669581009540707e-05, 0.00011316441668896005, 9.9162571132183075e-05, 0.00010014559666160494, 5.5404398153768852e-05, 8.6074993305373937e-05, 7.7886477811262012e-05, 8.9193308667745441e-05, 7.9021825513336807e-05, 0.00011636894487310201, 0.00012186238018330187, 0.00013085374666843563, 7.3293762397952378e-05, 7.6485506724566221e-05, 9.3805436335969716e-05, 7.3996154242195189e-05, 0.00010210983600700274, 9.1752684966195375e-05, 7.1546171966474503e-05, 0.00011145047028549016, 0.00012046012125210837, 0.00011385449761291966, 0.0001255341776413843, 8.8571956439409405e-05, 9.7932090284302831e-05, 0.00010185834980802611, 9.706257696961984e-05, 0.00010315724648535252, 5.8621844800654799e-05, 0.0001093187602236867, 6.8621498940046877e-05, 0.00010101989755639806, 9.5303839771077037e-05, 0.00010449356341268867, 5.882639015908353e-05, 0.00012048577627865598, 0.00010121298691956326, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[64*1*3*32] = { 
  /* [0][0][][] */ 85,5,-34,65,4,-14,121,-9,-79,33,-6,37,-26,-57,13,67,-32,-41,-5,34,76,-94,-36,13,31,73,-127,23,0,125,20,60, 38,50,-39,17,-49,7,79,-70,-84,22,-13,-49,-28,-39,16,71,-65,-10,43,-19,57,-46,-2,14,32,71,-97,-66,-21,35,11,72, 119,-3,-54,-6,-26,-18,56,31,-66,116,-17,15,-13,-68,71,35,-68,-66,40,-49,97,-55,-53,42,-4,102,-91,31,24,63,25,75, 
  /* [1][0][][] */ 0,-12,-77,47,82,-88,-81,16,0,-14,-85,23,41,-54,-1,-69,-31,-33,-39,26,12,116,66,7,-44,83,13,21,-4,14,29,105, 35,-22,-31,-9,-49,4,-51,35,6,14,-55,2,11,-104,28,33,-20,16,-47,-5,31,-13,-23,50,-27,-19,16,-80,-44,-72,-23,98, -30,126,-91,-1,-63,7,-66,70,49,-14,-62,83,6,-127,-54,-42,101,-34,-28,55,19,62,-107,16,-48,55,9,58,-19,7,113,-29, 
  /* [2][0][][] */ -127,5,44,-39,73,4,-16,-16,-17,55,-50,12,1,-102,-22,45,-7,0,-41,-34,-62,-7,-97,-76,-31,-3,24,-64,44,105,-22,-44, -80,-106,-48,-81,88,51,-15,-92,-21,28,29,-14,-74,-111,-86,-22,-4,4,-59,-24,-69,-50,-65,-57,3,-75,6,-20,-74,33,-48,9, 24,-107,10,9,119,22,18,-91,29,-70,-46,-2,-3,-51,39,-22,-70,-8,-22,8,-13,10,48,-3,-50,-8,3,-65,33,-16,-39,-52, 
  /* [3][0][][] */ -127,-30,50,-86,14,-60,-28,-18,-77,-1,-40,12,-81,44,6,9,-37,-13,-48,21,-38,-82,1,-15,-75,-29,-23,-30,27,21,-22,-31, -81,-98,57,-77,34,-50,-50,-50,-51,30,-37,-44,-54,25,-32,-28,14,-41,20,-32,-75,31,-26,23,-105,-35,19,-2,1,15,-27,-32, 9,-22,13,-5,60,-70,-27,-36,-73,-35,-64,5,-30,5,0,42,-21,-11,-87,25,-42,0,12,-35,-42,-51,70,-56,-4,10,-104,27, 
  /* [4][0][][] */ 25,-34,-15,2,-19,-12,-5,58,88,-60,-1,-45,13,22,89,-5,29,-19,-47,-7,-4,120,44,-43,-41,0,94,-3,-46,-56,-21,-7, 1,-68,10,-39,37,58,-38,-6,25,-8,13,-40,12,-37,73,-14,65,-24,-10,16,28,67,39,7,6,-51,67,-16,-71,17,-97,-55, 19,-79,11,-2,46,0,48,-20,80,-101,40,-52,29,3,101,38,-30,7,-5,21,16,127,83,-46,3,19,49,-14,-25,-42,4,-35, 
  /* [5][0][][] */ -18,-10,-6,3,-45,-55,18,29,60,-64,-51,33,-65,-54,-105,-89,-39,39,29,43,87,-29,56,-54,90,-10,-41,-3,41,-79,59,-103, -1,-9,12,97,-9,-34,33,-32,74,-15,-51,-22,-65,-6,-55,-25,22,-19,53,127,69,-30,30,32,45,5,-15,22,29,-22,71,11, 12,68,-45,111,-39,-50,1,-1,74,-66,-29,52,-44,-17,-110,-45,-34,71,40,118,62,-20,58,38,50,119,-13,41,-21,-30,67,-21, 
  /* [6][0][][] */ -88,-75,-13,-6,127,-32,22,55,3,0,-91,4,48,-92,27,55,59,-13,-113,-58,-12,9,33,-45,-66,-25,61,-38,-67,48,-66,9, -60,-9,-7,29,22,-25,-46,-54,-2,-9,-32,46,41,-58,-26,84,-7,-5,-65,-22,-9,12,-72,52,-59,-53,-9,-65,-81,40,-33,19, -25,-75,5,12,69,-17,-54,-40,-2,-60,-29,-14,16,-26,20,-5,14,-6,-60,-15,-50,21,25,22,-64,14,35,-68,3,73,-90,-24, 
  /* [7][0][][] */ -39,15,44,-10,16,34,127,-65,-18,99,52,-41,-29,-30,43,9,66,-24,28,3,-47,-105,-40,45,73,35,-50,37,-40,57,-4,60, -44,-14,7,-31,-39,55,-6,-34,-51,18,58,22,-26,-32,5,3,32,-13,41,16,-25,-52,-26,-12,18,-68,-65,-18,1,59,48,73, -38,-30,53,18,3,62,97,-45,-70,121,-4,-58,10,-18,-1,15,24,24,64,-22,-13,-84,-46,1,86,57,-76,34,-27,76,40,94, 
  /* [8][0][][] */ -34,-101,117,25,28,40,-78,16,52,-56,37,-18,55,39,-29,17,114,85,127,47,12,42,16,21,102,-26,49,-13,12,-9,-9,-49, -14,-53,63,25,-20,16,-12,-36,67,-37,-4,-27,32,43,15,-23,8,22,83,-10,0,14,16,-5,44,-58,86,4,-16,-48,-13,-98, -53,-34,64,-45,39,-20,-84,10,30,-65,121,41,49,31,-87,-28,103,113,56,40,-8,15,41,-8,114,17,22,-46,-35,-16,26,-85, 
  /* [9][0][][] */ -9,27,-23,18,-7,56,96,-86,-66,54,39,-8,-52,-23,6,82,59,-27,66,15,47,-79,-36,27,-15,34,-100,43,-23,59,54,127, -9,57,0,-26,14,-23,36,-23,-68,122,-20,33,-82,-26,15,36,-60,-59,41,21,62,-103,-41,50,15,-1,-64,-18,-21,60,58,73, 44,58,-28,-23,-5,47,84,-17,-23,78,-18,49,-42,-28,23,72,-23,-6,-3,8,-24,-75,-12,-23,13,-32,-81,-3,15,71,31,57, 
  /* [10][0][][] */ 72,49,-53,100,2,28,7,20,47,32,-83,52,-57,-38,-25,-59,-25,15,12,57,127,-24,-17,-21,25,28,-53,-52,-23,14,103,7, 26,107,-44,-17,-4,-39,42,49,3,-29,-55,72,-48,-21,-8,-7,5,37,28,46,57,-88,-3,-2,15,57,-50,2,5,24,52,-45, 29,25,-54,86,6,-42,-32,-1,-18,69,-96,27,-70,-24,4,13,-31,51,23,95,63,-33,24,17,-39,45,-37,-18,-4,16,64,58, 
  /* [11][0][][] */ 39,-66,-106,19,117,-49,-36,66,60,-35,-5,37,3,6,33,14,101,-61,-1,11,6,117,78,41,-49,72,38,30,-125,-33,-8,53, -38,-73,-38,89,111,-38,-116,111,-7,-11,45,-37,111,-35,24,-8,34,-59,-79,86,108,93,127,50,-35,30,71,-7,-63,-69,-74,-112, 49,-88,-104,-39,22,-103,-63,57,56,-113,-12,12,61,0,9,-73,-13,45,-21,13,-27,96,53,65,-114,-37,96,11,-100,39,82,81, 
  /* [12][0][][] */ -16,-30,59,-54,-18,-25,1,-90,-62,16,-33,39,-62,127,-12,-31,-37,-30,-14,-25,-11,-15,33,-17,-102,-99,26,35,67,-34,-36,-9, -15,-35,-9,23,-27,-31,-44,-45,-58,-22,-14,42,-25,76,-1,17,-50,-1,-23,13,45,-17,10,-2,-70,-54,-24,35,27,-27,-78,16, -34,-38,31,-17,45,-22,-16,-61,-54,-13,-48,-11,-61,110,-10,-47,-24,-40,-9,29,-23,-22,-14,33,-7,-91,-34,19,34,17,-69,-57, 
  /* [13][0][][] */ -16,-19,-36,-6,32,-81,-69,95,19,-18,-54,45,-6,-8,-29,-42,86,33,52,36,127,0,94,-1,31,37,-13,-3,-32,3,28,-14, 12,-39,-14,14,54,-45,-49,45,36,-4,-34,-55,26,38,-53,4,9,25,36,72,69,10,3,28,80,53,-2,-61,-25,-26,75,-75, -39,-38,-43,4,34,-84,-69,93,30,0,-31,-11,23,38,-37,-23,16,40,-26,82,90,-17,-4,-45,100,50,40,-3,-35,-48,53,-70, 
  /* [14][0][][] */ -5,-2,34,12,-1,18,-3,-34,37,60,26,-65,4,-18,40,3,15,-24,-28,-19,-44,75,46,-39,0,-45,102,14,-18,39,-62,40, -8,-16,37,10,47,6,4,-38,15,47,61,-49,51,5,14,-16,-2,-24,-36,-12,-25,36,-4,-28,-53,-43,47,-11,0,30,-26,2, -12,-3,39,27,25,21,31,-10,12,16,70,-76,0,-11,22,-2,7,35,-42,-37,10,62,11,-67,-6,-47,127,42,-12,57,-35,19, 
  /* [15][0][][] */ 7,38,-7,-5,6,-37,11,-32,-80,92,-8,73,-4,9,38,85,-77,-1,32,64,53,-87,-89,91,-82,-25,-35,-21,-24,102,26,6, 20,-18,-23,-2,21,57,62,27,-57,62,-42,93,-15,15,27,127,-14,48,16,12,62,-59,8,34,24,33,-64,-68,48,69,79,83, 49,58,-33,15,41,-1,69,7,-54,20,-49,9,-68,-12,28,123,-40,-59,-21,52,15,-118,-83,85,-65,7,-79,18,68,90,9,73, 
  /* [16][0][][] */ -1,-46,102,-12,-68,-52,-31,-87,-41,-18,35,2,2,82,-30,-48,-35,-20,-40,51,-14,-37,-8,26,-22,-46,-72,6,-7,-1,-13,26, -56,-26,62,-71,-70,16,7,-16,-21,24,-21,3,-60,48,-27,-50,24,-59,-27,22,19,-38,66,48,-5,-61,-9,-4,21,-38,-70,29, 32,-4,90,-15,-52,35,43,-51,-8,-34,-31,-32,9,127,-25,-63,1,-32,-49,66,69,-30,57,9,-50,-119,-17,15,72,-3,-39,-47, 
  /* [17][0][][] */ -77,-47,53,-40,46,19,-82,-71,-78,-60,-9,41,-73,90,-41,-14,-15,12,60,-5,-18,-85,-59,64,-60,-57,-5,-26,92,15,13,-73, -82,9,35,-81,12,52,-11,-117,-10,-43,-13,-38,-98,8,-54,-26,-59,13,-58,29,-52,-40,32,-3,-71,-30,3,-92,24,-30,-60,-24, -21,-25,-7,-63,71,94,-66,-38,14,-78,-48,28,-64,71,0,-6,-65,-41,-14,55,5,-38,-31,-19,-72,-49,12,-47,127,-29,-51,-60, 
  /* [18][0][][] */ -91,-97,111,-89,-39,50,-26,90,-26,-8,106,35,82,33,-13,80,94,53,73,-58,-57,33,-23,74,42,47,41,48,-97,45,54,-8, -62,-24,32,-46,50,-22,-50,13,24,31,35,30,7,40,-36,58,45,-16,67,-54,-98,31,43,-20,69,-23,64,8,-40,-60,63,-18, -67,-59,74,-127,77,4,-30,30,-37,-14,101,64,100,-6,-55,-10,90,35,90,-2,-13,-26,0,42,119,78,34,11,-29,25,60,17, 
  /* [19][0][][] */ 56,23,8,26,64,-16,52,0,-39,49,-25,60,-30,-16,88,127,-64,-6,24,41,58,-46,-66,93,-49,-10,-30,-2,16,69,10,36, 36,10,-8,7,-29,16,39,-12,-46,55,-25,63,-24,-30,30,66,-15,-19,-3,-2,48,-31,-5,39,10,-17,-68,-17,23,34,2,14, 119,48,-13,-1,25,-17,46,2,-4,4,-49,29,-22,-39,39,91,-86,-55,20,15,34,-39,-47,8,-58,8,-44,34,61,90,-4,54, 
  /* [20][0][][] */ -46,-13,-16,29,25,-41,-92,-35,-38,-7,-94,-30,15,86,-47,-14,-65,24,-2,-10,4,-10,-22,20,-83,-12,90,-6,41,29,-42,-74, -48,-37,27,-24,127,26,-57,9,-84,-11,-84,-22,-68,96,-15,-2,42,5,-5,-11,-35,32,-38,71,-72,-22,6,-5,57,23,-36,-98, -49,28,-32,-8,92,-29,-124,-5,-76,12,-89,32,-109,70,-12,29,-3,2,-7,-62,23,-58,-13,51,-76,-39,26,-6,41,68,-70,-50, 
  /* [21][0][][] */ -74,-36,7,-37,68,63,3,-121,-61,72,0,-4,-49,-36,-53,74,45,-68,-86,-24,-31,-64,-45,-34,18,-81,-42,-7,-55,-70,-5,98, -31,-53,42,-11,-33,-46,-2,-110,34,-47,-80,31,-95,-51,-24,-22,-18,3,-14,75,-43,6,20,-5,-49,-94,24,-23,-75,-58,-48,72, -53,37,39,-68,59,19,24,-45,-38,-3,-28,32,-51,-23,-45,-91,26,-55,-8,67,-18,-7,29,-119,-76,-127,-10,59,-18,-46,-6,24, 
  /* [22][0][][] */ -31,-14,49,-27,20,-36,-50,26,32,2,28,-6,18,-8,1,21,87,52,38,-41,-19,15,18,-22,127,38,-33,21,-124,6,70,29, -10,19,-4,-30,-26,-46,-36,58,4,-13,19,-10,54,-36,-47,-11,27,-35,8,-32,-70,41,50,39,0,59,-10,53,-93,-18,-2,29, -49,-25,-2,-82,18,-12,26,40,-23,-35,57,54,95,-9,-50,-25,94,44,56,-35,-48,3,52,-27,79,32,-32,-3,-89,-18,64,20, 
  /* [23][0][][] */ 9,-63,51,19,27,55,-23,-57,36,17,76,-29,38,53,-27,20,11,89,47,90,-3,7,42,8,46,-34,1,-90,29,-20,-47,-22, 12,-70,59,21,3,13,13,20,29,-31,37,28,5,43,13,-62,1,45,-10,54,-20,5,-35,21,64,5,-29,-85,-8,-9,42,-109, -23,-25,70,-18,-36,92,-49,-13,21,-33,38,-46,57,68,-50,-10,23,127,3,61,19,-53,5,-57,-18,-35,-8,-59,57,-6,36,-87, 
  /* [24][0][][] */ -5,-4,35,-18,80,23,-10,-72,-1,65,36,-85,52,35,39,-21,1,-54,-59,-21,-21,75,50,-30,-25,-43,108,-26,30,64,-69,-48, 4,8,41,37,56,-24,-11,-27,-4,10,11,-75,-20,16,-9,-16,3,15,-5,-55,-38,42,14,-9,-29,-28,56,6,-29,34,-35,-12, -23,25,38,3,120,-16,7,-39,8,58,-2,-72,10,43,21,20,-14,14,-33,-8,9,59,21,-34,-44,-51,127,2,-19,97,-63,-11, 
  /* [25][0][][] */ -14,-38,-34,-29,17,-70,50,25,-112,29,-3,102,-8,-21,9,121,-6,27,25,-87,91,-75,-19,112,-50,117,-42,67,-16,120,15,-17, 39,-60,-109,-28,81,-20,30,-12,-103,-40,-28,-50,-63,-3,4,42,-31,13,104,23,42,-60,-11,127,45,54,-16,-25,24,23,44,95, 20,32,-41,-1,39,-54,51,75,-99,63,-76,90,-60,-17,45,127,31,13,94,42,45,-123,-83,25,54,73,-59,19,-35,36,-6,92, 
  /* [26][0][][] */ 40,-48,1,37,79,5,9,17,5,-19,6,16,14,12,28,55,62,15,-46,49,-23,56,24,1,-22,-41,111,-49,28,4,-37,-37, -4,-12,15,-24,2,-9,-15,77,2,30,24,-32,13,33,83,-24,5,8,-14,48,42,-6,2,-35,-23,-33,76,-11,-11,-12,30,-27, 26,-7,0,4,15,-9,-1,40,25,7,-8,-70,12,56,64,-11,-29,32,-7,17,-8,73,57,-22,-69,-1,127,-17,-42,0,34,-34, 
  /* [27][0][][] */ 69,38,3,74,13,42,43,-76,45,70,-14,-53,-84,-46,36,-40,-2,-31,-39,11,42,26,32,-56,-1,24,-42,80,-14,-22,-13,96, 30,88,16,35,10,51,75,-2,-15,88,-10,-22,-30,-23,-50,-6,-29,-10,-10,19,-7,-2,9,6,44,-25,-23,87,-12,18,8,12, 63,127,25,24,19,46,73,-12,57,33,-13,6,-32,-42,-22,-61,-1,-8,-13,31,87,15,49,1,-14,27,-34,81,-57,-20,-17,37, 
  /* [28][0][][] */ 47,-16,-56,45,52,-127,-80,70,47,7,-17,28,-22,13,-38,30,93,24,23,43,120,37,126,-20,101,69,12,-79,-49,-69,50,-94, 3,-20,-46,78,-38,-125,-54,62,59,-35,-26,20,-12,41,43,-66,-25,-33,19,97,94,-17,1,24,89,6,16,11,-66,-34,-24,-89, 33,-59,-81,7,11,-82,-71,84,50,-19,-18,-15,66,15,-30,-38,-36,79,31,68,60,-16,33,20,43,1,74,-63,-67,-72,49,-36, 
  /* [29][0][][] */ -46,-63,125,-42,20,61,-36,-22,-21,-9,94,29,43,30,-9,32,50,44,41,9,-79,5,-58,68,26,-48,88,-24,28,-26,-20,-8, -30,-68,77,-1,28,72,10,-34,20,35,39,20,6,22,4,26,30,11,37,-26,-60,13,-25,-14,-5,-67,65,3,16,3,13,3, -40,-30,127,-6,34,84,-9,-9,-16,34,62,16,49,22,-1,39,58,54,74,-42,-54,3,-53,30,28,-31,69,0,23,19,15,-15, 
  /* [30][0][][] */ -34,-66,-45,-54,54,-76,-65,33,10,-26,37,46,16,-16,-27,30,102,27,105,41,-31,-4,101,-3,114,64,5,37,-105,7,63,-30, -16,9,-102,-38,49,-53,-51,26,-4,-33,-48,-47,-8,-32,-20,-3,42,6,-5,7,51,-14,111,9,100,70,-3,51,-67,-46,37,-50, -17,13,-36,-52,51,-99,-31,80,23,-50,55,48,57,-5,-85,7,67,23,91,5,22,17,88,53,64,127,13,4,-102,-87,74,-11, 
  /* [31][0][][] */ 13,92,-61,84,21,16,-11,40,123,20,-57,-26,-48,-89,49,-21,31,-23,27,5,107,93,62,-57,-19,-14,101,52,-61,50,-10,8, -9,17,-60,24,-62,-47,69,64,51,4,-30,4,-2,36,-85,-26,-3,22,-52,-7,85,14,5,-40,-6,29,13,-66,-98,27,77,-18, 17,27,-34,118,10,-41,71,86,99,124,-51,35,-80,-19,-56,2,45,36,-27,127,-5,84,98,-25,-23,13,82,-79,-66,-8,-18,79, 
  /* [32][0][][] */ 4,3,-40,-66,2,57,58,119,32,-68,-48,-6,-33,-50,22,4,-61,-101,-45,43,-21,-52,-56,13,-64,52,-68,10,13,0,-7,-16, 49,13,-10,-39,11,50,74,-44,108,32,15,-33,-32,16,3,-84,-121,-74,24,21,27,6,4,-24,75,53,-78,-49,53,-52,-25,46, 32,-60,8,-26,-55,51,8,103,32,-4,16,24,-16,75,-39,-93,-93,-38,75,34,12,1,64,-88,41,127,-32,-16,97,-53,42,53, 
  /* [33][0][][] */ 36,-100,-22,62,-50,-49,25,-2,49,8,-53,-73,-26,-20,-54,-9,-79,-23,23,-5,75,-17,58,-31,-29,22,64,21,14,-46,-17,-62, 18,14,16,-69,-127,56,53,13,-9,84,-22,12,-34,83,-53,-75,-69,17,-73,42,-20,-7,58,15,7,-40,-32,54,43,-109,-50,52, 61,-46,-10,41,-103,7,-7,73,92,38,-36,17,52,72,-14,-16,2,-54,12,103,38,59,11,-56,59,90,62,15,-7,-68,0,-24, 
  /* [34][0][][] */ 127,2,-13,53,63,-52,21,46,20,-29,13,24,-7,57,30,27,-43,-6,-59,52,64,34,-8,43,46,-44,101,-52,33,64,-38,-87, 122,-20,-20,115,20,-21,49,7,42,3,-5,-1,16,69,85,68,27,16,-18,72,45,8,-55,15,33,-77,81,-22,-25,21,3,-34, 78,-45,-42,90,-5,-43,35,-54,17,6,-12,-16,8,-4,62,50,-30,-9,-38,14,113,-5,52,16,-72,-72,61,-54,-30,42,32,-75, 
  /* [35][0][][] */ -9,-36,45,74,-37,81,78,-3,97,50,-47,-66,-12,-3,-26,-41,-1,-5,-61,33,-25,51,16,-102,-32,-23,27,41,-65,-29,-12,19, -6,56,27,59,25,14,29,-26,13,26,-15,-23,-75,-48,-20,-59,4,-11,22,-13,-11,100,-8,-58,8,-22,-5,1,-44,-55,29,69, -30,52,79,81,2,127,110,59,86,42,-31,-34,-68,-20,-78,-27,-3,35,-24,-1,19,92,84,-24,108,30,44,33,-22,11,-50,23, 
  /* [36][0][][] */ 10,118,12,2,-85,109,44,2,24,57,-25,11,-15,-49,-53,-35,20,-33,-4,-11,-40,11,9,-89,28,80,-66,71,-45,3,83,61, -14,109,64,-28,11,76,48,-15,32,78,-33,-58,-83,-40,-30,-91,-40,-14,-27,-33,-28,28,20,-16,45,13,-81,88,-28,-96,-29,71, -16,127,31,-12,-35,-13,39,9,-2,74,7,39,-20,-41,-36,-110,2,-22,-10,-1,22,-12,46,-52,25,40,-101,63,-69,-37,69,2, 
  /* [37][0][][] */ 43,6,-32,20,-20,5,-26,63,-27,13,-19,72,0,-2,27,78,-87,-2,75,13,77,-87,-37,14,-7,77,-41,-33,40,31,98,-29, 39,-27,-62,24,34,13,-24,40,-40,-35,-32,32,-19,2,21,87,-90,35,0,19,27,-44,-46,39,-33,86,-19,-55,16,30,12,17, 37,1,-36,-8,57,-57,0,-4,-37,49,-83,127,-61,-20,-1,119,-80,59,30,95,35,-65,-76,96,24,38,-58,-22,106,15,110,3, 
  /* [38][0][][] */ 3,-4,42,29,1,1,30,-14,13,21,8,-65,29,48,39,-9,25,-14,-65,-28,-25,41,34,-46,-50,-32,127,-24,31,22,-41,1, 10,-19,24,-8,15,3,10,-23,22,1,15,-39,39,12,32,8,17,-4,-19,-30,-24,46,0,-7,-1,-32,30,-9,6,26,-37,-4, -16,-32,8,48,72,26,4,-24,16,11,3,-41,33,15,50,23,31,17,-30,19,3,52,10,-54,-50,-21,90,-7,-5,57,-37,20, 
  /* [39][0][][] */ -31,-79,37,35,38,-34,-6,-42,15,55,-60,-5,-36,7,-56,16,17,-28,-105,-22,-4,35,35,-11,-95,-56,82,-36,-42,-28,-112,52, -42,-81,38,-4,66,16,11,-57,-44,-45,1,-32,11,-32,27,36,22,-53,-89,23,-10,43,7,-56,-97,-127,98,-17,-54,69,-87,63, -39,-79,28,41,71,-57,48,-98,-18,-39,-33,-18,-45,8,-21,-4,21,-52,-64,3,8,77,98,23,-48,-68,42,26,12,67,-76,46, 
  /* [40][0][][] */ 79,72,30,65,-78,7,77,-113,113,82,-51,-67,-62,10,-55,-76,9,-51,-87,33,-19,7,26,-127,-30,-30,0,48,-48,-28,-51,14, 7,44,30,16,14,58,8,19,37,51,-9,-86,-41,21,13,-8,-12,-64,19,33,3,46,-57,-91,17,12,-39,82,-19,-61,10,82, -26,106,66,127,5,53,36,-64,63,31,-13,52,-14,-52,-37,-52,14,-27,71,15,78,49,9,42,104,-4,5,38,-43,-50,-68,98, 
  /* [41][0][][] */ -2,71,23,12,-10,103,110,32,103,44,-58,-44,-46,-67,-55,-123,-16,-14,2,67,40,4,58,-18,66,49,-75,54,-17,-35,30,31, -54,94,47,31,-22,76,106,-11,32,116,-3,-3,-90,-32,-106,-50,35,-9,-36,22,6,-19,41,-11,-13,-6,-89,46,20,7,84,28, -12,59,4,60,-8,74,77,40,9,106,-49,-11,-83,-39,-87,-127,-17,-7,5,74,45,-42,23,-96,-7,25,-44,58,-18,-14,21,59, 
  /* [42][0][][] */ -25,-66,127,-39,41,30,-25,-11,-78,57,34,64,36,48,-14,91,83,53,62,-85,-64,-25,-64,67,-42,-78,81,0,11,14,-31,23, -19,-37,79,-29,28,79,-40,-20,-25,65,8,4,38,-29,43,42,16,61,19,-16,-21,-13,-51,-2,-3,8,28,-65,27,54,-10,-12, -60,-46,82,-4,95,54,12,-3,-91,60,21,55,8,29,27,20,104,66,65,-65,-25,-60,-42,57,-14,-30,93,-54,41,60,41,9, 
  /* [43][0][][] */ 26,24,87,18,-57,42,79,-15,84,86,-48,-48,-32,-4,-50,-72,-34,-57,-22,12,14,59,58,-101,-14,-7,-38,80,-8,9,-21,25, -10,31,42,45,22,103,62,-24,53,77,44,-46,-46,-15,-62,-75,-2,-28,-48,-3,-37,82,5,-20,61,22,16,49,-57,-27,-6,23, -17,79,51,34,-44,68,127,8,17,-8,-1,-31,-33,-56,-44,-69,-18,-30,1,-7,0,20,29,-40,59,47,-66,67,-12,-57,-30,77, 
  /* [44][0][][] */ -17,-25,110,-22,-1,18,-23,-14,3,62,65,-9,54,-4,-11,7,80,18,83,-54,-16,18,4,25,51,-56,20,26,-1,22,-54,-34, -26,-62,64,4,-24,-16,-8,-38,-13,39,22,2,12,28,-9,5,15,55,42,13,-38,20,-27,-2,55,-13,11,-13,-11,15,9,-13, -48,-28,127,-26,43,47,24,-14,-27,-23,88,8,64,16,-32,-9,44,63,14,-43,-47,-25,-27,32,28,-67,36,5,-49,10,-10,-18, 
  /* [45][0][][] */ -9,-61,25,-46,-53,18,-37,-13,-89,-34,-38,-16,-32,100,-46,-43,-47,-31,-11,6,38,-47,65,75,-84,-101,50,-4,100,56,-6,-11, -14,7,21,-51,62,-52,-84,-32,-28,-38,-32,55,-76,107,-7,-54,-31,-14,49,-6,-18,7,35,30,-69,-60,-37,-58,65,-29,-16,-42, -59,23,1,-41,-27,18,-42,-80,-40,22,-30,47,-50,127,-23,-32,-42,-24,-36,49,-1,4,-50,21,-15,-41,-7,43,39,22,-79,-114, 
  /* [46][0][][] */ 22,-45,-13,-2,-12,9,-19,-60,-35,-43,-45,13,-10,127,-14,-26,-6,-9,-14,-12,26,-22,18,8,-46,-70,45,-24,35,-25,-16,-2, -29,-23,10,13,8,-14,0,-65,-45,15,-22,26,-52,21,-17,-14,4,-5,17,16,-8,0,56,27,-58,-75,-4,2,-26,-42,-69,-10, -9,6,20,11,31,-2,-48,2,-41,-50,-39,-8,-3,95,-9,12,23,-33,12,-15,29,16,3,0,-41,-30,13,17,21,-28,-50,-41, 
  /* [47][0][][] */ 51,-24,-61,11,4,-109,43,13,33,-10,-60,60,-37,-55,7,-12,2,-37,-16,24,62,-20,32,30,-22,17,-59,22,-39,13,24,43, 17,47,-69,33,7,-87,-20,84,8,20,-37,52,-3,-56,-9,35,-22,-29,29,12,6,-32,35,-6,12,63,-38,70,-49,52,6,29, 81,33,-62,13,-2,-127,0,49,7,-42,-20,41,-32,-64,5,26,-6,-25,32,25,95,10,44,65,-19,81,-49,5,-55,1,30,-2, 
  /* [48][0][][] */ 15,-4,-52,29,13,-111,-36,5,31,-31,58,48,36,-30,-20,17,36,20,42,3,27,-13,79,33,127,41,-6,8,-70,-2,1,-4, 32,-99,-43,16,-6,-69,-7,-11,2,-20,-29,-31,13,-21,-3,-10,-19,24,12,28,54,9,71,-6,76,53,-32,-27,-65,-32,-16,8, 25,-14,-19,20,44,-84,-41,-4,-31,-15,33,64,32,-21,-61,-31,76,41,93,42,62,-28,-7,13,110,73,-28,14,-87,10,36,-55, 
  /* [49][0][][] */ 16,7,-79,39,8,-84,-60,50,22,-51,-70,108,-12,-35,-53,34,14,65,36,54,15,-31,33,4,31,115,-19,8,54,-55,62,-46, 11,36,-49,32,-51,-71,4,40,18,-65,-95,73,-34,-36,-21,64,-39,3,65,27,30,-20,15,64,-11,2,21,4,46,-39,18,-68, 22,-66,-34,18,21,-64,-67,63,23,-50,-72,105,-42,-5,-23,54,-73,75,-2,95,97,-4,17,49,6,127,-15,-7,-23,-40,110,-53, 
  /* [50][0][][] */ 65,-57,-7,47,102,-29,-10,62,37,-6,20,-38,9,3,98,56,29,16,-51,127,39,50,-4,19,9,-46,82,-120,-46,13,-20,-66, 26,17,-10,-5,33,-11,11,43,28,-17,0,2,36,64,80,24,3,51,-50,35,51,-1,14,26,15,-66,124,-34,-20,9,-23,-56, 22,-1,-9,31,15,-69,-31,39,40,45,-49,-22,-12,49,27,36,10,26,-16,52,32,61,28,-6,-12,15,94,-38,6,44,25,-87, 
  /* [51][0][][] */ -37,-54,127,-23,6,50,-35,11,-34,6,64,28,39,17,6,12,28,49,67,6,-47,1,-66,22,12,-40,60,-10,18,15,13,-19, -17,-17,88,-29,-14,25,-2,8,-10,9,8,1,-10,24,4,2,43,13,12,-1,-64,27,-29,-11,-4,-37,58,-31,17,16,-17,28, -36,-38,107,-19,54,71,-6,-21,-13,55,70,10,56,34,1,44,45,55,7,-34,-38,-23,-20,51,29,-42,37,-10,35,-1,28,4, 
  /* [52][0][][] */ 60,-8,-26,47,21,-34,10,31,24,-22,39,9,-14,5,127,57,34,-24,-32,29,81,47,14,37,-23,22,19,28,-19,59,-11,27, 7,-9,-31,53,51,-18,-45,30,-31,-39,-10,-40,14,-17,68,37,-1,1,3,-19,-2,9,23,17,1,5,30,-8,-10,72,-44,18, 98,28,-59,31,-5,-61,33,25,-17,-17,0,-55,55,-28,77,2,-34,-24,-45,-5,49,22,33,-5,-34,-47,56,-24,-38,70,13,62, 
  /* [53][0][][] */ -20,-17,118,-45,-120,-1,16,-127,-50,-32,-6,48,-46,23,-73,-11,-60,-3,2,102,22,-71,48,-24,-7,-43,-59,-13,56,-56,57,-34, -37,42,25,-51,-110,67,33,-96,10,45,10,-2,-22,-28,-40,-73,51,-72,-31,-5,21,5,55,-63,36,-40,1,36,-12,-17,22,25, -12,-23,69,-29,-98,46,47,-37,22,-67,-15,-4,-62,-5,-92,-50,-40,-44,-68,27,-23,-31,0,-19,49,6,7,27,50,-70,16,33, 
  /* [54][0][][] */ 101,44,-48,104,-17,-45,116,-35,-32,89,-33,-13,-10,-9,46,3,80,84,2,29,47,-90,-33,-1,78,-30,-84,-21,-49,75,-55,-35, 44,57,-56,111,5,-26,53,-41,-88,30,64,30,-17,-23,16,-52,-25,-69,-4,26,34,-82,-107,30,5,6,-98,-36,-19,109,6,83, 47,78,-26,38,-41,-38,64,-67,-72,98,47,-48,-45,-38,16,-11,-70,-46,49,72,113,-113,-109,42,-10,-48,-105,-34,29,127,44,99, 
  /* [55][0][][] */ -108,-33,31,-60,78,71,-31,-55,-40,-48,-43,-8,-86,59,30,5,12,20,-4,33,-49,-62,-62,72,-98,-42,-8,-18,102,50,-16,-14, -127,3,-4,-56,45,79,-51,-104,-47,-35,3,31,-104,-16,-22,25,-37,-33,-17,-34,-92,-35,-80,-21,-83,-68,13,-50,52,19,-16,-3, -74,-66,-19,-13,87,79,-59,-54,37,-66,4,-26,-27,-6,-48,-61,-57,-21,-52,26,-65,-43,-60,-63,-72,-8,-29,-4,44,-68,-103,-35, 
  /* [56][0][][] */ -27,-41,46,14,-70,-13,-18,15,4,-41,19,17,-7,78,25,-18,-76,-54,26,54,12,-49,6,82,-25,-57,-1,-10,90,-20,-7,-80, -1,12,24,-54,-40,-22,-75,-55,-14,-24,15,-54,-8,100,-20,-47,-41,0,31,34,24,-37,25,55,-48,3,9,-67,16,16,13,-89, 11,46,48,-38,-19,61,-68,-10,-38,-22,34,-19,-62,67,-47,-27,-97,-5,-20,29,45,2,24,6,40,-20,19,-43,127,-59,-15,-24, 
  /* [57][0][][] */ 71,7,25,47,5,-1,62,-114,16,67,127,-109,-35,-10,87,-46,-1,-91,-79,18,33,53,3,-43,30,4,91,61,7,60,-125,46, 37,15,30,15,2,47,59,-105,26,100,78,-25,10,-16,31,35,-39,-35,-50,26,8,3,48,-21,36,-66,55,86,-5,45,2,-16, 69,11,-11,83,10,76,76,-96,12,59,67,-80,35,-24,50,-4,-25,4,-30,-18,78,51,2,-35,70,-21,32,16,-28,61,-60,-16, 
  /* [58][0][][] */ -31,76,-2,3,-24,89,85,63,61,78,-101,-7,-44,-56,-93,-98,-6,9,-3,62,80,36,31,-40,-26,25,-110,33,-31,-65,80,39, -36,95,4,10,28,32,47,-3,25,55,-57,69,-85,-33,-15,-15,-4,14,37,57,-24,15,40,-34,-7,78,-71,89,-5,-31,32,0, -2,127,6,56,-64,19,39,60,70,22,-84,63,-64,-16,-38,-24,-43,13,-24,26,21,-19,50,-55,-10,84,-86,87,-27,-55,84,30, 
  /* [59][0][][] */ -22,-65,127,-38,32,60,-41,1,-20,1,57,17,33,10,11,29,65,45,90,-1,-35,-7,-42,56,34,-53,44,-34,41,23,-11,-10, -23,-38,66,-9,38,96,-26,-29,11,34,46,16,8,8,6,50,7,31,20,-7,-44,-26,-41,-7,17,-48,51,-31,41,-10,26,18, -36,-59,119,-5,-16,50,19,-15,-30,23,63,63,30,-1,-12,43,64,87,52,-36,-27,-19,-57,7,2,-41,36,-20,42,43,23,-8, 
  /* [60][0][][] */ 34,5,15,58,-45,108,127,-41,45,91,-31,-14,-58,-53,6,-22,-33,-18,7,-21,51,-2,-2,-63,48,34,-14,93,-21,-6,-24,-12, 50,31,28,10,25,54,118,-1,29,38,-21,5,-28,-17,-35,-5,-45,-22,-11,-38,-16,57,12,24,23,3,-45,9,20,-62,38,15, 69,58,14,38,-57,107,93,9,19,48,0,55,-62,-48,-25,-73,-29,-28,-10,34,4,19,29,-1,30,75,-67,96,-7,-15,-52,21, 
  /* [61][0][][] */ -59,-107,21,-24,14,13,40,-10,24,-52,-57,0,13,16,29,115,-84,-72,32,28,-125,-21,-70,4,25,72,-86,-53,127,-71,-38,4, -90,15,59,-84,-39,100,-38,-14,-36,-50,-10,50,-71,-76,-59,6,8,22,-10,-94,-48,-62,-44,23,-87,86,-94,-2,-28,-25,-41,-71, -101,-28,-11,-48,84,20,25,-27,-78,23,-36,-39,-29,-22,1,-19,-105,34,-7,-5,-113,-32,-10,-73,-55,-15,12,-64,76,85,-73,-11, 
  /* [62][0][][] */ 34,-22,-60,-34,54,-34,2,48,-20,-45,-50,67,1,-5,9,16,-6,-24,58,57,60,-55,-55,18,-34,91,-49,-24,6,36,65,12, 0,79,-54,-31,-4,-43,-18,61,-9,5,-65,40,36,0,12,84,-4,-37,-46,0,-9,-53,1,72,-3,69,-23,-71,29,16,65,6, 57,21,-68,-18,26,-54,18,127,7,16,-59,104,5,9,51,106,-2,7,39,24,4,-46,-17,40,-52,35,3,-16,-15,39,47,-5, 
  /* [63][0][][] */ 65,49,-86,-82,90,-55,-9,110,-44,-31,-38,10,-5,-10,118,-22,-2,-32,41,23,-8,-35,-12,90,-78,127,18,-31,-14,21,91,-21, -71,40,-59,-54,45,-58,-62,113,-28,19,-29,58,10,-35,-1,114,-62,-8,51,-28,-32,-7,-12,1,-2,66,31,0,-36,-27,9,27, 82,10,-87,-13,-49,-95,5,93,34,-76,-48,86,9,-36,100,108,7,-62,17,18,28,36,-7,19,-53,-34,10,-56,-49,51,38,37, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant10_scale = { 64, { 0.0034145512618124485, 0.0024969512596726418, 0.0019035746809095144, 0.0016096003819257021, 0.0023831871803849936, 0.0027496654074639082, 0.0029260462615638971, 0.0028131811413913965, 0.0022967653349041939, 0.0032504198607057333, 0.0032720954623073339, 0.002299728337675333, 0.0020671319216489792, 0.0031280231196433306, 0.0033277217298746109, 0.002907241228967905, 0.002524493495002389, 0.0017732181586325169, 0.0016443077474832535, 0.0035904617980122566, 0.0018873369554057717, 0.0020416416227817535, 0.0024036939721554518, 0.0026050601154565811, 0.0031541953794658184, 0.0024664001539349556, 0.0033393760677427053, 0.0027682927902787924, 0.0032074700575321913, 0.0028106092941015959, 0.0028384716715663671, 0.0015703517710790038, 0.0024396623484790325, 0.0022075714077800512, 0.0025280460249632597, 0.0022397511638700962, 0.0032982972916215658, 0.0034540002234280109, 0.0037088466342538595, 0.0020773981232196093, 0.0021678630728274584, 0.0026587697211652994, 0.0020973063074052334, 0.0028941449709236622, 0.0026005876716226339, 0.0020278652664273977, 0.003158890875056386, 0.0034142553340643644, 0.0032270292285829782, 0.0035580715630203485, 0.002510434715077281, 0.0027757333591580391, 0.0028870170935988426, 0.002751088235527277, 0.0029238322749733925, 0.0016615453641861677, 0.0030984708573669195, 0.0019449701067060232, 0.0028632523026317358, 0.0027012396603822708, 0.0029617079999297857, 0.0016673428472131491, 0.0034149824641644955, 0.0028687252197414637, } };
const TfArray<64, int> quant10_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[64] = { -3165, 3466, 20497, 20129, -2507, -1243, 17451, -3522, -9289, -3364, -3424, -2947, 17215, -6639, -5907, -5459, 19274, 29208, -6674, -5904, 17496, 23316, -3207, -7327, -2069, -5895, -14749, -5955, -5061, -8080, -5830, -11463, 4759, 763, -10323, -7306, 1675, -4989, -4852, 9671, -6697, -3927, -5124, -6730, -4073, 16832, 17785, -2286, -3698, -2873, -11141, -6404, -8775, 23678, -973, 22742, 16386, -9312, -4945, -7382, -5559, 19753, -4430, 1076, };
const TfArray<1, int> tensor_dimension11 = { 1, { 64 } };
const TfArray<64, float> quant11_scale = { 64, { 0.00020719032909255475, 0.00018141479813493788, 0.0001040945207932964, 0.00011743215145543218, 0.00015445575991179794, 0.00017661557649262249, 0.00015028266352601349, 0.00011983331205556169, 0.00016588394646532834, 0.00021462336007971317, 0.0001832551060942933, 0.00015798963431734592, 0.00011437034117989242, 0.00017935976211447269, 0.0002016860235016793, 0.00021585598005913198, 0.00010814253619173542, 0.00010153524635825306, 0.00014793299487791955, 0.00023215149121824652, 0.00012366005103103817, 0.00011406940757296979, 0.0001482643565395847, 0.0001303104218095541, 0.00024875500821508467, 0.00014556637324858457, 0.00012472311209421605, 0.0001881547796074301, 0.00020844602840952575, 0.00019547683768905699, 0.00015727509162388742, 0.00010209557513007894, 0.00015021776198409498, 0.00014353831647895277, 0.00018147428636439145, 0.00014904377167113125, 0.00022907763195689768, 0.00024899205891415477, 0.00022352763335220516, 0.00012695872283075005, 0.00012443892774172127, 0.0001454553275834769, 0.00013605512504000217, 0.00015250936849042773, 0.00014947836461942643, 0.00010592239414108917, 0.00012221497308928519, 0.0001998426450882107, 0.000191930026630871, 0.00018657546024769545, 0.00016778484859969467, 0.000198801324586384, 0.00015823081776034087, 0.00010023482900578529, 0.0001521162485005334, 0.00011332154099363834, 0.00011510236072354019, 0.00013823450717609376, 0.00014392704179044813, 0.00016030538245104253, 0.00022966387041378766, 0.00010792885586852208, 0.00017330305126961321, 0.00010821669275173917, } };
const TfArray<64, int> quant11_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[64*1*1*32] = { 
  /* [0][0][][] */ 92,43,-32,27,-56,-43,124,19,-67,111,-42,56,-27,-63,35,77,-67,-33,6,-14,99,-97,-15,44,-29,71,-118,23,-16,127,59,69, 
  /* [1][0][][] */ 54,95,-55,79,-119,-42,-127,34,29,-7,-32,2,10,-12,-32,-19,-14,-17,-69,-24,-9,7,-8,25,-61,14,92,-36,-14,-1,33,75, 
  /* [2][0][][] */ -127,11,-16,-12,98,11,17,-57,20,5,-61,-30,-77,-19,-80,-50,-14,-31,-106,-71,-52,-98,-44,-29,-109,-1,-39,17,-39,59,-90,-11, 
  /* [3][0][][] */ -68,-69,127,-63,20,-61,-64,-61,-63,42,-104,47,-49,6,-58,-42,-23,-48,-59,-17,-67,-28,-59,-24,-37,-85,-17,-83,16,48,-82,-22, 
  /* [4][0][][] */ 52,-14,26,22,-23,0,42,16,101,-52,21,-40,6,-36,76,2,-15,-13,-45,-24,-28,127,107,-53,-30,13,70,27,-69,-38,-54,-44, 
  /* [5][0][][] */ 62,-4,-62,96,-25,-72,23,-53,76,-42,-64,101,-46,-54,-46,-37,-45,40,59,127,86,-37,45,42,108,86,-71,-16,-34,-81,30,-45, 
  /* [6][0][][] */ 5,-78,-16,-11,127,-60,-58,-56,-26,-51,-81,-88,14,-123,-27,65,24,-5,-81,-68,-75,-5,-3,-10,-39,17,33,-85,-58,-11,-114,-14, 
  /* [7][0][][] */ -71,-61,28,-24,-29,121,17,-47,-60,32,48,84,-2,-25,31,23,127,21,78,-20,-52,-125,-78,100,99,21,-41,-8,-66,101,94,103, 
  /* [8][0][][] */ -9,-95,62,0,19,-11,-4,11,16,-20,98,15,80,18,-45,-1,91,105,85,10,12,26,11,12,127,-37,42,-16,6,-23,31,-37, 
  /* [9][0][][] */ -19,41,-15,2,8,-1,127,-53,-69,98,-35,18,-1,-25,40,60,-35,1,45,32,-32,-81,-24,49,47,-19,-103,89,-6,56,66,75, 
  /* [10][0][][] */ 30,43,-37,87,-18,-1,19,33,86,24,-59,16,-66,-62,-8,6,-53,-1,25,91,127,-11,11,-24,35,74,-60,-8,-26,-33,42,10, 
  /* [11][0][][] */ 42,-67,-59,59,91,-70,-95,44,73,-38,-17,69,36,-35,48,-29,10,-17,-6,78,51,127,94,2,-79,-7,29,21,-120,-38,-1,-37, 
  /* [12][0][][] */ -45,-64,-13,-63,0,-13,-8,-83,-94,-12,-21,-41,-74,127,-71,-20,-39,-61,-67,22,-42,-8,38,19,-105,-103,-34,40,72,-54,-58,11, 
  /* [13][0][][] */ -31,35,-27,20,68,-62,-71,127,6,57,-4,32,-10,12,-26,13,32,86,16,86,100,-56,31,10,58,23,-12,-45,-31,-33,51,-3, 
  /* [14][0][][] */ -3,1,61,17,32,59,27,-40,19,82,57,-106,39,-2,47,3,1,4,-62,-27,-29,74,59,-47,-19,-64,127,39,-12,40,-49,41, 
  /* [15][0][][] */ 31,51,-19,-3,18,47,-15,-24,-29,30,-27,74,-40,5,31,127,-38,-18,21,-15,-6,-95,-81,98,17,49,-29,-34,64,100,79,46, 
  /* [16][0][][] */ -31,-26,103,-64,-127,11,-20,-76,-81,-93,-24,-22,-93,118,-52,-57,-9,-75,-78,-19,22,-35,85,-39,-45,-120,-92,-5,43,9,-80,-35, 
  /* [17][0][][] */ -114,-103,35,-90,-16,4,-68,-127,-61,-30,-28,-12,-55,40,-46,-61,-66,-66,-78,-36,-62,-52,-55,-47,-55,-94,9,-35,64,-25,-86,-37, 
  /* [18][0][][] */ -53,-23,74,-65,23,-15,-35,50,-7,8,68,44,79,14,-9,25,127,73,76,-2,-41,-21,-19,40,80,-38,8,18,-15,-7,18,0, 
  /* [19][0][][] */ 97,32,-10,47,-5,20,52,-14,-14,28,-24,52,-18,-11,57,127,-52,-32,14,-23,44,-33,-28,44,-63,33,4,-5,12,93,19,12, 
  /* [20][0][][] */ -89,-59,-15,-38,68,-37,-45,0,-110,11,-51,16,-75,97,13,-52,16,-25,-71,-25,1,-26,-1,1,-127,-83,37,-64,-21,42,-95,-76, 
  /* [21][0][][] */ -92,-28,-67,-84,-35,-60,-21,-127,-61,51,-62,-23,-59,-31,-51,27,-69,-16,-85,5,0,-39,-19,-61,-27,-31,-11,58,-37,-75,-21,33, 
  /* [22][0][][] */ -43,14,3,-35,-5,-22,-47,17,26,20,96,13,101,-34,0,16,96,75,52,-21,-65,-20,-19,0,127,50,-40,1,-84,-21,11,-1, 
  /* [23][0][][] */ -22,-80,102,39,20,82,-29,-36,15,47,72,83,75,51,-88,20,31,127,48,81,11,-56,11,13,30,-8,38,-76,-23,-24,54,-109, 
  /* [24][0][][] */ -17,-16,47,-5,82,38,13,-44,5,24,19,-82,-17,35,10,16,-21,-2,-37,-3,10,37,49,-23,-68,-44,127,16,31,35,-32,-27, 
  /* [25][0][][] */ -1,1,-81,-25,30,-86,-6,41,-33,-24,51,75,48,-28,19,127,34,58,89,30,-1,-94,-36,96,34,-19,-48,17,17,55,89,46, 
  /* [26][0][][] */ 62,4,-2,-8,105,29,-12,104,73,72,7,15,12,26,57,63,59,57,-59,94,28,108,113,-17,-70,9,127,-20,-32,26,-41,-56, 
  /* [27][0][][] */ 58,127,-8,55,-1,12,67,-24,48,98,-26,-12,-49,-38,16,-33,-6,-29,-23,28,32,70,40,-28,-5,36,-16,80,-41,19,-31,73, 
  /* [28][0][][] */ 11,-37,-32,64,13,-86,-62,49,89,-74,-32,48,38,9,-47,-1,39,51,9,100,127,-16,97,24,76,51,41,-73,-43,-45,48,-108, 
  /* [29][0][][] */ -40,-81,127,-44,5,70,-12,-14,-14,29,78,49,69,25,5,68,57,47,69,-16,-50,-3,-49,36,38,-47,63,-24,32,26,18,-17, 
  /* [30][0][][] */ -22,-43,-33,-42,6,-98,-18,127,-6,15,53,71,75,-48,-82,6,100,27,65,10,62,-19,82,-12,126,126,-16,36,-84,-30,70,19, 
  /* [31][0][][] */ 26,95,-55,101,30,33,39,42,61,49,-84,-41,-57,1,84,-58,51,56,-5,124,33,127,109,-45,6,-31,85,-20,-42,-27,-25,41, 
  /* [32][0][][] */ 77,15,-21,-69,-31,60,-20,91,110,-19,-62,5,-90,-94,-55,-73,-118,-62,-3,77,-24,-88,26,-24,47,16,-11,-90,127,-27,57,53, 
  /* [33][0][][] */ 3,53,-53,60,-127,94,12,37,9,-13,-53,-7,10,78,36,-83,-25,-18,-76,-54,4,60,44,-7,31,-51,1,85,33,-38,-9,-71, 
  /* [34][0][][] */ 127,-14,-13,124,17,-48,56,21,26,23,-16,3,-2,49,84,20,18,1,-46,73,92,-4,25,38,-5,-1,113,-48,-31,60,-38,-68, 
  /* [35][0][][] */ -13,52,5,51,-58,123,117,3,127,53,5,-28,-18,71,-27,-67,-46,-70,-35,30,2,47,112,-26,4,-4,68,34,3,-46,-29,28, 
  /* [36][0][][] */ -1,127,-38,-40,-45,86,29,8,51,85,9,-15,-16,-73,8,-49,1,-35,-35,-54,-29,20,-9,-61,22,45,-71,81,-52,-43,27,55, 
  /* [37][0][][] */ 23,-14,-16,1,-3,-8,5,53,-31,-3,-46,127,-55,12,1,44,-7,44,52,57,42,-51,-20,61,18,47,-25,-51,24,18,91,-2, 
  /* [38][0][][] */ -1,-23,39,41,73,23,32,-38,19,10,17,-48,15,47,15,33,-18,-17,-31,-20,6,71,14,-40,-78,-25,127,24,16,54,-20,-18, 
  /* [39][0][][] */ -48,-91,23,26,85,9,11,-102,4,-65,-49,-112,-38,70,31,15,29,-16,-123,-17,-6,66,41,-17,-112,-122,76,-60,5,46,-127,34, 
  /* [40][0][][] */ 71,127,41,118,9,114,26,-23,97,53,-6,-65,-99,-58,-43,-87,21,-29,-47,14,91,-1,64,-66,-2,-66,34,101,10,-65,-27,111, 
  /* [41][0][][] */ 7,92,-15,68,1,85,98,61,76,104,-40,-41,-127,-81,-56,-122,-84,-9,6,28,46,60,21,-45,80,85,-78,112,-21,-66,39,71, 
  /* [42][0][][] */ -36,-96,127,-33,99,67,-45,-8,-64,72,73,75,55,-8,25,93,56,75,80,-42,-57,-45,-87,50,37,-82,38,-35,23,38,8,-23, 
  /* [43][0][][] */ 12,124,3,4,-6,65,127,-13,98,77,-6,-47,-51,-68,16,-56,-35,-38,-10,26,11,86,90,-119,11,29,-32,113,-2,-35,-6,50, 
  /* [44][0][][] */ -30,-62,127,-32,-15,34,-20,-41,-15,7,120,-12,43,-13,-9,25,97,79,108,-36,-44,2,-52,14,85,-60,57,-29,-10,4,-33,16, 
  /* [45][0][][] */ -30,11,-17,20,-86,-70,-118,-37,-127,10,-49,3,-52,79,-80,-80,8,-62,-20,-30,-32,21,-51,36,-83,-84,36,-11,120,13,-81,-26, 
  /* [46][0][][] */ -22,-43,15,-32,21,-26,-68,-102,-79,-50,-73,-1,-47,122,-53,-9,1,-77,-65,-18,-21,-18,111,62,-123,-123,9,4,0,-49,-127,-18, 
  /* [47][0][][] */ 62,-3,-62,5,58,-127,-3,57,59,-23,-49,41,-45,-85,5,29,-40,-35,30,37,41,36,24,37,5,105,-80,102,-31,-13,57,27, 
  /* [48][0][][] */ 8,-75,-1,23,1,-64,-15,14,8,-37,30,81,41,-25,-58,-62,87,76,73,-5,58,-2,36,26,127,48,-26,-14,-75,20,32,13, 
  /* [49][0][][] */ 43,10,-100,7,24,-108,-38,104,27,19,-53,127,-6,-82,-40,38,15,57,24,113,13,-11,3,45,19,98,-25,-32,-1,-78,89,-68, 
  /* [50][0][][] */ 45,-33,-21,25,40,-50,9,72,10,-6,-15,49,1,43,92,76,5,23,-59,107,69,57,40,18,26,-22,127,-43,7,21,40,-49, 
  /* [51][0][][] */ -32,-60,127,-39,-17,36,-16,-5,-18,0,76,35,30,21,-9,54,50,76,56,-2,-58,-10,-39,43,36,-30,65,-16,34,22,27,-12, 
  /* [52][0][][] */ 94,29,-24,71,34,-50,37,29,-2,-26,-20,8,24,-16,127,30,42,-56,-37,13,68,48,79,28,-58,-55,74,41,-46,80,-33,64, 
  /* [53][0][][] */ -70,43,78,-65,-8,59,-90,-127,-78,-50,-54,1,-42,70,-125,-79,8,-108,8,87,-6,-111,-18,-27,-103,-59,-40,-77,-83,-105,36,-45, 
  /* [54][0][][] */ 48,51,-3,127,-47,-56,-12,-90,-32,-2,-7,20,18,-28,-60,-41,0,13,-4,116,70,-66,-67,42,38,82,-78,14,-64,14,10,113, 
  /* [55][0][][] */ -84,-42,-2,-66,15,21,-22,-108,-46,-127,-32,20,-66,60,-18,6,-67,-13,-52,-39,-86,-56,-36,-25,-94,-63,-9,-46,94,-44,-35,-56, 
  /* [56][0][][] */ -49,-75,46,2,14,34,8,-57,-28,-11,22,-41,-29,127,-92,-87,-120,-17,-42,-64,-26,-8,-77,-56,-100,-69,-28,-33,83,9,4,-95, 
  /* [57][0][][] */ 98,69,-16,63,-5,58,79,-113,48,127,91,-100,-21,12,77,43,-48,19,-71,30,34,53,16,-22,-1,-32,66,1,-17,79,-79,34, 
  /* [58][0][][] */ 28,127,-34,55,18,107,76,97,121,73,-51,39,-90,-65,-63,-111,-58,-21,-40,1,33,89,28,-30,56,94,-126,57,-58,-24,77,-13, 
  /* [59][0][][] */ -28,-83,127,-41,8,36,-5,-26,-33,18,96,29,45,13,-15,74,58,91,101,6,-63,-37,-54,70,66,-20,46,-30,32,33,12,-2, 
  /* [60][0][][] */ 21,48,-7,60,-24,48,127,-10,55,66,-10,-3,-37,-37,17,-33,-33,-23,-16,36,9,43,15,-25,36,28,-15,31,0,11,-13,22, 
  /* [61][0][][] */ -31,-127,-18,-45,-15,-35,-49,-71,-74,-46,-56,22,13,-40,-37,-13,-57,-44,45,-92,-100,-21,-108,-73,-6,32,-5,-89,91,26,-40,-40, 
  /* [62][0][][] */ 28,82,-45,-95,22,-93,8,119,18,-47,-69,47,-47,-28,71,127,8,16,40,77,-3,-24,-9,39,-35,28,-61,-19,12,44,98,14, 
  /* [63][0][][] */ 127,-23,-27,-42,-114,-99,28,41,26,-79,-19,80,-40,-53,122,108,-58,20,-45,47,-8,41,-50,87,-41,48,126,-6,-103,-1,27,-82, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 64,1,1,32 } };
const TfArray<64, float> quant12_scale = { 64, { 0.0058724884875118732, 0.00514192134141922, 0.0029503977857530117, 0.0033284323289990425, 0.0043778088875114918, 0.0050058946944773197, 0.0042595290578901768, 0.0033964894246309996, 0.0047017233446240425, 0.0060831662267446518, 0.0051940819248557091, 0.0044779712334275246, 0.0032416500616818666, 0.0050836745649576187, 0.0057164775207638741, 0.0061181029304862022, 0.0030651325359940529, 0.002877859165892005, 0.0041929315775632858, 0.0065799742005765438, 0.0035049524158239365, 0.0032331205438822508, 0.0042023235000669956, 0.0036934467498213053, 0.0070505747571587563, 0.004125853069126606, 0.0035350832622498274, 0.0053329556249082088, 0.0059080794453620911, 0.0055404878221452236, 0.0044577186927199364, 0.0028937407769262791, 0.0042576896958053112, 0.004068370908498764, 0.0051436075009405613, 0.0042244144715368748, 0.0064928503707051277, 0.0070572937838733196, 0.0063355443999171257, 0.0035984483547508717, 0.0035270284861326218, 0.004122705664485693, 0.0038562717381864786, 0.0043226415291428566, 0.0042367326095700264, 0.0030022060964256525, 0.003463994013145566, 0.0056642298586666584, 0.0054399590007960796, 0.0052881920710206032, 0.0047556012868881226, 0.0056347153149545193, 0.0044848071411252022, 0.0028410009108483791, 0.004311499185860157, 0.0032119234092533588, 0.0032623980659991503, 0.0039180428721010685, 0.0040793889202177525, 0.0045436075888574123, 0.0065094665624201298, 0.0030590761452913284, 0.0049120062030851841, 0.0030672342982143164, } };
const TfArray<64, int> quant12_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[32] = { -9096, -208, 119, -7237, 4785, 3248, 3351, 204, -4490, 2712, 7787, -7729, 7076, 11798, -21291, -10244, -3356, 1928, -9939, -6116, -1188, -687, 1814, -9474, 1895, 9492, -568, -770, 25060, -10425, 2154, -4096, };
const TfArray<1, int> tensor_dimension13 = { 1, { 32 } };
const TfArray<32, float> quant13_scale = { 32, { 9.6815405413508415e-05, 0.00010775400733109564, 9.4613242254126817e-05, 8.1520338426344097e-05, 8.7142107076942921e-05, 0.000130132568301633, 7.7819982834625989e-05, 0.00010028687393059954, 9.7126430773641914e-05, 8.1467296695336699e-05, 0.00011855904449475929, 6.4302737882826477e-05, 0.00012941399472765625, 9.2993017460685223e-05, 6.1357182858046144e-05, 0.000108477303001564, 8.74656907399185e-05, 9.8164782684762031e-05, 7.8382472565863281e-05, 0.00010130145528819412, 0.00014111689233686775, 9.663350647315383e-05, 6.9061359681654721e-05, 6.7511326051317155e-05, 9.731666068546474e-05, 9.8043085017707199e-05, 0.00010755776020232588, 0.0001347634824924171, 7.3266215622425079e-05, 7.4886840593535453e-05, 0.00014086061855778098, 9.1001747932750732e-05, } };
const TfArray<32, int> quant13_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[32*1*3*32] = { 
  /* [0][0][][] */ 27,92,16,10,1,-8,3,79,46,44,-38,91,38,99,17,21,14,29,-61,127,-19,82,112,59,-90,-69,-14,79,113,20,-42,5, 61,27,13,64,16,-120,-11,23,47,-50,46,59,77,-67,13,16,-30,-67,21,55,39,-50,-47,44,39,23,7,-36,39,61,82,-85, -59,-94,2,-90,-43,24,96,-46,-22,-65,-4,48,48,-94,-82,-52,22,19,-86,-1,-113,52,42,-39,4,-90,-3,-86,-71,-7,-61,79, 
  /* [1][0][][] */ 1,16,28,-1,-101,-69,29,19,118,19,-74,6,-44,29,-115,21,-5,48,-15,48,52,24,42,-99,-99,49,28,-12,-1,-29,20,-4, -62,70,61,-82,-50,1,-88,-54,-23,-31,-55,37,6,80,-20,-88,65,49,76,76,-46,18,3,-14,0,-63,-24,44,38,-101,66,6, 65,4,101,7,54,-62,-18,62,-47,-52,-44,78,-72,-61,-90,-127,-18,-9,-19,20,-3,31,74,-38,-29,19,12,18,66,-43,55,39, 
  /* [2][0][][] */ -80,-104,11,-14,77,61,-15,22,-75,55,-12,-9,116,-18,-43,87,19,43,61,-91,13,-31,-43,40,66,-8,-40,-66,-64,68,93,-5, -50,-60,-21,-104,88,5,-127,23,-76,-49,-1,-52,-2,93,99,70,-40,-18,13,-2,52,-47,-93,-26,-40,28,-9,-45,-19,31,-45,23, -111,1,37,-50,15,5,-110,-9,-112,48,82,-52,80,55,7,-26,52,32,56,-104,-43,-78,-26,74,48,62,-2,80,35,-38,99,18, 
  /* [3][0][][] */ 37,7,86,-71,-35,-37,35,-50,-11,-5,44,55,31,-27,-9,-58,-37,-114,-79,19,-112,70,15,91,53,50,82,-2,-14,-81,-86,-30, -78,48,57,16,-56,50,104,-80,127,89,-55,-5,-85,3,-108,36,-27,58,59,-6,6,-22,90,9,94,18,1,-54,-18,50,-15,-63, 48,-71,24,1,54,35,-5,-56,45,89,66,74,45,-72,-59,39,-68,-104,92,64,-44,57,-51,-25,74,-35,113,-25,60,31,27,-88, 
  /* [4][0][][] */ -12,35,-88,-25,-26,22,-6,-78,79,41,-92,-21,-33,9,70,52,-58,-16,-86,-83,-25,38,90,63,-7,-9,32,-36,-73,-2,3,-26, 3,-11,23,-76,-46,102,47,-71,-62,69,34,26,93,115,-33,-77,-79,-61,-90,-68,-27,72,29,65,-24,36,25,-113,53,82,-56,-65, -77,84,-127,-50,73,9,-49,-6,33,85,-91,5,36,104,-6,-35,32,68,30,-55,66,-31,48,-35,-43,-30,-47,-22,-15,67,-27,-55, 
  /* [5][0][][] */ -5,64,-22,-1,-87,-12,50,-32,23,70,12,-59,-61,7,20,-71,-70,-8,-13,47,34,16,0,-32,6,-10,-25,0,7,-26,-29,30, 24,4,-33,-18,-11,-36,71,17,-1,-14,1,45,-45,-29,-64,-75,-18,17,-15,25,-37,2,108,0,3,-5,31,37,48,-50,23,-2, 1,89,-15,-24,-76,-3,-46,8,54,38,3,38,-127,-1,-51,-22,-2,18,6,46,-51,-12,30,-34,-16,40,11,27,-68,-35,-44,-4, 
  /* [6][0][][] */ 111,14,-97,65,5,88,-23,19,-8,-26,2,-75,-89,57,-99,-88,82,-9,-9,81,2,32,-30,-2,33,57,-77,3,83,-69,-14,-44, -84,64,-58,9,6,-35,9,-60,20,-84,-64,-102,-109,39,29,-43,-70,116,80,2,37,67,11,-106,-43,70,20,105,44,-50,5,-113, -127,-74,27,-71,-22,60,93,27,98,52,-90,-30,-44,-56,-56,-118,-77,11,108,32,32,-67,21,-14,50,-70,-51,-74,51,-34,-1,29, 
  /* [7][0][][] */ 25,28,-39,71,25,46,35,35,36,-120,79,58,39,-55,72,24,-59,73,-12,60,-113,29,-26,-93,-45,-45,-3,-45,-114,27,109,-96, -4,19,-2,64,55,-51,24,-100,46,-64,-94,60,45,60,-58,-19,24,-32,-37,-17,-120,30,9,-24,30,17,-85,-75,8,3,-14,-86, 18,45,-38,25,2,-50,-25,16,-4,-51,43,-9,65,-65,-84,40,13,24,25,78,-127,0,52,-2,100,-1,6,-61,21,-51,49,-67, 
  /* [8][0][][] */ 92,127,21,59,-44,-85,77,-112,25,63,-18,-8,4,52,-39,38,-58,3,-24,-16,-95,-19,50,17,16,103,57,14,84,66,-1,-59, 82,-46,-26,54,-28,-30,-18,19,-54,-79,-94,110,-6,-12,-7,-28,18,-41,-29,30,-86,80,2,-51,1,27,-83,-39,-69,-123,-97,-38, 56,10,-44,-11,11,-15,126,58,36,-80,-98,20,-49,-19,-10,-17,-43,44,101,73,-20,101,89,-56,8,106,50,-50,-39,-31,98,-28, 
  /* [9][0][][] */ 18,51,-2,33,-9,6,10,-39,8,-35,-47,-113,-34,1,-93,-25,-9,61,0,-3,-33,-4,29,23,-37,-33,8,-47,49,13,-85,-46, -38,-39,69,-111,26,79,-45,-90,-19,-40,21,-77,-35,-1,-18,24,62,21,20,22,-1,-35,72,82,90,-29,-25,19,51,39,21,43, -5,-15,32,-127,41,-65,24,-74,96,-43,-8,-64,-70,-1,-67,-24,2,-15,25,-40,24,-8,63,-29,63,-86,53,-31,9,18,77,-27, 
  /* [10][0][][] */ -70,-51,24,-11,-27,-24,-63,-12,-49,-54,4,-9,19,-39,20,27,67,85,19,-35,20,-86,14,-26,53,13,23,21,-75,78,37,-28, -75,-51,2,-8,5,-8,-17,43,-13,-84,-3,4,-58,31,-65,30,51,70,74,-21,38,-51,9,12,60,79,-79,-69,42,-44,55,3, -35,-54,-14,5,20,-4,-127,-4,-67,-45,-25,21,-57,-42,-15,-58,51,-14,-5,-55,32,-19,-56,47,14,-25,-3,48,-38,58,2,48, 
  /* [11][0][][] */ -16,-51,12,-2,-24,22,27,-9,14,-65,-127,-90,79,67,-22,8,-17,-71,19,-17,16,2,-54,47,-40,-33,37,-54,18,74,-9,-51, 7,-52,-62,33,62,28,41,-13,9,-75,-54,-57,-7,31,-31,24,-41,10,-44,-15,36,64,-7,-1,43,4,-64,43,13,1,64,46, -28,-16,-26,-28,39,-6,-47,-10,-24,-73,33,47,56,71,-37,3,49,20,26,6,24,-8,38,22,4,66,51,31,67,36,-3,61, 
  /* [12][0][][] */ -46,-34,-31,40,36,-41,-64,9,-13,15,41,-20,-28,-45,17,38,100,-10,37,-23,-6,-6,1,-26,49,-15,6,-22,-39,78,24,19, 38,48,33,-3,12,-12,-62,53,-82,-57,-10,25,36,-36,-82,-7,-27,29,4,-30,-46,-116,42,-53,18,10,-90,21,-70,39,75,30, -63,-75,-55,-62,17,-39,-22,31,-64,-2,42,-21,41,-38,33,-56,4,15,-16,-66,47,15,-5,48,94,26,-127,19,-42,-30,49,-10, 
  /* [13][0][][] */ -3,-60,-76,-102,77,-34,-83,4,-27,81,93,-72,-2,47,72,-26,-96,-114,-38,21,-4,18,-5,62,-74,-26,-43,-52,11,55,10,-18, -62,-19,-20,-85,90,-42,-6,-35,-50,47,3,37,-60,4,12,40,-87,-15,30,37,95,-75,60,-28,30,-37,-54,45,-15,82,-92,-40, 46,-29,-36,-70,-8,-39,-26,23,-11,2,49,-79,27,10,57,-60,-93,-123,-93,35,84,83,-90,14,-107,63,104,25,62,79,-127,-14, 
  /* [14][0][][] */ 4,108,11,62,-23,106,34,32,61,52,58,28,119,-9,-84,18,85,18,60,116,9,52,-4,-11,-65,-4,-14,1,-46,58,123,5, -8,28,3,16,-82,-37,69,-57,40,-40,6,-49,3,63,22,62,30,35,-103,37,58,-6,60,-38,-30,-100,-64,-15,-48,3,13,-39, 57,90,-44,4,-14,-14,53,-2,88,-60,-82,-73,-6,-94,56,16,-22,-6,-78,30,-36,99,68,48,-127,-67,71,50,41,-10,-35,46, 
  /* [15][0][][] */ 14,-67,4,-103,19,32,27,4,-103,73,-76,17,74,67,11,-27,-5,21,-23,-6,94,35,55,21,-78,-31,5,33,40,101,45,-15, 35,61,-90,-99,-44,-19,34,71,30,14,37,50,-60,112,-13,44,-82,13,7,-61,28,-46,14,104,-15,1,27,12,51,-7,73,-2, -4,-30,-6,-17,19,38,-4,31,62,96,-52,-11,86,86,5,-85,2,-58,-127,-15,83,-22,11,35,-14,24,23,-41,65,27,-108,-39, 
  /* [16][0][][] */ 7,11,-27,19,41,-36,-25,10,41,27,-16,-6,50,63,6,-36,1,34,51,-127,56,7,58,-28,56,16,14,-8,4,-18,41,-51, -6,-33,-38,-10,-18,-49,-95,115,-51,-13,22,34,-11,-29,-18,-32,-13,-16,94,11,71,-96,-78,76,68,71,-104,11,-60,22,12,-64, 1,-38,-69,-67,-1,10,-75,-9,-21,-10,82,33,4,-46,78,22,30,-32,39,-18,-15,-98,62,60,72,-35,4,63,2,13,-49,-19, 
  /* [17][0][][] */ 50,-5,-96,34,-2,-19,8,98,-36,-41,-44,0,41,16,-113,-39,83,56,41,-87,38,-101,53,-13,2,-15,86,-53,-20,14,13,-12, -91,-34,-46,-127,50,-44,-101,50,-45,15,60,-55,-15,-3,-37,1,-71,-67,-7,23,80,2,-6,70,10,71,39,-25,52,23,15,64, -26,-67,11,-26,26,-2,-93,-20,3,51,-41,47,-49,76,24,20,7,55,75,-34,-5,8,0,71,67,89,-45,-95,-117,3,-37,-17, 
  /* [18][0][][] */ 36,-127,16,25,1,40,-58,48,15,-51,59,-7,64,11,25,26,84,-23,25,-81,-34,-47,-21,-1,4,5,35,-31,74,96,39,14, -45,-92,-9,-57,-45,-46,54,6,26,-17,-10,8,-7,56,-77,-52,77,21,2,8,-23,28,-8,27,0,-4,46,-19,20,50,11,46, -35,17,28,30,64,-10,9,-7,-70,-10,58,-48,-10,63,23,-24,-28,63,41,-79,95,33,-87,-60,3,-34,-73,57,61,56,67,76, 
  /* [19][0][][] */ -37,-30,17,-17,-30,41,-46,39,45,-28,-17,68,-45,-20,-50,-6,-14,-73,85,127,23,32,-13,90,25,-25,77,-89,-27,4,-69,60, -4,-71,-10,-23,96,-120,-95,2,-42,-24,64,113,-33,77,70,-24,4,-57,82,91,-36,0,73,-78,66,-37,35,-28,-53,8,19,3, 79,-77,20,20,-1,-98,40,-105,9,6,86,-41,-54,-30,7,11,-77,50,-21,-53,58,75,-2,-17,3,-51,123,-75,71,52,36,-45, 
  /* [20][0][][] */ -60,-58,-11,-3,-37,-103,5,11,57,-28,120,36,-27,46,42,-20,67,-23,69,52,-19,-9,-18,23,-22,10,24,-90,-29,4,-11,46, 33,-36,-18,58,-49,-127,7,4,65,-36,-20,18,-29,41,-40,-6,-47,-39,37,24,28,25,-16,-52,-59,9,45,41,-33,25,51,-22, 14,40,-53,-4,-55,-117,8,22,-60,15,55,32,3,51,-16,-10,1,60,-51,-4,-41,38,12,34,-4,-48,49,-28,10,23,-63,36, 
  /* [21][0][][] */ 68,30,-78,38,-1,-63,67,-79,111,22,-35,50,-11,-16,23,-16,33,-49,-49,104,33,42,66,-18,-38,31,18,-23,-10,-10,-53,-20, 19,39,23,-61,-23,-75,52,-10,-32,64,-38,38,1,-46,-60,10,-33,-19,-67,49,-9,-33,26,-21,-25,-45,-95,4,-26,12,44,-40, 53,42,-61,-26,-80,14,40,10,55,-25,-104,4,22,-31,54,35,-30,-121,-29,91,4,90,37,-28,-127,34,52,16,8,-32,-42,-2, 
  /* [22][0][][] */ 98,63,-55,-1,-44,-74,-22,22,-66,35,59,-90,-19,-16,33,-26,-100,-92,59,83,79,-73,70,54,-79,-73,29,-39,-88,-36,-21,101, 75,116,-47,-71,-47,-70,-58,-19,-61,71,9,-55,-43,43,45,28,-115,45,58,57,-6,85,-13,19,49,-90,-57,-27,17,12,-108,-38, 124,2,27,33,27,-20,2,-28,-26,90,103,36,-5,-10,-27,49,54,-2,-63,4,-34,64,101,-127,-2,-35,21,-60,-56,-3,-105,-33, 
  /* [23][0][][] */ 39,-43,92,-3,28,51,59,37,24,6,47,39,67,-127,-3,22,34,70,25,-22,6,5,-52,57,-110,9,-22,0,-16,56,2,60, -16,25,32,8,-47,-31,27,26,11,-11,47,-62,64,-96,21,-51,2,1,-22,-6,-55,67,-21,-78,-4,-12,-14,9,81,-29,34,-6, 28,38,-50,-68,-71,-26,5,45,30,27,44,42,12,-60,40,38,-1,-28,2,-34,-24,-33,30,6,-77,-22,-40,45,29,57,-65,41, 
  /* [24][0][][] */ -43,-7,-5,27,-38,38,-36,58,7,48,53,-22,-65,21,-66,-37,46,54,88,-29,-43,-19,72,32,-62,-11,27,-18,-2,-14,-62,-12, 34,-30,-7,-87,-24,-48,12,-68,44,41,89,-5,39,62,-46,40,5,-9,-10,5,-36,-67,27,63,-73,20,39,23,26,50,49,-102, -81,-127,0,-23,32,-34,27,42,-14,-37,1,48,15,-8,-42,-17,-19,-8,20,-80,27,-11,-49,40,60,70,-43,57,-47,9,-40,10, 
  /* [25][0][][] */ -38,31,48,51,-62,-86,26,26,-36,74,16,32,74,-83,53,29,-50,-73,-26,8,32,20,61,-90,91,-19,-5,-2,-54,-42,37,72, 19,-51,67,-33,-17,-127,-20,-14,-52,-12,-94,36,-89,-74,-35,-125,18,-37,24,73,-93,-61,12,-98,-18,74,8,-65,-57,-1,70,80, -27,18,85,24,-95,-113,-54,123,-65,41,-50,-1,-82,-63,14,-59,-12,44,-5,9,-62,28,-21,9,19,16,94,-90,-49,29,-36,58, 
  /* [26][0][][] */ -37,51,-78,2,-19,-1,-37,-74,25,69,11,7,6,100,30,55,-127,-96,-102,83,92,45,16,-22,-55,6,-44,48,50,14,-29,-44, 0,-28,-30,-80,47,-10,79,-111,85,-3,12,-85,-25,0,30,64,-43,-91,-16,56,6,-13,57,101,-91,1,51,6,-30,76,-102,-56, 110,48,-39,43,3,19,30,-41,7,56,-59,-69,15,-75,-2,-20,25,-93,-124,-20,68,59,20,20,-54,-48,27,-8,-23,22,-83,55, 
  /* [27][0][][] */ 68,57,0,-46,-35,7,-40,58,10,45,-47,-5,40,-47,-60,-63,51,-6,-40,-17,-44,8,-63,-82,-33,71,-50,7,40,17,30,-75, -58,40,-22,20,-34,-13,68,-25,-1,2,-15,-51,42,20,30,-23,-15,67,-38,66,-2,-11,32,33,-1,-48,-51,38,37,-72,-31,-29, 32,12,-50,-50,-23,1,24,-12,74,-70,-36,37,47,-12,41,-85,73,-1,-15,17,35,-36,-21,-39,34,18,-127,-6,68,27,45,43, 
  /* [28][0][][] */ 18,16,-6,-41,-28,-37,-20,-25,66,24,-39,59,-74,1,72,-30,-49,-63,-12,-30,-2,-29,-19,64,-72,-7,-7,19,-14,21,-50,-21, -20,-34,-42,-59,-17,-18,-27,12,-24,40,9,-51,-7,2,-46,20,-111,-58,-47,15,-59,-11,-3,-30,-22,21,32,-5,23,-12,-50,-10, -26,-56,-24,-44,-51,-58,-54,-24,-36,19,67,70,-11,-20,-44,-61,0,-63,-5,-12,17,17,-41,-56,53,-41,-8,0,-22,-54,-127,-12, 
  /* [29][0][][] */ -34,-45,67,-42,91,36,-75,-44,-4,15,-125,8,-12,-19,-21,-2,21,-90,58,72,-76,-101,-21,110,73,5,42,-58,75,14,-15,6, 69,-32,21,70,98,109,53,-31,78,-16,-5,-70,-74,8,50,54,27,5,-89,53,66,4,35,127,20,-61,62,51,-4,45,-101,-9, 43,100,-53,-28,-40,28,24,-115,52,45,-44,36,-56,17,87,35,-26,-46,-8,-77,-51,-60,25,9,-46,-22,-90,17,104,34,-97,10, 
  /* [30][0][][] */ 29,-19,54,-56,32,7,-50,-18,-127,48,-64,-60,-48,-28,48,-73,43,7,-16,35,58,-23,11,-19,70,-53,85,-98,-63,-28,-62,18, 70,-27,73,23,35,-61,-45,-35,2,-36,46,-28,40,-12,-54,51,15,-68,31,-64,-54,-45,33,34,5,72,36,-113,-43,-24,50,81, 32,-10,38,37,12,17,9,8,28,65,21,-71,-54,-26,-41,-35,-83,-66,35,44,82,14,11,-14,80,68,-67,-55,-46,60,-20,90, 
  /* [31][0][][] */ 19,-17,-7,48,5,-39,-62,36,-36,-69,-2,83,-36,-78,35,10,20,35,49,56,1,-8,40,-51,-49,-77,-80,87,50,70,-48,-70, -23,8,4,17,-9,-66,37,50,9,18,-12,35,38,10,-67,18,-28,88,-23,-27,29,121,-41,0,-48,-33,-25,41,9,-13,-52,-19, -30,45,62,24,69,38,-20,17,55,-33,-29,57,-11,-29,-62,-36,-45,-13,-19,-27,61,18,49,-88,-121,-127,38,55,46,-32,-30,-1, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant14_scale = { 32, { 0.0038922075182199478, 0.0043319649994373322, 0.0038036752957850695, 0.0032773097045719624, 0.00350331817753613, 0.005231635645031929, 0.0031285467557609081, 0.0040317685343325138, 0.0039047114551067352, 0.0032751772087067366, 0.004766352940350771, 0.002585121663287282, 0.0052027474157512188, 0.0037385383620858192, 0.0024667032994329929, 0.0043610432185232639, 0.003516326891258359, 0.0039464556612074375, 0.0031511599663645029, 0.0040725572034716606, 0.0056732315570116043, 0.0038848947733640671, 0.0027764292899519205, 0.0027141142636537552, 0.0039123590104281902, 0.0039415629580616951, 0.0043240753002464771, 0.005417809821665287, 0.0029454745817929506, 0.0030106273479759693, 0.0056629288010299206, 0.0036584846675395966, } };
const TfArray<32, int> quant14_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[32] = { -516, -663, -813, 502, 1228, -2929, -269, -57, 221, -607, -627, -139, -612, -1283, 134, -713, 704, -507, -375, -230, -725, -523, 39, -1281, -276, -251, -1653, -1608, 444, -2055, -715, 196, };
const TfArray<1, int> tensor_dimension15 = { 1, { 32 } };
const TfArray<32, float> quant15_scale = { 32, { 0.00023217166017275304, 0.00028742541326209903, 0.00022355436522047967, 0.0002756754111032933, 0.00013138090434949845, 0.00011387382983230054, 0.00026849342975765467, 0.00028424014453776181, 0.00030059574055485427, 0.00013553601456806064, 0.00024370352912228554, 0.00024315950577147305, 0.00027376081561669707, 0.0001134665944846347, 0.00022919764160178602, 0.00022716591774951667, 0.00026770855765789747, 0.00030726497061550617, 0.00033987752976827323, 0.0001855775190051645, 0.0001475751050747931, 0.00020027007849421352, 0.00024073434178717434, 0.00021364698477555066, 0.0003215419128537178, 0.00027302978560328484, 0.00013156732893548906, 8.1159807450603694e-05, 0.00015405537851620466, 0.00012616047752089798, 0.0002365242107771337, 0.00021773515618406236, } };
const TfArray<32, int> quant15_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[32*1*7*6] = { 
  /* [0][0][][] */ -2,-19,-40,30,94,27, 27,37,7,-12,122,-17, -9,-36,36,-86,96,31, -35,29,17,9,86,3, -30,21,-6,-60,104,-37, -29,50,35,-33,127,39, 29,33,-27,31,92,8, 
  /* [1][0][][] */ -39,-58,3,76,-127,80, 30,-13,-27,-15,-14,38, 16,47,8,41,-118,34, -9,-24,38,-70,-98,101, -21,-35,17,-37,-18,77, -23,26,-17,34,-78,-34, 5,-26,21,-70,-53,68, 
  /* [2][0][][] */ 56,-41,-71,62,38,1, 30,22,-85,51,24,-60, 66,-36,-82,27,-43,-127, -77,-75,38,65,62,-18, -73,62,77,1,22,-10, 16,-10,77,-3,89,7, -33,-12,2,-18,23,85, 
  /* [3][0][][] */ -51,37,30,59,106,15, 13,48,17,63,7,13, 47,-22,31,111,38,7, 16,-7,25,106,-20,-54, 13,-41,-39,127,24,5, 37,44,-23,33,63,-59, 39,-45,-49,73,-23,4, 
  /* [4][0][][] */ 86,-33,-12,61,-76,62, -52,61,-52,8,33,45, 27,-6,-60,20,-38,69, -71,-30,61,-11,-26,126, -70,7,-28,1,71,127, -15,-34,-91,0,-49,97, -2,-33,-49,-64,3,73, 
  /* [5][0][][] */ 0,77,3,12,-14,13, 17,-29,33,-20,-31,70, -28,1,6,64,-28,69, -36,24,82,40,37,46, 83,51,-14,48,-33,59, 0,35,95,5,46,106, -88,24,55,47,-89,127, 
  /* [6][0][][] */ 34,-34,-38,-54,-74,-7, -36,11,63,-86,-68,-41, 16,-89,-24,-50,-101,-25, -62,76,11,-98,38,-3, 53,-2,26,-65,-46,-29, -25,-60,-39,-60,-96,-2, -66,18,-13,-127,-1,-46, 
  /* [7][0][][] */ 57,34,-25,10,-111,15, 47,50,38,9,-127,-29, -2,19,-48,-45,-87,51, 36,11,23,-74,-87,-50, 6,-6,-35,-44,-105,-49, -50,3,50,-92,-11,-33, -69,-44,26,-10,12,26, 
  /* [8][0][][] */ 23,2,-18,-65,12,-102, -7,-45,-29,-22,57,-117, -14,58,22,42,-1,-111, -47,17,-4,-36,58,-127, -26,-34,-21,4,-24,-18, -33,-14,-22,21,3,-50, 56,30,-24,-4,20,-52, 
  /* [9][0][][] */ -7,50,4,-3,124,-5, -22,24,45,-19,127,94, -21,-59,-53,101,98,57, 85,8,-52,71,117,-67, 54,33,78,-27,12,-16, 73,-52,38,12,107,21, 89,-1,-77,104,72,41, 
  /* [10][0][][] */ 39,-61,5,-23,17,13, -58,-76,44,-13,52,20, -49,1,-21,93,113,-20, 33,25,-38,20,8,79, -34,20,-58,67,-2,127, 55,29,26,65,104,30, 24,-36,-6,-1,90,97, 
  /* [11][0][][] */ -11,-33,-87,46,32,127, 48,30,1,16,-11,97, 35,-36,28,23,-21,45, -16,-41,-26,39,53,80, 7,33,-12,-49,35,-11, -52,-55,0,27,75,87, -17,49,0,-22,99,98, 
  /* [12][0][][] */ 2,-34,30,82,-51,-93, -7,-48,1,127,9,-32, -38,31,36,111,40,37, -70,18,-36,44,-59,46, -50,-6,-33,99,-3,52, -8,48,22,-8,29,-39, 70,-46,28,-41,0,-9, 
  /* [13][0][][] */ 46,-6,56,93,-66,49, -42,48,-10,9,-127,32, -26,29,-9,20,-25,73, 35,51,-48,72,41,101, -29,64,-48,36,-85,4, 72,67,-42,-15,-72,66, 41,-15,-42,21,47,29, 
  /* [14][0][][] */ 69,-48,-54,-42,79,14, -3,-39,-42,63,-40,56, 33,24,-43,-64,114,-41, 52,45,-14,-64,106,-86, -72,-79,21,33,122,-95, -92,-45,-29,-8,15,32, 30,65,68,6,101,-127, 
  /* [15][0][][] */ -26,23,-66,-127,24,55, -29,63,46,-61,-53,-43, 18,-27,-52,-31,-80,-28, 37,14,-45,-99,-25,14, 73,28,74,-40,-70,-61, -37,-74,25,-52,-87,68, 80,56,23,-30,4,26, 
  /* [16][0][][] */ 1,31,-3,-127,13,57, 8,-42,11,-40,-13,99, 48,37,-21,-34,72,0, -9,-28,38,-93,-3,-10, 43,11,-49,-94,12,52, 15,-39,30,-40,94,10, 14,37,-23,0,12,65, 
  /* [17][0][][] */ -16,-25,-1,127,118,31, -46,23,22,65,22,59, -10,-25,-16,33,56,18, 2,7,8,87,4,24, 43,-40,-24,83,10,-14, -33,33,6,35,55,55, -34,-2,-7,33,10,-32, 
  /* [18][0][][] */ -40,27,25,-5,31,-83, -41,-35,48,23,6,-46, 55,60,33,9,-19,-82, -17,-47,-41,82,-47,-40, 53,-36,-2,36,24,-92, -43,-14,-15,-3,-24,-103, 15,53,20,-16,7,-127, 
  /* [19][0][][] */ 18,53,16,3,39,123, 72,13,42,-84,16,127, -33,36,7,-32,72,124, -29,47,60,-12,108,4, -18,-53,61,31,3,19, -8,-54,-18,27,-1,118, 0,61,-33,-87,-6,122, 
  /* [20][0][][] */ -28,-7,-52,37,-48,17, -30,-37,39,13,50,127, -17,-42,42,80,4,7, 44,-69,-28,73,-27,11, 2,-10,-29,71,-68,50, -49,32,-30,-1,11,104, -3,-98,74,47,-88,94, 
  /* [21][0][][] */ 15,-30,-45,52,-38,80, 38,-54,28,127,-5,-32, -20,-19,42,98,-75,-9, -8,-10,45,45,10,-6, 35,-25,39,43,-82,64, 20,27,16,47,-44,93, 49,27,-46,44,-63,103, 
  /* [22][0][][] */ -20,-33,-48,127,-19,-72, 56,-1,-39,71,-3,-34, -16,47,61,80,-49,-12, -22,-51,-22,75,-91,-87, 32,38,-26,44,-44,-96, -3,-1,-10,42,28,-47, 60,-15,-3,117,27,-21, 
  /* [23][0][][] */ 20,-58,61,-63,25,-61, -10,-26,11,-5,10,13, 39,-53,13,-1,12,-70, 39,-4,-20,-37,26,-22, 28,41,20,-14,-10,-32, 25,30,-18,-26,73,-127, -41,-27,34,-72,-13,-56, 
  /* [24][0][][] */ -4,-31,-33,-29,-124,67, -55,15,-3,13,-25,60, 45,30,34,-1,-59,78, 7,-8,-43,-6,-98,28, -41,4,-2,-37,-78,69, 23,-3,34,-49,-127,88, 24,29,-14,16,-69,43, 
  /* [25][0][][] */ 40,93,-29,41,85,55, -33,-66,59,-32,35,114, -12,68,-15,19,-2,40, -6,-75,-42,55,112,60, -23,32,76,12,127,87, 50,-36,-76,26,40,35, -14,-68,-34,-37,68,38, 
  /* [26][0][][] */ 38,40,-34,-68,-75,14, -11,17,-14,-122,-127,-23, -24,31,77,-73,-76,94, 1,-67,14,36,-76,84, -62,1,-32,-70,-91,-13, -51,-8,4,-6,-108,106, -124,1,9,-6,-45,92, 
  /* [27][0][][] */ -75,91,-56,-14,113,123, -63,116,60,74,59,-19, -13,-15,53,103,63,127, -40,20,-96,39,45,42, 84,57,-1,11,97,-6, 37,38,-1,127,18,88, -76,101,60,111,74,8, 
  /* [28][0][][] */ 78,64,51,66,-37,-29, 4,30,-61,5,-31,-41, 12,-7,-48,35,-54,83, 15,18,-7,44,31,49, 0,-41,-19,-37,16,-22, 33,-70,-83,51,-127,112, 82,-30,69,93,-126,123, 
  /* [29][0][][] */ 35,29,51,54,31,-110, 31,86,0,25,4,-66, -52,14,67,93,21,-17, -1,-38,-2,12,11,38, -49,49,53,98,-67,94, -43,14,-39,89,-65,50, -47,29,65,127,-26,-23, 
  /* [30][0][][] */ 20,-44,-15,-70,90,-8, 9,-49,6,-95,88,-4, 50,-15,40,-94,101,16, 39,-10,-27,-121,1,-110, -27,12,-18,-102,127,-45, 18,4,11,-62,21,-92, -31,32,39,-13,14,-91, 
  /* [31][0][][] */ 33,58,-104,10,-12,-95, 72,-52,-61,-37,-39,20, -87,-37,-66,71,49,-27, 10,28,-40,66,-19,82, -27,81,66,127,-21,67, -29,2,56,30,-109,33, -34,-7,67,100,1,-24, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 32,1,7,6 } };
const TfArray<32, float> quant16_scale = { 32, { 0.00085290824063122272, 0.0010558890644460917, 0.00082125165499746799, 0.0010127241257578135, 0.00048264229553751647, 0.00041832809802144766, 0.00098634033929556608, 0.0010441875783726573, 0.0011042717378586531, 0.00049790652701631188, 0.00089527183445170522, 0.00089327333262190223, 0.0010056906612589955, 0.00041683207382448018, 0.00084198289550840855, 0.00083451910177245736, 0.00098345696460455656, 0.0011287718079984188, 0.0012485777260735631, 0.00068173953332006931, 0.0005421334644779563, 0.00073571427492424846, 0.00088436424266546965, 0.00078485580161213875, 0.0011812198208644986, 0.00100300507619977, 0.00048332710866816342, 0.00029814953450113535, 0.00056593946646898985, 0.00046346444287337363, 0.00086889782687649131, 0.00079987419303506613, } };
const TfArray<32, int> quant16_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,300,6 } };
const TfArray<1, float> quant17_scale = { 1, { 0.27221176028251648, } };
const TfArray<1, int> quant17_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,150,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.024874163791537285, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,150,1,32 } };
const TfArray<1, float> quant19_scale = { 1, { 0.024874163791537285, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,75,1,32 } };
const TfArray<1, float> quant20_scale = { 1, { 0.024874163791537285, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<3, int> tensor_dimension21 = { 3, { 1,75,32 } };
const TfArray<1, float> quant21_scale = { 1, { 0.024874163791537285, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant22_scale = { 1, { 0.024874163791537285, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant23_scale = { 1, { 0.024722959846258163, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,75,32 } };
const TfArray<1, float> quant24_scale = { 1, { 0.024722959846258163, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<3, int> tensor_dimension25 = { 3, { 1,75,32 } };
const TfArray<1, float> quant25_scale = { 1, { 0.035281520336866379, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,75,32 } };
const TfArray<1, float> quant26_scale = { 1, { 0.035281520336866379, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant27_scale = { 1, { 0.076408378779888153, } };
const TfArray<1, int> quant27_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant28_scale = { 1, { 0.04910389706492424, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,38,64 } };
const TfArray<1, float> quant29_scale = { 1, { 0.091508530080318451, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,38,64 } };
const TfArray<1, float> quant30_scale = { 1, { 0.091508530080318451, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.018608797341585159, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,10 } };
const TfArray<1, float> quant32_scale = { 1, { 0.30925795435905457, } };
const TfArray<1, int> quant32_zero = { 1, { 67 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,10 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 17 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 17,16,15 } };
const TfArray<1, int> outputs1 = { 1, { 18 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 18,2 } };
const TfArray<1, int> outputs2 = { 1, { 19 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 19 } };
const TfArray<1, int> outputs3 = { 1, { 20 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 20,3 } };
const TfArray<1, int> outputs4 = { 1, { 21 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 20,4 } };
const TfArray<1, int> outputs5 = { 1, { 22 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 22,14,13 } };
const TfArray<1, int> outputs6 = { 1, { 23 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 23,3 } };
const TfArray<1, int> outputs7 = { 1, { 24 } };
const TfLiteAddParams opdata8 = { kTfLiteActRelu };
const TfArray<2, int> inputs8 = { 2, { 24,21 } };
const TfArray<1, int> outputs8 = { 1, { 25 } };
const TfLiteReshapeParams opdata9 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs9 = { 2, { 25,4 } };
const TfArray<1, int> outputs9 = { 1, { 26 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 2,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 26,12,11 } };
const TfArray<1, int> outputs10 = { 1, { 27 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 2,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 26,10,9 } };
const TfArray<1, int> outputs11 = { 1, { 28 } };
const TfLiteAddParams opdata12 = { kTfLiteActRelu };
const TfArray<2, int> inputs12 = { 2, { 28,27 } };
const TfArray<1, int> outputs12 = { 1, { 29 } };
const TfLiteReshapeParams opdata13 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs13 = { 2, { 29,5 } };
const TfArray<1, int> outputs13 = { 1, { 30 } };
const ALIGN(1) uint8_t opdata14[1] = { 0,  }; /* op type 40=MEAN */
const TfArray<2, int> inputs14 = { 2, { 30,6 } };
const TfArray<1, int> outputs14 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata15 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs15 = { 3, { 31,8,7 } };
const TfArray<1, int> outputs15 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata16 = { 1 };
const TfArray<1, int> inputs16 = { 1, { 32 } };
const TfArray<1, int> outputs16 = { 1, { 33 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1808), (TfLiteIntArray*)&g0::tensor_dimension0, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 12, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 4, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 640, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 1344, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension17, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension18, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension19, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7200), (TfLiteIntArray*)&g0::tensor_dimension20, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4800), (TfLiteIntArray*)&g0::tensor_dimension21, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2400), (TfLiteIntArray*)&g0::tensor_dimension22, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension23, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2400), (TfLiteIntArray*)&g0::tensor_dimension24, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension25, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension26, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4864), (TfLiteIntArray*)&g0::tensor_dimension27, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension28, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2432), (TfLiteIntArray*)&g0::tensor_dimension29, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension30, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2688), (TfLiteIntArray*)&g0::tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension32, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension33, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[17] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_ADD, OP_RESHAPE, OP_CONV_2D, OP_CONV_2D, OP_ADD, OP_RESHAPE, OP_MEAN, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 34, };
const size_t tflNodes_subgraph_index[] = {0, 17, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  33, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 34;
  for (size_t i = 0; i < 34; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_MEAN] = Register_MEAN();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 17; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
